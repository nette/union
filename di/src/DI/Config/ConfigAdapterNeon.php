<?php

/**
 * This file is part of the Nette Framework (http://nette.org)
 *
 * Copyright (c) 2004, 2011 David Grudl (http://davidgrudl.com)
 *
 * For the full copyright and license information, please view
 * the file license.txt that was distributed with this source code.
 */

namespace Nette\Config;

use Nette,
	Nette\Neon;



/**
 * Reading and writing INI files.
 *
 * @author     Ondrej Hubsch
 */
final class ConfigAdapterNeon implements IConfigAdapter
{
	/** @var string  section inheriting separator (section < parent) */
	public static $sectionSeparator = ' < ';

	/** @var string  key nesting separator (key1> key2> key3) */
	public static $keySeparator = '.';


	/**
	 * Static class - cannot be instantiated.
	 */
	final public function __construct()
	{
		throw new \LogicException("Cannot instantiate static class " . get_class($this));
	}



	/**
	 * Reads configuration from NEON file.
	 * @param  string  file name
	 * @param  string  section to load
	 * @return array
	 * @throws \InvalidStateException
	 */
	public static function load($file, $section = NULL)
	{
		if (!is_file($file) || !is_readable($file)) {
			throw new \FileNotFoundException("File '$file' is missing or is not readable.");
		}

		$neon = Neon::decode(file_get_contents($file));

		$separator = trim(self::$sectionSeparator);
		$data = array();
		foreach ($neon as $secName => $secData) {
			if ($secData === NULL) { // empty section
				$secData = array();
			}

			if (is_array($secData)) {
				// process extends sections like [staging < production]
				$parts = $separator ? explode($separator, $secName) : array($secName);

				if (count($parts) > 1) {
					$parent = trim($parts[1]);
					$cursor = & $data;

					foreach (self::$keySeparator ? explode(self::$keySeparator, $parent) : array($parent) as $part) {
						if (isset($cursor[$part]) && is_array($cursor[$part])) {
							$cursor = & $cursor[$part];
						} else {
							throw new \InvalidStateException("Missing parent section $parent in '$file'.");
						}
					}
					$secData = Nette\ArrayTools::mergeTree($secData, $cursor);
				}

				$secName = trim($parts[0]);
				if ($secName === '') {
					throw new \InvalidStateException("Invalid empty section name in '$file'.");
				}
			}

			if (self::$keySeparator) {
				$cursor = & $data;
				foreach (explode(self::$keySeparator, $secName) as $part) {
					if (!isset($cursor[$part]) || is_array($cursor[$part])) {
						$cursor = & $cursor[$part];
					} else {
						throw new \InvalidStateException("Invalid section [$secName] in '$file'.");
					}
				}
			} else {
				$cursor = & $data[$secName];
			}

			if (is_array($secData) && is_array($cursor)) {
				$secData = Nette\ArrayTools::mergeTree($secData, $cursor);
			}

			$cursor = $secData;
		}

		if ($section === NULL) {
			return $data;

		} elseif (!isset($data[$section]) || !is_array($data[$section])) {
			throw new \InvalidStateException("There is not section $section in '$file'.");

		} else {
			return $data[$section];
		}
	}



	/**
	 * Write NEON file.
	 * @param  Config to save
	 * @param  string  file
	 * @param  string  section name
	 * @return void
	 */
	public static function save($config, $file, $section = NULL)
	{
		$output = array();
		$output[] = '# generated by Nette';// at ' . @strftime('%c');
		$output[] = '';
		$output[] = Neon::encode($section === NULL ? $config : array($section => $config->$section), Neon::BLOCK);
		if (!file_put_contents($file, implode(PHP_EOL, $output))) {
			throw new \IOException("Cannot write file '$file'.");
		}
	}

}
