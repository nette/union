Adresářová struktura
********************

Doporučená adresářová struktura
===============================
Ta "druhá otázka"((první bude: „Jakou verzi frameworku stáhnout?“)), se kterou se při zprovozňování Nette Frameworku setkáte, se bude týkat struktury aplikace. Dobrou zprávou je, že přímo ve staženém balíku Nette najdete složku tools/Skeleton, v níž je již předpřipravená struktura pro Vaši novou aplikaci.

Popis základní struktury
------------------------
/--
app/
    FrontendModule/
        presenters/
        templates/
    presenters/
    templates/
    models/
    components/
    log/
    temp/
    .htaccess
    bootstrap.php
    config.ini
document_root/
    .htaccess
    index.php
libs/
    .htaccess
    Nette/
\--

- soubory `.htaccess` ve složkách `app` a `libs` zakazují přístup pro čtení z prohlížeče
- soubor `.htaccess` ve složce `document_root` směruje všechny dotazy, které nevedou na existující soubor, na index.php
- `app/bootstrap.php` slouží k inicializaci Nette aplikace (viz níže)
- `app/config.ini` je hlavním konfiguračním souborem celé vaší aplikace
- složka `app/temp` slouží k uchování dočasných souborů aplikace, například cache šablon apod.
- do složky `app/log` se na produkčním souboru ukládají (nejčastěji chybové) logy
- ve složce `models` jsou umístněny [modely | doc:cs:Aplikace#Architektura], které nejčastějí komunikují s databází
- do složky `components` se umisťují vlastní [komponenty | doc:cs:Aplikace/Komponenty]
Záměrně jsme vynechali dvě zbývající složky - `app/presenters` a `app/templates`, proč jsme to udělali se se dozvíme [níže | #Struktura bez modulů].


Soubor index.php
----------------
Možná budete překvapeni, ale v tomto souboru se neděje téměř nic. Definujeme zde pouze několik konstant důležitých pro běh aplikace a následně předáme kontrolu souboru [`app/bootstrap.php` | #Soubor bootstrap.php].
 Tyto tři konstanty nám nyní nesou absolutní adresu adresářů rootu webu (`WWW_DIR`), našich aplikačních souborů (`APP_DIR`) a adresáře s knihovnami (`LIBS_DIR`).

V Nette se zachovává jednotný řád pro cesty k adresářům. Adresáře, ať v konstantě, proměnné, proměnné prostředí atd. neobsahují pravostranné lomítko. Není potřeba volat rtrim($dir, '/') . '/file.php' nebo se bát, že se někde zdvojí lomítko – stačí dodržovat konvenci. .[note]


Soubor bootstrap.php
--------------------
/--php
require LIBS_DIR . '/Nette/loader.php';
\--
Načteme loader Nette, tímto máme vystaráno a dále se nemusíme starat o načítání Nette tříd, děje se to automaticky.

/--php
Debug::enable();
\--
Zapneme [ladící mód | doc:cs:Ladění].

/--php
Environment::loadConfig();
\--
Načteme [konfigurační soubor | #Soubor config.ini].

/--php
$application->errorPresenter = 'Error';
//$application->catchExceptions = TRUE;
\--
Řekneme aplikaci, že naším presenterem použitým pro prezentování chyb v aplikaci  je presenter "Error".
 Druhý řádek určuje, zda-li Nette chyby bude hlásit nebo naopak skrývat a místo nich zobrazovat stránku s chybovým statusem 500. Výchozím chováním je automatická detekce - na lokálním počítači chyby uvidíte, na produkčním nikoliv.

/--php
$router[] = new Route('index.php', array(
    'presenter' => 'Homepage',
    'action' => 'default',
), Route::ONE_WAY);

$router[] = new Route('<presenter>/<action>/<id>', array(
    'presenter' => 'Homepage',
    'action' => 'default',
    'id' => NULL,
));
\--
Nastavíme [routy aplikace | doc:cs:Aplikace/Routování], aby bylo možné překládat URL adresy na názvy presenterů.

/--php
$application->run();
\--
A nakonec spustíme aplikaci!


Soubor config.ini
-----------------
V tomto souboru se zpravidla definují základní nastavení aplikace jako jsou přístupové údaje k databázi apod.

Konfigurační soubor se dělí na tzv. *sekce*. Jednotlivé sekce je možné pomocí `<` dědit. ([Více informací | doc:cs:Běhové prostředí#Konfigurační soubor]) Výchozí konfigurační soubor má tyto tři sekce:
- `common`: základní nastavení aplikace a PHP, které je vždy stejné
- `production`: dědí sekci `common`

/--
; PHP configuration
php.date.timezone = "Europe/Prague"
php.iconv.internal_encoding = "UTF-8"
php.mbstring.internal_encoding = "UTF-8"
;php.default_charset = "UTF-8"
\--
Úprava nastavení PHP tak, aby nám více vyhovovalo.

/--
; variables
variable.lang = en
variable.tempDir = %appDir%/temp
variable.logDir = %appDir%/log
\--
Nastavení [proměnných prostředí | doc:cs:Běhové prostředí#Proměnné].

/--
; services
service.Nette-Security-IAuthenticator = UsersModel

service.Nette-Loaders-RobotLoader.option.directory[] = %appDir%
service.Nette-Loaders-RobotLoader.option.directory[] = %libsDir%
service.Nette-Loaders-RobotLoader.run = TRUE
\--
Nastavení [služeb | doc:cs:Běhové prostředí/Služby]. Všimněte si služby RobotLoader, o které si povíme [níže | #RobotLoader].

/--
[production < common]
[development < common]
\--
Protože je vyžadována přítomnost výchozích sekcí `production` a `development`, musíme je definovat (dědí sekci common). Jelikož nemáme potřebu je rozšiřovat, necháme je prozatím prázdné.

O syntaxi a vlastním rozšiřování souboru config.ini se podívejte do dokumentace [běhového prostředí | doc:cs:Běhové prostředí#Konfigurační soubor]. .[tip]

Je NESMÍRNĚ důležité, aby soubor config.ini a vůbec celý adresář app & libs NEBYL dostupný z webového prohlížeče. Pokud neochráníte tyto adresáře před přímým přístupem z internetu, kdokoliv bude moci vidět vaše hesla a další citlivé informace. [Čtěte dále. | http://nette.org/cs/security-warning] .[caution]


Modulárnost aplikace
====================

Struktura bez modulů
--------------------
[Jak jsme si ukázali | #Popis základní struktury], ve složce `app` máme podsložky `presenters` a `templates`. Skeleton je nastaven tak, že aplikace bude bez problému fungovat. Do složky `presenters` se ukládají [presentery | doc:cs:Aplikace/Presenter] a do složky `templates` jejich [šablony | doc:cs:Šablony].

Pro následující část je vhodné vědět [co je presenter | doc:cs:Aplikace/Presenter]. .[note]
Struktura s moduly
------------------
Je nesmysl mít v aplikaci desítky presenterů postavených na stejnou úroveň. Prakticky vždy chceme aplikaci rozdělit alespoň na prezentační (frontend) a administrační (backend) část. Toho dosáhneme za použití modulů velice snadno.
 Výchozí struktura (Skeleton) moduly neobsahuje, proto si je musíte vytvořit sami, není to složité.

Budeme chtít mít dva zmíněné moduly - frontend a backend. Vytvoříme si složky `app/FrontendModule` a `app/BackendModule` a v každé z nich vytvoříme složky `presenters` a `templates`. Presentery a šablony do nich umisťujeme stejným způsobem, jako kdyby se o moduly nejednalo.

Tento modul je v rámci aplikace reprezentován jako "Front". Jeho presentery proto budou ve jmenném prostoru FrontModule (podle vzoru <NázevModulu>Module):
/--php
namespace FrontModule;

class DefaultPresenter extends \Nette\Application\Presenter
{
	//...
}
\--

Rozdíl v interním volání presenteru je již na první pohled logický - je zanořen do modulu. Pokud by tedy existoval presenter, který v modulu není a jmenoval se `HomepagePresenter`, jeho interní adresa bude `Homepage`. Pokud by byl v našem modulu, tedy `FrontModule\HomepagePresenter`, jeho interní cesta bude obsahovat název modulu a oddělovač (dvojtečku): `Front:Homepage`.

Pro komplexnější příklad modulární aplikace se podívejte do složky `examples/modules-usage` ve staženém balíku Nette. .[tip]

RobotLoader
===========
Nepsaným standardem při psaní PHP aplikací je ukládání jednotlivých tříd a rozhraní do samostatných souborů. To ale přináší pro programátora otravnou činnost - načítání požadovaných knihoven. Nemluvě o situaci, kdy máme aplikaci s několika desítkami tříd. Každý z nás jistě zná kusy kódu obsahující několik podobných řádků:
/--php
require_once __DIR__ . '/MyClass.php';
\--
Tohle sice přispívá ke zpřehlednění kódu, ale má to i slabé stránky:
- vkládáme soubory, které třeba nebudeme potřebovat
- ke každé třídě si musíme pamatovat název souboru

 Nette tento *problém* řeší velice elegantně.

Jak to funguje
--------------
Základem je autoloading pomocí magické funkce [spl_autoload_register | php:]. Díky ní se soubor s definicí třídy vloží až ve chvíli, kdy je skutečně potřeba.

Nette má pro autoloading vlastní pokročilou obsluhu. Jejím jádrem je vcelku jednoduchá funkce, která v adresáři webové aplikace proběhne všechny PHP skripty (tedy i podadresářích) a pomocí funkce [token_get_all | php:] v nich vyhledá definice tříd a rozhraní. Výsledkem je tabulka identifikátorů a "relativních cest"((vůči kořenu webové aplikace, aplikaci je pak možno libovolně přenášet a tabulka je stále platná)) k souborům. Nette pak přesně ví, který soubor při požadavku na konkrétní třidu vložit. Je to velice rychlé. Seznam zmapovaných se samozřejmě uchovává v cache na disku.

Při nahrání nové verze aplikace na web lze jedním příkazem tento seznam vygenerovat znovu, nebo ještě jednodušeji - stačí smazat příslušný soubor z cache a vygeneruje se sama.

Opomenutí smazat cache RobotLoaderu po aktualizaci často způsobuje problémy, proto pokud se vyskytne problém s nenalezeným souborem, vždy prvně smažte cache z dočasné složky (ve výchozím nastavení složka `app/temp`). .[caution]

Nette může běžet v tzv. ladícím režimu (DEBUG MODE). Pokud v tomto režimu není třída nalezena, provede se automaticky regenerace cache. Nepomůže-li to, ohlásí se error.

Výhody řešení
-------------
- zbavíte se všech volání `require_once`
- vkládají se jen potřebné soubory
- bez striktních konvencí pojmenování souborů
- možno mít více tříd v jednom souboru
- není třeba ručně udržovat tabulku
- Nette již při generování odhalí konflikty názvů
- připadáte si jako v kompilovaném jazyce

Je to prostě velmi pohodlné a krutě návykové. :-)

Konfigurace RobotLoaderu
------------------------
RoborLoader standardně provádí autoloading z adresářů `appDir a libsDir` díky přítomnosti těchto řádků:
/--code
service.Nette-Loaders-RobotLoader.option.directory[] = %appDir%
service.Nette-Loaders-RobotLoader.option.directory[] = %libsDir%
\--

To stačí pro 95% případů. Pokud je potřebné autoloading rozšířit na více adresářů, je nutné o tom RobotLoaderu říct. Nejjednodušším způsobem to jde v konfiguračním souboru `config.ini` přidáním další složky. Je důležité, aby tento kód byl uveden **před** spuštěním RobotLoaderu, tzn. musí být před řádkem přikazující spuštění. Ve výsledku to bude vypadat nějak takto:
/--code
service.Nette-Loaders-RobotLoader.option.directory[] = %appDir%
service.Nette-Loaders-RobotLoader.option.directory[] = %libsDir%
service.Nette-Loaders-RobotLoader.option.directory[]    = "nejaka/moje/slozka"
service.Nette-Loaders-RobotLoader.run = TRUE
\--
Kde na třetím řádku je vaše složka. Jednoduché, ne? :-)
