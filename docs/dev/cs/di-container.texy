Tento materiál není na fóru, páč neni určen k flejmvérování, nýbrž k seriózní diskuzi. .[caution]

Dependency injection container
******************************

Představa Honzy Marka

Základní teze
=============

O existenci DI ví jen minimum kódu.

(což nesplňují současné Contexty a Environmenty)

Dependency injection container
==============================

Asi tomu budu řikat ServiceContainer.

Co má umět?
-----------
- základní operace se službami
- ArrayAccess pro snadnější ovládání
- je možné vyměnit implementaci DI containeru
- načítat proměnné prostředí a konfiguraci
- definice závislostí (služba používá jiné služby)
- načítat služby je možné z více souborů pro případ modulární aplikace
- vychytanou konfiguraci, aby bylo potřeba co nejméně továrniček
- vícenásobné aliasy služeb

Konfigurace
-----------

ServiceContainer či ServiceContainerBuilder by měl načítat konfiguraci z PHP polí. Pak je jednoduché před to hodit načítání z čehokoliv, třeba z config.ini nebo z neon souborů s definicemi služeb.

**Zásadní rozdíly oproti současné definici služeb:**
- zrušit options, není dobré nařizovat, že veškeré parametry mají přijít v poli
- pokud ve frameworku nepůjde zrušit run, tak bych to přejmenoval aspoň na lazy (default true)
- možnost definice setter injection
- možnost definice constructor injection
- myslím, že v současném nette nelze definovat aliasy již v konfiguračním souboru
- "autowiring":#toc-autowiring
- možnost posílat jako parametry továrničce nebo konstruktoru jiné služby, proměnné prostředí nebo části konfigurace. možnost předávat konstanty zůstane zachována
- pro oslabení WTF faktoru bych rozdělil definici služeb pomocí názvu třídy a pomocí továrničky

Příklad:
/--php
array(
	// služba vytvořená pomocí názvu třídy
	"ISluzba1" => array("class" => "Sluzba1"),

	// služba vytvořená pomocí továrničky, aliasy
	"ISluzba2" => array("factory" => "Sluzba2::createInstance", "aliases" => array("Foo", "Bar")),

	// autowiring (constructor injection)
	"ISluzba3" => array("class" => "Sluzba3", "autowire" => TRUE),

	// constructor injection
	"ISluzba4" => array("class" => "Sluzba4", "arguments" => array(
		123, // konstanta
		"@ISluzba3", // služba
		'$var', // proměnná prostředí
		'$$database', // konfigurace
	)),

	// setter injection
	"ISluzba5" => array("class" => "Sluzba4", "callMethods" => array(
		"setNumber" => array(123),
		"setFoo" => array("@Foo"),
		"setVarAndConfig" => array('$var', '$$database'),
	)),
)
\--

Speciální parametry (ne konstanty) by se posílaly jako text s nějakým prefixem. Pokud někdo mermomocí bude potřebovat parametrem dostat text se zavináčem na začátku, tak ať si založí proměnnou s takovým obsahem :D Zas tak častý případ to snad nebude. To by mělo fungovat u argumentů konstruktorů/továrniček/setterů, ale nahrazení za proměnnou či text z konfigurace by měl jít i u parametrů class a factory.


Implementace kontejneru
-----------------------

Zvážil bych rozdělení na třídy ServiceContainer a ServiceContainerBuilder. ServiceContainer by umožňovala nastavit službu jen buď jako hotový objekt nebo továrničku. ServiceContainerBuilder by služby uměl do kontejneru sypat ze sofistikovaných konfigurací v PHP polích.

Běžně používané názvy služeb
============================

Nette používá obvykle jako název služby název interface. Což je snadno využitelné pro autowiring. Zdlouhavost názvů se jmennými prostory lze řešit aliasováním. Aliasů by měl být neomezený počet pro případ, že třeba kvůli autowiringu se použije jedna instance objektu třídy implementující více rozhranní jako několik služeb.

Autowiring
==========

Na workshopu ve wikidi jsem se rozhodl, že autowiring není magie, ale potenciálně užitečná věc. Šlo by jen o konvenci, že do konstruktorů (případně továrniček) bude ServiceContainer sypat služby pojmenované stejně, jaké mají parametry konstruktoru/továrničky typy. To by nastávalo samozřejmě jen služeb, u kterých autowire povolím.

Konfigurace:

/--php
array(
	"ISluzba1" => array("class" => "Sluzba1"),
	"ISluzba2" => array("class" => "Sluzba2"),
	"ISluzba3" => array("class" => "Sluzba3", "autowire" => TRUE),
)
\--

Třída Sluzba3:
/--php
class Sluzba3
{
	public function __construct(ISluzba1 $s1, ISluzba2 $s2)
	{
		// ...
	}

}
\--

Integrace do Nette
==================

Application a Environment by měl mít stejnou instanci ServiceContaineru, což teď není. Respektive by Environment jakožto statická třída měl odejít do důchodu a mít pravomoc možná tak na vydání aktuální instance aplikace.

Injektování služeb do presenteru
--------------------------------
Pro injektáž služeb by se dal použít konstruktor. Pokud teď konstruktor nevyužívá parametry, tak by to "nemusel být problém"((known issue: lidi nebudou vědět, co psát do konstruktoru a co do startupu)). Výchozí konstruktor by mohl brát jako parametr objekt IServiceContainer.

Celá řada mých presenterů nyní vypadá takto:

/--php
class BlablaPresenter extends BasePresenter
{
	private $service;

	public function startup()
	{
		parent::startup();
		$this->service = Environment::getService('BlablaService');
	}

	// ...
}
\--

Což by šlo změnit na dependenco-injektovatelnější:

/--php
class BlablaPresenter extends BasePresenter
{
	private $service;

	public function __construct(IBlablaService $service)
	{
		parent::__construct();
		$this->service = $service;
	}

	// ...
}
\--

Což by vyžadovalo úpravu Nette v tom, že by existovala jakási továrnička na presentery. Současný PresenterLoader je nedostačující.

/--php
// pseudokód
class PresenterFactory implements IPresenterFactory
{
	// ...

	public function __construct(IPresenterLoader $presenterLoader, IServiceContainer $container)
	{
		// ...
	}

	public function createPresenter($name)
	{
		$presenterName = $this->presenterLoader->getClassName($name);
		if (isset($this->container[$presenterName])) {
			$presenter = $this->container[$presenterName];
		} else {
			$types = getConstructorParamaterTypes();
			$args = array_map(function ($type) {
				return $this->container[$type];
			}, $types);
			$presenter = ClassReflection::from($presenterName)->createWithArguments($args);
		}
		$presenter->setName($name);
		return $presenter;
	}
}
\--

PresenterFactory by byla běžná nastavitelná služba.

Tohle zní hezky a univerzálně (služba může být i IServiceContainer), dokud si člověk neuvědomí existenci zkratek v presenteru na getSession, getHttpRequest atd... Což by šlo řešit povinným injektováním ServiceContaineru, které by mohlo probíhat přes setter, aby nepřekáželo v konstruktoru vedle dalších služeb. Kdo nechce, nemusí contructor injection v presenteru používat a může pracovat přes "$presenter->getContainer()->getService($service)"((nabízí se zkratka na $presenter->getService($service) )).

Bootstrap
---------

V bootstrapu by měla být poslední šance, jak ovlivnit container. Pak by se měl ServiceContainer předat aplikaci, která by jej zmrazila a distribuovala dál.

Poznámky
========
- "Hack, který zavádí nějaké to DI do současné verze Nette":https://gist.github.com/623720 ("novější verze s autowiringem":https://gist.github.com/04fd914f3fcbb2112d3f) - funguje na principu továrničky + options, které si továrnička přebere

Zdroje
======
- http://components.symfony-project.org/dependency-injection/
- http://martinfowler.com/articles/injection.html
