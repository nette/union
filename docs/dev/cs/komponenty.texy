Komponenty
***********

IN DEVELOPMENT .[caution]


Webová stránka se obvykle skládá z několika menších součástí, například to může být anketa, menší boxy aj. To se dá vyřešit pomocí „komponent“ tzn. třídy, která dědí od [Nette\Application\Control | api:]Control.

Komponenta [Nette\Application\Control | api:] ač má mnoho společných rysů s [Nette\Application\Presenter | api:] nemá svůj životní cyklus v pravém slova smyslu. Jen metody [Nette\Component::attached()] a [Nette\Component::detached()] umožňují detekovat, kdy byl Control připojen k nebo odpojen od rodiče (presenteru či jiné komponenty).

Každá komponenta děděná z třídy Control má jako první parametr konstruktoru rodiče ([Nette\IComponentContainer]) v hierarchii stromu komponent. Rodičem může být Presenter, nějaká komponenta nebo jakýkoliv jiný objekt implementující rozhraní IComponentContainer.
Toto nám umožnuje vytvářet dynamický strom komponent.

Komponenta (tedy přesněji vykreslitelná komponenta Control) nepředstavuje pravoúhlou oblast ve stránce, ale logickou komponentu, která se může renderovat i do více podob. Každá komponenta může být navíc na stránce vykreslena vícekrát, nebo podmíněně, nebo pokaždé s jinou šablonou atd.

Přiřazení komponenty a její přístup
---------------------
Přiřadit komponentu můžeme buďto dynamicky
/--php
$control = new DialogControl;
$parent->addComponent($control, 'dialog');
\--
Nebo tak že jí zaregistrujeme pomocí volání createComponent
/--php
protected function createComponentDialog(){
	$control = new DialogControl;
	return $control;
}
\--

Vykreslení komponenty se provede až po tom co je nalezen filtr v šabloně
/--html
{control dialog}
\--

Pozor na case-sensitive název metody. V názvu metody createComponentDialog je velké D ale ve volání dané componenty je už malé d .[caution]

Přístup ke komponentě u jeho rodiče (například naplnění defaultních hodnot formuláře z renderu) provedeme takto
/--php
$this->getComponent('dialog')
//Popřípadě alternativním přístupem
$this['dialog']
\--


Nevykreslitelná komponenta
---------------------------
Jedná se například o [Nette\Application\AppForm | api:], tedy formulář. O jeho vykreslení se stará [Nette\Forms\ConventionalRenderer|api:], proto je to nevykreslitelná komponenta. To nám umožňuje změnit styl vykreslování daného formuláře aniž bychom měnili jeho vlastní logiku.


Vykreslitelná komponenta
-------------------------
Jedná se o komponentu která obsahuje šablonu. Tedy zobrazuje informace a reaguje na požadavky uživatele.

Příklad komponenty může být například jednoduchý dialog který reaguje na rozhodnutí uživatele.
DialogControl.php
/--php
class DialogControl extends Nette\Application\Control {

    //Bude nám uchovávat stav rozhodnutí true/false
    private $decision = null;

    public function render(){
        //Vytvoříme šablonu
        $template = parent::createTemplate();
        //Soubor se šablonou
        $template->setFile(__DIR__.'/DialogControl.phtml');
        //Abychom měli decision pŕístupné i v šabloně
        $template->decision = $this->decision;

        $template->render();
    }

    public function handleDecide($decision){
        //Akceptujeme jen true nebo false
        if ($decision != 'true' && $decision != 'false') {
            throw new InvalidArgumentException;
        }
        //Nastav novou hodnotu decision
        $this->decision = $decision;
    }
}
\--

DialogControl.phtml
/--html
<a href="{link decide!,'true'}">Ano</a> / <a href="{link decide!,'false'}">Ne</a>

{if $decision == 'true'}
    Ano
{elseif $decision != null}
     Ne
{/if}
\--


Předávání parametrů ze šablony
------------------------------
/--html
{control dialog 'hodnota','hodnota2','hodnotaXX'}
\--
Všechny parametry jsou volány jako argumenty v metodě render dané komponenty.
/--php
public function render ($hodnota,$hodnota2,$hodnotaXX){
//...
}
\--
