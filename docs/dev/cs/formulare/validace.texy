Validace formulářů
******************

Rozdělení
=========
Nette zprostředkovává dva typy validace:
- [na straně serveru | #Serverová validace]
- [na straně klienta | #Klientská validace]

Serverová validace
------------------
Validace na straně serveru probíhá na základě Vámi definovaných pravidel.

Klientská validace
------------------
Klientskou validaci zajišťuje JavaScriptový kód, který je generovaný automaticky podle pravidel pro serverovou validaci. Není proto potřeba se o ni starat, Nette to udělá za Vás.

Klientská validace nepodporuje uživatelská pravidla definovaná pomocí callbacků. .[note]


Validátory
==========

 V následujících příkladech použijeme jednoduchý formulář:
/--php
$form = new Nette\Application\AppForm();
\--


Seznam dostupných validačních pravidel
--------------------------------------

|--------------------------
| Název konstanty | Praktický význam
|--------------------------
|--------------------------
| Textová pole || .<>
|-----------------------------------
| EQUAL      | pokud třetím argumentem není pole, musí být prvek jedním z jeho hodnot, pokud není polem, musí být hodnoty totožné
| IS_IN      | alias pro IS_IN
| FILLED     | hodnota musí být vyplněna
| MIN_LENGTH | minimální délka řetězce
| MAX_LENGTH | maximální délka řetězce
| LENGTH     | délka řetězce, třetím argumentem je buď jedno číslo (přesná délka) nebo pole kde první hodnotou je nejkratší a druhou nejdelší povolená hodnota
| EMAIL      | platný email
| URL        | platná URL adresa
| REGEXP     | validace dle regulárního výrazu zadaného ve třetím argumentu
| INTEGER    | celé číslo
| NUMERIC    | alias pro INTEGER
| FLOAT      | desetinné číslo
| RANGE      | číselné rozmezí hodnoty, třetím argumentem je pole, kde první hodnotou je nejnižší a druhou nejvyšší možná hodnota
|------------------
| Soubory || .<>
|------------------
| MAX_FILE_SIZE | maximální velikost souboru
| MIME_TYPE     | mime typ dle zadání ve třetím argumentu, buď jako pole povolených typů nebo řetězec oddělený čárkami
| IMAGE         | soubor musí být obrázek
|---------------------------
| Speciální případ || .<>
|---------------------------
| SCRIPT | vámi zadaný JavaScriptový kód, **nevaliduje se na serveru**



Přidání validátoru
------------------
Názvy validátorů jsou definovány jako třídní konstanty formuláře. Validátory se přidávají na jednotlivé [prvky formuláře | doc:cs:Formuláře/Formulářové prvky]. Na jeden prvek může být přidáno více validátorů, které ještě navíc mohou být [podmíněné | #Validační Podmínky]. Přidání jednotlivých validačních pravidlel se provádí metodou [addRule | api:Nette\Forms\FormControl::addRule] kde prvním argumentem je validační pravidlo a druhým chybová hláška v případě nesplnění. U některých pravidel se setkáte i s třetím parametrem, kterým je argument pro dané pravidlo (například hodnota pro maximální délku řetězce).
 V chybových hláškách můžete použít placeholdery((zástupné hodnoty)) pro popisek prvku (`%label`), jeho název (`%name`) a hodnotu (`%value`). Dále můžete, v případě použití argumentu, použít placeholdery podobně, jako u funkce [sprintf | php:] (viz příklad s hruškami).
/--php
//vytvoření prvku `name` s jedním pravidlem
$form->addText('name', 'Jméno')
     ->addRule($form::FILLED, 'Jméno musí být vyplněno');

//vytvoření prvku `pearCount` se třemi pravidly
$form->addText('pearCount', 'Počet hrušek')
     ->addRule($form::FILLED, 'Musíte uvést kolik hrušek chcete')
     ->addRule($form::INTEGER, 'Počet hrušek musí být číslo')
     ->addRule($form::RANGE, 'Můžete koupit pouze %d-%d hrušek', array(5, 20));
\--
Validační pravidla mohou být *negována* pomocí "binární negace"((znak ~)). Jejich význam je pak otočen. Praktické využití najdete nejčastěji u [validačních podmínek | #Validační podmínky]. Jednoduchý příklad:
/--php
$form->addText('username', 'Uživatelské jméno')
     ->addRule(~$form::EQUAL, 'Bylo použito zakázané uživatelské jméno', array('admin', 'administrator'));
\--



Validační podmínky
------------------
Validační pravidla mohou být skládána do validačních podmínek. Ty dělíme na dva typy:
- splnění příslušné podmínky na stejném prvku
- splnění příslušné podmínky na jiném prvku
Při práci s podmínkami používáme několik metod:
- [addCondition | Nette\Forms\FormControl::addCondition], prvním argumentem je podmínka, druhým je, v případě potřeby, argument podmínky
- [addConditionOn | Nette\Forms\FormControl::addConditionOn], prvním argumentem je jiný formulářový prvek, druhým podmínka, třetím je, v případě potřeby, argument podmínky
Pokud jsme již nějakou podmínku uvedli, nacházíme se v jejím kontextu, proto máme v tuto chvíli několik možností:
- přidat další validační podmínku
- vstoupit pomocí [elseCondition | api:Nette\Forms\Rules::elseCondition] do části s pravidly, která se provedou při nesplnění podmínky
- ukončit podmínku pomocí [endCondition | api:Nette\Forms\Rules::endCondition]
Příklad se stejným prvkem:
/--php
//pokud bude vyplněna webová adresa, musí být platná
$form->addText('website', 'Webová stránka')
     ->addCondition($form::FILLED)
         ->addRule($form::URL, 'Nebyla zadána platná URL');
\--
Příklad s pravidlem na jiný prvek:
/--php
$form->addText('email', 'E-mail');
$form->addCheckbox('notifications', 'Zasílat oznámení?');

//pravidlo není možné přidat ihned po vytvoření,protože
//v tu chvíli ještě neexistuje prvek `notifications`
$form['email']->addConditionOn($form['notifications'], $form::FILLED)
                 ->addRule($form::EMAIL, 'Musíte zadat platný email');
\--

Pravidla a podmínky můžete libovolně kombinovat a podmínky můžete zanořovat.


Vlastní validátory
------------------
Nette Vám umožňuje použít vlastní validátory. Ty se uvádí pomocí [PHP pseudotypu callback | php:pseudo-types]. Tento callback přijímá v prvním parametru instanci [objektu prvku | api:Nette\Forms\FormControl] a pokud je uvedeno v definici pravidla argument, je předán v druhém parametru. Callback by měl vracit hodnotu typu `boolean`, `TRUE` pokud je hodnota platná, `FALSE` pokud není.
/--php
$form->addText('oddNumber', 'Liché číslo')
     ->addRule($form::INTEGER)
     ->addRule(function (Nette\Forms\IFormControl $control) {
          return (bool) ($control->getValue() % 2);
     }, 'Musíte uvést liché číslo');
\--

Vlastní callbackové validátory nejsou validovány na straně klienta!
