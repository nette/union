Formulářové prvky
*****************

.[perex]
Přehled formulářových prvků, které Nette nabízí, vysvětlení jak fungují, k čemu každý z nich slouží a úpravy HTML výstupu.

Jednoduchý formulář
===================

/--php
$form = new Nette\Application\AppForm();
$form->addText('name', 'Název');
$form->addSubmit('ok', 'Ok');
\--

Na formulář jsou prvky přidávány pomocí metod s názvy `add{TypPrvku}`. U většiny prvků je prvním parametrem název prvku (v HTML atribut name) a druhým jeho viditelný popisek (obsah `label`u, u tlačítek value...). Tento druhý parametr je vždy volitelný, takže popisek můžeme definovat později, například až v šabloně. Některé formulářové prvky nabízejí další volitelné parametry podle jejich povahy. Metody prvky vracejí, takže s nimi můžeme dále pracovat.

Seznam prvků
============

Textové pole
------------
Textové pole přidáme do formuláře pomocí metody [addText | api:Nette\Forms\FormContainer::addText]. Třetím nepovinným parametrem je velikost pole (HTML atribut size) a čtvrtým jeho maximální délka (HTML atribut maxlength).

/--php
$form->addText('name', 'Jméno');

$form->addText('name', 'Jméno', 20, 30);  //ruční nastavení velikosti a maximální délky
\--

Víceřádkové textové pole
------------------------
Víceřádkové textové pole je přidáváno metodou [addTextArea | api:Nette\Forms\FormContainer::addTextArea]. Třetím volitelným parametrem je horizontální rozměr (HTML atribut cols) s výchozí hodnotou 40 a čtvrtým počet řádků (HTML atribut rows) s výchozí hodnotou 10.

/--php
$form->addTextArea('text', 'Text'); //výchozí velikost 40x10

$form->addTextArea('text', 'Text', 80, 20); //ručně upravená na 80x20
\--

Ve vyhledávacím poli nebo políčku pro zadání mailu se může hodit ignorování nějaké hodnoty jako prázdné. K tomu slouží metoda `setEmptyValue`.

/--php
$form->addText('mail', 'E-mail')->setEmptyValue('@'); //samotný zavináč je roven NULL
\--

.[see]
- Validace textových polí


Textové pole pro heslo
----------------------
Přidává se pomocí metody [addPassword | api:Nette\Forms\FormContainer::addPassword]. Jeho použití je totožné běžného oužití [textového pole | #Textové pole].
/--php
$form->addPassword('password', 'Heslo');
\--


Checkbox
--------
Zaškrtávací pole přidáme do formuláře metodou [addCheckbox | api:Nette\Forms\FormContainer::addCheckbox]. Při zpracování formuláře je hodnotou tohoty typu políčka vždy `TRUE` nebo `FALSE`.

/--php
$form->addCheckbox('allowed', 'Povolit');
\--


Výběr ze seznamu
----------------
Metoda pro přidání běžného HTML selectu se jmenuje [addSelect | api:Nette\Forms\FormContainer::addSelect]. Třetím, volitelným parametrem je pole klíčů hodnot a jejich popisků, které mohou vybírány. Čtvrtým, volitelným parametrem je výška v řádcích.

.[note]
Důležitou vlastností SelectBoxu z Nette Frameworku je, že je automaticky kontrolováno, jestli vám uživatel nepodstrčil nějakou nežádoucí hodnotu. To v praxi znamená, že vždy dostanete jen tu hodnotu, kterou jste uvedli v poli možných hodnot v PHP.

/--php
$form->addSelect('gender', 'Pohlaví', array(
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
));
\--

Alternativně lze přípustné hodnoty nastavit pomocí metody [setItems() | api:Nette\Forms\SelectBox::setItems()].

/--php
$form->addSelect('gender', 'Pohlaví');

$form['gender']->setItems(array(
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
));
\--

V praxi bývá běžnou situací, že první zadanou hodnotu chceme považovat za prázdnou. To nám umožní metoda `skipFirst`. Lze ji použít dvěmi způsoby:

/--php
$form->addSelect('gender', 'Pohlaví', array(
    'Vyberte pohlaví',
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
))->skipFirst(); //ignoruje první hodnotu v poli
\--
nebo:
/--php
$form->addSelect('gender', 'Pohlaví', array(
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
))->skipFirst('Vyberte pohlaví'); //ignorujuje uvedenou hodnotu a použije celé pole
\--

.[see]
- [Nette\Forms\SelectBox API reference | api:Nette\Forms\SelectBox]


Pole hromadného výběru
----------------------
Chová se téměř stejně jako [#Výběr ze seznamu], jediným rozdílem je možnost vybrání více položek. Přidává se pomocí metody [addMultiSelect | api:Nette\Forms\FormContainer::addMultiSelect].
/--php
$form->addMultiSelect('favouriteColor', 'Oblíbená barva', array(
    'red' => 'červená',
    'green' => 'zelená',
    'blue' => 'modrá',
));
\--


Přepínač hodnot
---------------
Přepínač hodnot je ve skutečnosti vizuální obdobou [výběru ze seznamu | #Výběr ze seznamu]. Přidává se metodou [addRadioList | api:Nette\Forms\FormContainer::addRadioList]. Třetím, nepovinným argumentem jsou (obdobně jako u selectu) položky.
/--php
$form->addRadioList('gender', 'Pohlaví', array(
    'Vyberte pohlaví',
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
));
\--


Soubor
------
Pole pro nahrání souboru přidáváme metodou [addFile | api:Nette\Forms\FormContainer::addFile]. Při zpracování formuláře z něj získáme objekt [Nette\Web\HttpUploadedFile | api:], se kterým lze dále pracovat. Například jej přesunout nebo jej převést na obrázek.

/--php
$form->addFile('file', 'Soubor');
\--

.[see]
- Validace souborů


Tlačítko
--------
Jedná se o obyčejné tlačítko (v HTML `input` typu button), které ve skutečnosti nic neumí. Jeho využití najdeme třeba v JavaScriptu. Přidává se metodou [addButton | api:Nette\Forms\FormContainer::addButton].
/--php
$form->addButton('Klikni, nic neumím');
\--
Pokud chcete tlačítko využít k odeslání formuláře, použijte [odesílací tlačítko | #Odesílací tlačítko]. .[note]


Odesílací tlačítko
------------------
Jedná se o obyčejné tlačítko pro odeslání formuláře. Přidává se pomocí metody [addSubmit | api:Nette\Forms\FormContainer::addSubmit]. Při stisknutí tlačítka a následném odeslání formuláře se na straně serveru provádí předem definované události.
/--php
$form->addSubmit('send', 'Odeslat');
\--
[Více o navěšení událostí na formulář. | doc:cs:Formuláře/Základní operace s formuláři#Zpracování odeslání na formuláři]

Formulář může mít samozřejmě více odesílacích tlačítek. V takovém případě se většinou využívá navěšení událostí na jednotlivé prvky, nikoliv na celý formulář. Můžeme tak jednoduše použít například jedno tlačítko pro uložení a další na náhled.
[Více o navěšení událostí na jednotlivé prvky. | doc:cs:Formuláře/Základní operace s formuláři#Zpracování odeslání na tlačítku]

Zajímavou vlastností odesílacích tlačítek je možnost vypnutí validace. Využívá se metody [setValidationScope | api:Nette\Forms\SubmitButton::setValidationScope] s parametrem `FALSE` To je velice užitečné v případě, že nechceme formulář validovat. Nejčastějším použitím může být tlačítko na zrušení (například editace článku).
/--php
$form->addSubmit('cancel', 'Zrušit editaci')->setValidationScope(FALSE);
\--


Obrázkové odesílací tlačítko
----------------------------
Chová se úplně stejně jako obyčejné [#odesílací tlačítko]. Přídáme jej metodou [addImage | api:Nette\Forms\FormContainer::addImage]. Jediným rozdílem je druhý argument metody, kterým není popisek, ale URL na obrázek (HTML atribut src).
/--php
$form->addImage('send', 'http://example.com/send-button.jpg');
\--


Skryté pole
-----------
Skryté pole přidáváme metodou [addHidden | api:Nette\Forms\FormContainer::addHidden]. Druhým, nepovinným parametrem je výchozí hodnota.

/--php
$form->addHidden('id');
\--


Kontejner prvků
---------------
Tento pseudoprvek poskytuje možnost zanořování ve formulářích. Jeho využití najdeme zejména ve chvíli, kdy chceme, aby nám od uživatele přišlo pole nějakých hodnot. Důležitou informací je, že stejně jako instance formuláře poskytuje všechny metody pro přidání prvků. Je tomu tak díky tomu, že kontejner je v PHP ve skutečnosti rodičem třídy formuláře.
 Kontejner přídáme metodou [addContainer | api:Nette\Forms\FormContainer::addContainer]. Jediným argumentem je jméno kontejneru.
/--php
$container = $form->addContainer('size');
$container->addText('width', 'Šířka');
$container->addText('height', 'Výška');
\--
Případně bez použití pomocné proměnné:
/--php
$form->addContainer('size');
$form['size']->addText('width', 'Šířka');
$form['size']->addText('height', 'Výška');
\--
Po odeslání a získání hodnot formuláře obdržíme pod klíčem *size* asociativní pole hodnot příslušných prvků, v tomto případě s klíči *width* a *height*.


Ochrana proti CSRF
------------------
Více informací o tom, jak Nette zprostředkovává ochranu proti CSRF naleznete v [základních operacích s formuláři | doc:cs:Formuláře/Základní operace s formuláři#Ochrana před Cross-Site Request Forgery (CSRF)]. .[note]

Prvek přidáme metodou [addProtection | api:Nette\Forms\Form::addProtection]. Tato metoda nemá žádný povinný parametr. Prvním volitelným parametrem je chybová hláška, pokud ověření selže. Druhým je doba platnosti, na jejímž konci token expiruje a odeslaný formulář se stává neplatným, defaultně má platnost po dobu existence session.

/--php
$form->addProtection();

$form->addProtection(NULL, 60 * 15); //ruční nastavení expirace na 15 minut

$form->addProtection('Security token has expired.', 60 * 15); //ruční nastavení chybové hlášky a expirace
\--

Tento prvek není možné přidat do [kontejneru | #Kontejner prvků]. .[note]

Validace
========
Na formulářové prvky lze jednoduše navěsit validační pravidla. Ta jsou popsána [zde | doc:cs:Formuláře/Validace].

Přizpůsobení HTML výstupu
=========================
Pro přizpůsobení HTML vlastností políčka použijeme metodu [getControlPrototype() | api:Nette\Forms\FormControl::getControlPrototype()]. Získáme tak šablonu, podle které bude políčko vyrobeno v podobě [Nette\Web\Html | api:] objektu.


/--php
$form->addText('name', 'Název');

$controlPrototype = $form['name']->getControlPrototype(); //instance Nette\Web\Html
$controlPrototype->class('big')->style(array('color' => 'red'));
\--
Totéž lze napsat bez použití proměnné pro instanci HTML prototypu.
/--php
$form->addText('name', 'Název')
     ->getControlPrototype()
     ->class('big')
     ->style(array('color' => 'red'));
\--
Je důležité uvědomit si, že na zavoláním poslední metody (style) dostáváme instanci objektu Nette\Web\Html, tudíž následně není možné upravit formulářový prvek plynulým zápisem. Je proto nutné provést potřebnou konfiguraci před úpravou html prvku nebo následně získat jeho znovu instanci (první způsob). .[caution]


Pro `label` je postup obdobný, liší se pouze název metody [getLabelPrototype() | api:Nette\Forms\FormControl::getLabelPrototype()]:

/--php
$form->addText('name', 'Název')->getLabelPrototype()->class('label-big');
\--

Obdobně můžeme upravit i HTML element samotného formuláře:
/--php
$form->getElementPrototype()->class('very-nice-form');
\--

Skupiny
-------
Formulářové prvky lze seskupovat i čistě vizuální cestou (tedy ne pomocí kontejneru). Slouží k tomu skupiny a metoda [addGroup($name) | api:Nette\Forms\Form::addGroup()]. Jedná se o Nette ekvivalent k `<fieldset>` a `<legend>`, který bude obsahovat data z parametru `$name`. Jejich chování se od prvků značně liší:
- přidávají se na formulář
- nijak neovlivňují strukturu dat
- jsou vykreslovány v pořadí v jakém byly přidány
- pokud existuje alespoň jedna skupina, prvky bez skupiny se vykreslují až po vykreslení skupin
K práci se skupinami se používají tyto metody:
- [addGroup | api:Nette\Forms\Form::addGroup]: slouží k přidání nové a otevření skupiny
- [setCurrentGroup | api:Nette\Forms\FormContainer::setCurrentGroup]: otevře již existující skupinu
- [removeGroup | api:Nette\Forms\Form::removeGroup]: odstraní skupinu
/--php
$form->addGroup('Osobní info');//následující prvky spadají do této skupiny
$form->addText('name', 'Jméno a příjmení');
$form->addText('email', 'E-mail');
$form->setCurrentGroup(NULL); //následující prvky nejsou v žádné skupině
$form->addSelect('question', 'Máte rádi psy?', array(
    'yes' => 'Ano',
    'no' => 'Na talíři',
));
\--
