Formulářové prvky
*****************

.[perex]
Přehled formulářových prvků, které Nette nabízí, vysvětlení jak fungují a k čemu každý z nich slouží.

Jednoduchý formulář
===================

/--php
$form = new Nette\Application\AppForm();
$form->addText('name', 'Název');
$form->addSubmit('ok', 'Ok');
\--

Na formulář jsou prvky přidávány pomocí metod s názvy `add{TypPrvku}`. Formulářový prvek je objektem třídy, která implementuje rozhraní [Nette\Forms\IFormControl | api:]. U většiny prvků je prvním parametrem název prvku (v HTML atribut name) a druhým jeho viditelný popisek (obsah `label`u, u tlačítek value...). Může jím být buď řetězec (bude escapován při vypsání) anebo objekt [Nette\Web\Html | doc:cs:Nette\Web\Html] (escapován nebude, lze tak docílit HTML popisku znaku). Tento druhý parametr je vždy volitelný, takže popisek můžeme definovat později, například až v šabloně. Některé formulářové prvky nabízejí další volitelné parametry podle jejich povahy. Metody prvky vracejí, takže s nimi můžeme dále pracovat.

Společné operace pro všechny typy prvků
=======================================

.[caution]
TODO popsat takové ty věci jako `getValue`, `setValue`, `setDefaultValue`.


Seznam prvků
============

Textové pole
------------
Textové pole přidáme do formuláře pomocí metody [addText | api:Nette\Forms\FormContainer::addText]. Třetím nepovinným parametrem je velikost pole (HTML atribut size) a čtvrtým jeho maximální délka (HTML atribut maxlength).

/--php
$form->addText('name', 'Jméno');

$form->addText('name', 'Jméno', 20, 30);  //ruční nastavení velikosti a maximální délky
\--

.[see]
- [Nette\Forms\TextInput API reference | api:Nette\Forms\TextInput]

Víceřádkové textové pole
------------------------
Víceřádkové textové pole je přidáváno metodou [addTextArea | api:Nette\Forms\FormContainer::addTextArea]. Třetím volitelným parametrem je horizontální rozměr (HTML atribut cols) s výchozí hodnotou 40 a čtvrtým počet řádků (HTML atribut rows) s výchozí hodnotou 10.

/--php
$form->addTextArea('text', 'Text'); //výchozí velikost 40x10

$form->addTextArea('text', 'Text', 80, 20); //ručně upravená na 80x20
\--

Ve vyhledávacím poli nebo políčku pro zadání mailu se může hodit ignorování nějaké hodnoty jako prázdné. K tomu slouží metoda `setEmptyValue`.

/--php
$form->addText('mail', 'E-mail')->setEmptyValue('@'); //samotný zavináč je roven NULL
\--

.[see]
- [Nette\Forms\TextArea API reference | api:Nette\Forms\TextArea]


Textové pole pro heslo
----------------------
Přidává se pomocí metody [addPassword | api:Nette\Forms\FormContainer::addPassword]. Jeho použití je totožné běžného použití [textového pole | #Textové pole].
/--php
$form->addPassword('password', 'Heslo');
\--

.[see]
- [Nette\Forms\TextInput API reference | api:Nette\Forms\TextInput]


Checkbox
--------
Zaškrtávací pole přidáme do formuláře metodou [addCheckbox | api:Nette\Forms\FormContainer::addCheckbox]. Při zpracování formuláře je hodnotou tohoto typu políčka vždy `TRUE` nebo `FALSE`.

/--php
$form->addCheckbox('allowed', 'Povolit');
\--

.[see]
- [Nette\Forms\Checkbox API reference | api:Nette\Forms\Checkbox]


Výběr ze seznamu
----------------
Metoda pro přidání běžného HTML selectu se jmenuje [addSelect | api:Nette\Forms\FormContainer::addSelect]. Třetím, volitelným parametrem je pole klíčů hodnot a jejich popisků, které mohou vybírány. Čtvrtým, volitelným parametrem je výška v řádcích.

.[note]
Důležitou vlastností SelectBoxu z Nette Frameworku je, že je automaticky kontrolováno, jestli vám uživatel nepodstrčil nějakou nežádoucí hodnotu. To v praxi znamená, že vždy dostanete jen tu hodnotu, kterou jste uvedli v poli možných hodnot v PHP.

/--php
$form->addSelect('gender', 'Pohlaví', array(
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
));
\--

Alternativně lze přípustné hodnoty nastavit pomocí metody [setItems() | api:Nette\Forms\SelectBox::setItems()].

/--php
$form->addSelect('gender', 'Pohlaví');

$form['gender']->setItems(array(
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
));
\--

V praxi bývá běžnou situací, že první zadanou hodnotu chceme považovat za prázdnou. To nám umožní metoda `skipFirst`. Lze ji použít dvěmi způsoby:

/--php
$form->addSelect('gender', 'Pohlaví', array(
    'Vyberte pohlaví',
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
))->skipFirst(); //ignoruje první hodnotu v poli
\--
nebo:
/--php
$form->addSelect('gender', 'Pohlaví', array(
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
))->skipFirst('Vyberte pohlaví'); //ignoruje uvedenou hodnotu a použije celé pole
\--

.[see]
- [Nette\Forms\SelectBox API reference | api:Nette\Forms\SelectBox]


Pole hromadného výběru
----------------------
Chová se téměř stejně jako [#Výběr ze seznamu], jediným rozdílem je možnost vybrání více položek. Přidává se pomocí metody [addMultiSelect | api:Nette\Forms\FormContainer::addMultiSelect].
/--php
$form->addMultiSelect('favouriteColor', 'Oblíbená barva', array(
    'red' => 'červená',
    'green' => 'zelená',
    'blue' => 'modrá',
));
\--

.[see]
- [Nette\Forms\MultiSelectBox API reference | api:Nette\Forms\MultiSelectBox]


Přepínač hodnot
---------------
Přepínač hodnot je ve skutečnosti vizuální obdobou [výběru ze seznamu | #Výběr ze seznamu]. Přidává se metodou [addRadioList | api:Nette\Forms\FormContainer::addRadioList]. Třetím, nepovinným argumentem jsou (obdobně jako u selectu) položky.
/--php
$form->addRadioList('gender', 'Pohlaví', array(
    'Vyberte pohlaví',
    'm' => 'Muž',
    'f' => 'Žena',
    'u' => 'Ufoun',
));
\--

.[see]
- [Nette\Forms\RadioList API reference | api:Nette\Forms\RadioList]


Soubor
------
Pole pro nahrání souboru přidáváme metodou [addFile | api:Nette\Forms\FormContainer::addFile]. Při zpracování formuláře z něj získáme objekt [Nette\Web\HttpUploadedFile | api:], se kterým lze dále pracovat. Například jej přesunout nebo jej převést na obrázek.

/--php
$form->addFile('file', 'Soubor');
\--

.[see]
- [Nette\Forms\FileUpload API reference | api:Nette\Forms\FileUpload]


Tlačítko
--------
Jedná se o obyčejné tlačítko (v HTML `input` typu button), které ve skutečnosti nic neumí. Jeho využití najdeme třeba v JavaScriptu. Přidává se metodou [addButton | api:Nette\Forms\FormContainer::addButton].
/--php
$form->addButton('Klikni, nic neumím');
\--
Pokud chcete tlačítko využít k odeslání formuláře, použijte [odesílací tlačítko | #Odesílací tlačítko].

.[see]
- [Nette\Forms\Button API reference | api:Nette\Forms\Button]


Odesílací tlačítko
------------------
Jedná se o obyčejné tlačítko pro odeslání formuláře. Přidává se pomocí metody [addSubmit | api:Nette\Forms\FormContainer::addSubmit]. Při stisknutí tlačítka a následném odeslání formuláře se na straně serveru provádí předem definované události.
/--php
$form->addSubmit('send', 'Odeslat');
\--

Formulář může mít samozřejmě více odesílacích tlačítek. V takovém případě se většinou využívá navěšení událostí na jednotlivé prvky, nikoliv na celý formulář. Můžeme tak jednoduše použít například jedno tlačítko pro uložení a další na náhled.


Zajímavou vlastností odesílacích tlačítek je možnost vypnutí validace. Využívá se metody [setValidationScope | api:Nette\Forms\SubmitButton::setValidationScope] s parametrem `FALSE` To je velice užitečné v případě, že nechceme formulář validovat. Nejčastějším použitím může být tlačítko na zrušení (například editace článku).
/--php
$form->addSubmit('cancel', 'Zrušit editaci')->setValidationScope(FALSE);
\--

Vizte též: .[see]
- [Navěšení událostí na formulář | Formuláře/Základní operace s formuláři#Zpracování odeslání na formuláři]
- [Navěšení událostí na jednotlivá tlačítka | Formuláře/Základní operace s formuláři#Zpracování odeslání na tlačítku]

.[see]
- [Nette\Forms\SubmitButton API reference | api:Nette\Forms\SubmitButton]


Obrázkové odesílací tlačítko
----------------------------
Chová se úplně stejně jako obyčejné [#odesílací tlačítko]. Přídáme jej metodou [addImage | api:Nette\Forms\FormContainer::addImage]. Jediným rozdílem je druhý argument metody, kterým není popisek, ale URL na obrázek (HTML atribut src).
/--php
$form->addImage('send', 'http://example.com/send-button.jpg');
\--

.[see]
- [Nette\Forms\ImageButton API reference | api:Nette\Forms\ImageButton]


Skryté pole
-----------
Skryté pole přidáváme metodou [addHidden | api:Nette\Forms\FormContainer::addHidden]. Druhým, nepovinným parametrem je výchozí hodnota.

/--php
$form->addHidden('id');
\--

.[see]
- [Nette\Forms\HiddenField API reference | api:Nette\Forms\HiddenField]


Kontejner prvků
---------------
Tento pseudoprvek poskytuje možnost zanořování ve formulářích. Jeho využití najdeme zejména ve chvíli, kdy chceme, aby nám od uživatele přišlo pole nějakých hodnot. Důležitou informací je, že stejně jako instance formuláře poskytuje všechny metody pro přidání prvků. Je tomu tak díky tomu, že kontejner je v PHP ve skutečnosti rodičem třídy formuláře.
 Kontejner přídáme metodou [addContainer | api:Nette\Forms\FormContainer::addContainer]. Jediným argumentem je jméno kontejneru.
/--php
$container = $form->addContainer('size');
$container->addText('width', 'Šířka');
$container->addText('height', 'Výška');
\--
Případně bez použití pomocné proměnné:
/--php
$form->addContainer('size');
$form['size']->addText('width', 'Šířka');
$form['size']->addText('height', 'Výška');
\--
Po odeslání a získání hodnot formuláře obdržíme pod klíčem *size* asociativní pole hodnot příslušných prvků, v tomto případě s klíči *width* a *height*.

.[see]
- [Nette\Forms\FormContainer API reference | api:Nette\Forms\FormContainer]


Validace
========
Na formulářové prvky lze jednoduše navěsit validační pravidla. Ta jsou podrobně popsána [zde | Formuláře/Validace].
