Základní operace s formuláři
****************************

Definice formuláře
==================

Jelikož formulář je komponenta, definuje se dle příslušných pravidel. V následujícím textu je předpokládána jejich znalost, dokumentaci najdete [zde | doc:cs:Aplikace/Komponenty].

/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem loginForm
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentLoginForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		$form->addText('username', 'Přihlašovací jméno');
		$form->addPassword('password', 'Heslo');

		$form->addSubmit('submitter', 'Přihlásit');

		return $form;
	}
}
\--

Naplnění výchozími hodnotami
============================

Pro každé formulářové pole existuje metoda [setDefaultValue | api:Nette\Forms\FormControl::setDefaultValue], která jej umí před prvním zobrazením uživateli inicializovat výchozí hodnotou.

/--php
$form->addText('date', 'Datum vydání')->setDefaultValue(date('j.n.Y'));
\--

Pro nastavení výchozích hodnot pro více prvků se hodí spíše metoda formuláře s názvem [setDefaults | api:Nette\Forms\FormContainer::setDefaults]. Lze ji použít i na [kontejner prvků | doc:cs:Formuláře/Formulářové prvky#Kontejner prvků]. V případě, že byl formulář odeslán, se nemusíte obávat přepsání uživatelsky odeslaných hodnot. Nette se postará, aby se to nestalo.

/--php
$article = array(
	'name' => 'Článek',
	'description' => 'Popisek článku',
	'text' => 'Text článku',
);

$form->setDefaults($article);
\--

Pokud je získání výchozích dat náročnější, například dotazem do databáze, můžeme jejich nastavení uzavřít do podmínky `if ($form->isSubmitted()) { ... }`. Tato metoda bude ale fungovat pouze v případě, že formulář již je připojen k rodiči jako komponenta. (`$form = new Nette\Application\AppForm($this, $name);`) .[note]

Zpracování odeslaného formuláře
===============================

**Zpracování formuláře** probíhá v životním cyklu presenteru ve fázi zpracování signálů, která je **mezi fázemi action a render**. Například načítání dat do šablony je proto doporučeno provádět v render fázi, pokud je odeslaný formulář může změnit.

Reagovat na odeslání formuláře lze nastavením patřičných [událostí | doc:cs:Nette\Object#Události] na celém formuláři nebo na jednotlivých odesílacích tlačítkách.

Zpracování odeslání na formuláři
--------------------------------

Nejjednodušší způsob zpracování odeslaných dat je nastavením události `onSubmit` na formuláři. Událost je zavolána **při úspěšném odeslání** formuláře, tj. bez validačních chyb. Pro zpracování v případě chybného odeslání slouží událost s názvem `onInvalidSubmit`. V parametru získáváme instanci formuláře, ze kterého poté můžeme získat uživatelem odeslaná data a něco s nimi provést.

Jako `onSubmit` *událost* můžeme použít i [anonymní funkci | php:closures], nicméně jejich použití lze doporučit spíše pouze v případě krátkého kódu obslužné funkce.

Pro více informací jak události fungují navšivte [jejich dokumetnaci | doc:cs:Nette\Object#Události]. .[tip]

/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička na vytvoření přihlašovacího formuláře
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentLoginForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		$form->addText('usename', 'Příhlašovací jméno');
		$form->addPassword('password', 'Heslo');

		$form->addSubmit('submitter', 'Přihlásit');

		$form->onSubmit[] = callback($this, 'loginForm_submit');

		return $form;
	}

	/**
	 * Zpracováni odeslaných dat z přihlašovacího formuláře
	 * @param Nette\Application\AppForm
	 */
	public function loginForm_submit(Nette\Application\AppForm $form)
	{
		try {
			//pokusíme se přihlásit uživatele
			Nette\Environment::getUser()->authenticate(
				$form['username']->getValue(),
				$form['password']->getValue(),
			);
			$this->flashMessage('Byl(a) jste úspěšně přihlášen(a)');
			$this->redirect('default');
		} catch (Nette\Security\AuthenticationException $e) {
			//pokud došlo při přihlašování k chybě, zobrazíme chybovou hlášku
			$this->addError($e->getMessage());
		}
	}
}
\--

Data získaná metodou [getValues() | api:Nette\Forms\Form::getValues()] neobsahují hodnoty formulářových tlačítek, ani hodnotu prvku pro ochranu proti CSRF (pokud je použit).

Po odeslání formuláře by mělo následovat přesměrování podle návrhového vzoru "Post/Redirect/Get":http://en.wikipedia.org/wiki/Post/Redirect/Get, aby se předešlo jeho případnému vícenásobnému odeslání. .[note]


Zpracování odeslání na tlačítku
-------------------------------

Pokud má formulář více odesílacích tlačítek, je často vhodné využít možnosti přidat události jednotlivým odesílacím tlačítkům. Názvy těchto událostí jsou `onClick` a `onInvalidClick`. Stejně jako u formuláře i v tomto případě je událost `onClick` volána pouze v případě korektního odeslání formuláře a `onInvalidClick` v případě opačném.

Ukázka:
/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vytvářející registrační formulář
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentRegisterForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		//definice formulářových prvků

		$form->addSubmit('register', 'Registrovat')
				->onClick[] = callback($this, 'registerForm_register_click');

		//V tomto případě je použití anonymní funkce vhodnější díky kratšímu výslednému kódu
		$presenter = $this; //protože v Closure není dostupný objektový kontext, uložíme si jej do proměnné $presenter
		$form->addSubmit('cancel', 'Zpět')
			-	>setValidationScope(FALSE) //vypneme validaci formuláře pro toto tlačítko
				->onClick[] = function () use ($presenter) {
					$presenter->flashMessage('Děkujeme, že jste si registraci rozmyslel.');
					$presenter->redirect('default');
				};

		return $form;
	}

	/**
	 * Zpracování odeslaného registračního formuláře
	 * @param Nette\Forms\SubmitButton
	 */
	public function registerForm_register_click(Nette\Forms\SubmitButton $button)
	{
		$values = $button->getForm()->getValues();
		MyApplication\Models\Register::create($values);
		$this->flashMessage('Byl jste úspěšně registrován(a). No co s vámi máme dělat.');
		$this->redirect('default');
	}
}
\--

PHP 5.2 oproti novější verzi obsahuje několik omezení. Kromě absence [jmenných prostorů | php:namespaces] nezná ani [anonymní funkce | php:closures]. Musíte tedy **vždy** použít klasický [callback | api:callback]. .[caution]

Pro názvy obslužných funkcí je vhodné si ustálit pojmenovávací konvenci. Zde je v příkladech použita komponentově založená konvence `{názevFormuláře}_{názevAkce}` nebo `{názevFormuláře}_{jménoTlačítka}_{názevAkce}`, která je převzatá ze způsobu, jakým Microsoft Visual Studio generuje názvy pro události v jazyce C#. .[tip]


Ochrana před Cross-Site Request Forgery (CSRF)
=============================================

.[note]
Podstatou útoku CSRF (Cross-Site Request Forgery) je nalákání oběti útočníkem na stránku, která následně vykoná požadavek (přesměrováním nebo javascriptem) na server, na kterém je oběť přihlášena. Ochrana spočívá v kontroluje tokenu při zpracování požadavku, jehož hodnotu útočník nemůže znát a tudíž ji nemůže ani
podstrčit. Může jít třeba o náhodně vygenerované číslo, které se uloží do session.

Ochranu na formulář přidáme metodou [addProtection | api:Nette\Forms\Form::addProtection]. Tato metoda nemá žádný povinný parametr. Prvním volitelným parametrem je chybová hláška, pokud ověření selže. Druhým je doba platnosti, na jejímž konci token expiruje a odeslaný formulář se stává neplatným, defaultně má platnost po dobu existence session.

Ochrana by měla být aktivována pokaždé, kdy formulář mění nějaká citlivá data v aplikaci.

/--php
$form->addProtection();

$form->addProtection(NULL, 60 * 15); //ruční nastavení expirace na 15 minut

$form->addProtection('Security token has expired.', 60 * 15); //ruční nastavení chybové hlášky a expirace
\--

Iterace formulářových prvků
===========================
Díky skutečnosti, že formulář je [komponentový kontejner | doc:cs:Aplikace/Komponenty#Kontejner komponent] a formulářové jsou [komponenty | doc:cs:Aplikace/Komponenty], je možné s nimi tak zacházet. Pokud budeme chtít iterovat nad všemi prvky, uděláme to úplně stejně, jako kdyby se jednalo o jakékoliv jiné komponenty.
/--php
//$form instanceof Nette\Application\AppForm

foreach ($form->getComponents() as $control) {
	//$control je nyní formulářový prvek
}

//rekurzivní iterace
foreach ($form->getComponents(TRUE) as $control) {
	//...
}

//pouze odesílací tlačítka
foreach ($form->getComponents(TRUE, 'Nette\Forms\SubmitButton') as $control) {
	//$control je nyní formulářový prvek - odesílací tlačítko
}
\--

.[see]
- [Komponenty | doc:cs:Aplikace/Komponenty]
