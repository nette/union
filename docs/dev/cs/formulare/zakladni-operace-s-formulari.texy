Základní operace s formuláři
****************************

Definice formuláře
==================

Formulář, stejně jako všechny ostatní komponenty, se definuje pomocí tzv. továrničky, což je `protected` metoda s názvem ve tvaru `createComponent{NazevKomponenty}`. Nejčastěji bývají umístěny v presenterech.

Více informací o tom, jak továrničky fungují a jak je používat naleznete v [jejich dokumentaci | doc:cs:Aplikace/Komponenty#Továrničky na komponenty]. .[note]

/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem loginForm
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentLoginForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		$form->addText('username', 'Přihlašovací jméno');
		$form->addPassword('password', 'Heslo');

		$form->addSubmit('submitter', 'Přihlásit');

		return $form;
	}
}
\--

Naplnění výchozími hodnotami
============================

Pro každé formulářové pole existuje metoda [setDefaultValue | api:Nette\Forms\FormControl::setDefaultValue], která jej umí před prvním zobrazením uživateli inicializovat výchozí hodnotou.

/--php
$form->addText('date', 'Datum vydání')->setDefaultValue(date('j.n.Y'));
\--

Pro nastavení výchozích hodnot pro více prvků se hodí spíše metoda formuláře s názvem [setDefaults | api:Nette\Forms\FormContainer::setDefaults]. Lze ji použít i na [kontejner prvků | doc:cs:Formuláře/Formulářové prvky#Kontejner prvků].

/--php
$article = array(
	'name' => 'Článek',
	'description' => 'Popisek článku',
	'text' => 'Text článku',
);

$form->setDefaults($article);
\--

Pokud je získání výchozích dat náročnější, například dotazem do databáze, můžeme jejich nastavení uzavřít do podmínky `if ($form->isSubmitted()) { ... }`. Tato metoda bude fungovat pouze v případě, že formulář již je připojen k rodiči jako komponenta. (`$form = new Nette\Application\AppForm($this, $name);`) .[note]

V případě, že byl formulář odeslán, se nemusíte obávat, že by vám použití těchto metod přepsalo uživatelem odeslané hodnoty, Nette se postará, aby se to nestalo. .[tip]

Odeslání formuláře
==================

Zpracování formuláře probíhá v životním cyklu presenteru ve fázi zpracování signálů, která je mezi fázemi action a render. Například načítání dat do šablony je tedy doporučeno provádět v render fázi, pokud je odeslaný formulář může změnit. .[note]

Reagovat na odeslání formuláře lze nastavením patřičných *událostí* na odesílacích tlačítkách či celém formuláři.

Zpracování odeslaného na formuláře
----------------------------------

Nejjednodušší je nastavení události `onSubmit` na formuláři. Událost je zavolána **jen při úspěšném odeslání** formuláře, tj. bez validačních chyb. Pro zpracování v případě chybného odeslání slouží podobně používaná událost s názvem `onInvalidSubmit`.

Jelikož jsou události `onSubmit` a `onInvalidSubmit` pole, můžete na ně navěsit více než jednen [callback | api: ]/[anonimní funkci | php:closures]. .[tip]

/--php
use Nette\Security\IAuthenticator;

class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vyrábějící přihlašovací formulář
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentLoginForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		$form->addText('usename', 'Příhlašovací jméno');
		$form->addPassword('password', 'Heslo');

		$form->addSubmit('submitter', 'Přihlásit');

		$form->onSubmit[] = callback($this, 'processLoginForm');

		return $form;
	}

	/**
	 * Zpracováni přihlašovacího formuláře
	 * @param Nette\Forms\Form
	 */
	public function processLoginForm(Nette\Forms\Form $form)
	{
		try {
			//přihlásíme uživatele
			Nette\Environment::getService('Nette\Security\IAuthenticator')
				->authenticate(array(
				IAuthenticator::USERNAME => $form['username']->getValue(),
				IAuthenticator::PASSWORD => $form['password']->getValue(),
			));
			$this->flashMessage('Byl(a) úspěšně přihlášen(a)');
			$this->redirect('default');
		} catch (Nette\Security\AuthenticationException $e) {
			//pokud došlo při přihlašování k chybě zobrazíme chybovou hlášku
			$this->addError($e->message);
		}
	}
}
\--

Parametrem získáváme instanci formuláře, ze kterého poté můžeme získat uživatelem odeslaná data a něco s nimi provést.

Jako `onSubmit` *událost* můžeme použít i [anonymní funkci | php:closures], nicméně zhlediska přehlednosti kódu jejich použití nedoporučujeme. .[note]

Po odeslání formuláře by mělo následovat přesměrování podle návrhového vzoru "Post/Redirect/Get":http://en.wikipedia.org/wiki/Post/Redirect/Get, aby se předešlo jeho vícenásobnému odeslání. .[note]

Data získaná metodou [getValues() | api:Nette\Forms\Form::getValues()] neobsahují hodnoty formulářových tlačítek, ani prvku pro ochranu proti CSRF. .[note]


Zpracování odeslání na tlačítku
-------------------------------
Pokud má formulář více odesílacích tlačítek, hodí se, že zpracování může být pro každé tlačítko nastaveno zcela jinak. Odesílacím tlačítkům můžeme nastavit události s názvy `onClick` a `onInvalidClick`. I v tomto případě je událost `onClick` volána pouze v případě korektního odeslání formuláře.

Ukázka zpracování:
/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vyrábějící registrační formulář
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentRegisterForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		...

		$form->addSubmit('register', 'Registrovat')
			->onClick[] = callback($this, 'processRegistrationForm');

		//V tomto případě je naopak použití anonymní funkce žádoucí zhlediska kratšího kódu
		$that = $this; //protože v Closure není dostupný objektový kontext, použijeme jako alias proměnnou $that
		$form->addSubmit('cancel', 'Zpět')
			->setValidationScope(FALSE) // vypne validaci formuláře pro toto tlačítko
			->onClick[] = function () use ($that) {
				$that->flashMessage('Děkujeme, že jste si registraci rozmyslel.');
				$that->redirect('default');
			};

		return $form;
	}

	/**
	 * Zpracování registračního formuláře
	 * @param Nette\Forms\Form
	 */
	public function processRegistrationForm(Nette\Forms\Form $form)
	{
		$values = $button->getForm()->getValues();
		MyApplication\Models\Register::create($values);
		$this->flashMessage('Byl jste úspěšně registrován(a). No co s vámi mám dělat.');
		$this->redirect('default');
	}
}
\--

Zpracování pomocí callbacků:

PHP 5.2 oproti novější verzi obsahuje několik omezení. Kromě absence [jmenných prostorů | php:namespaces] nezná ani [anonymní funkce | php:closures]. Musíte tedy použít klasický [callback | api:callback]. .[caution]


Ochrana před Cross-Site Request Forgery (CSRF)
=============================================
.[note]
Podstatou útoku CSRF (Cross-Site Request Forgery) je nalákání oběti útočníkem na stránku, která následně vykoná požadavek (přesměrováním nebo javascriptem) na server, na kterém je oběť přihlášena. Ochrana spočívá v kontroluje tokenu při zpracování požadavku, jehož hodnotu útočník nemůže znát a tudíž ji nemůže ani podstrčit. Může jít třeba o náhodně vygenerované číslo, které se uloží do session.

/--php
$form = new Nette\Application\AppForm();
...
$form->addProtection($message, $timeout);
\--
Více informací k tomuto prvku naleznete v [jeho dokumentaci | doc:cs:Formuláře/Formulářové prvky#Ochrana proti CSRF]. .[note]

Obrana by měla být aktivována pokaždé, kdy formulář mění nějaká citlivá data v aplikaci.
