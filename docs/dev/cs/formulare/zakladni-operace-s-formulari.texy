Základní operace s formuláři
****************************

Definice formuláře
==================

Formulář, stejně jako všechny ostatní komponenty, se definuje pomocí tzv. továrničky, což je `protected` metoda s názvem ve tvaru `createComponent{NazevKomponenty}`. Nejčastěji bývají umístěny v presenterech.

Více informací o tom, jak továrničky fungují a jak je používat naleznete v [jejich dokumentaci | doc:cs:Aplikace/Komponenty#Továrničky na komponenty]. .[note]

/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem orderForm
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentOrderForm()
	{
		$form = new Nette\Application\AppForm();

		$form->addText('name', 'Jméno');
		$form->addText('surname', 'Příjmení');
		$form->addText('company', 'Firma');
		$form->addText('phone', 'Telefon');
		$form->addText('email', 'E-mail');
		$form->addSubmit('submitter', 'Odeslat poptávku');

		return $form;
	}
}
\--

Továrnička musí formulář buď vracet a nebo se někdy((např. použití uživatelem odeslané hodnoty při definici formuláře)) může hodit jeho okamžité připojení do stromu komponent.

/--php
class ExamplePresenter extends BasePresenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem orderForm
	 * @param string component name
	 */
	protected function createComponentOrderForm($name)
	{
		// formulář je připojen ihned
		$form = new Nette\Application\AppForm($this, $name);

		//zde deklarujeme prvky

		//a instance není vracena
	}
}
\--
Při tom se hodí předávaný parametr s názvem komponenty.


Naplnění výchozími hodnotami
============================

Pro každé formulářové pole existuje metoda [setDefaultValue | api:Nette\Forms\FormControl::setDefaultValue], která jej umí před prvním zobrazením uživateli inicializovat výchozí hodnotou.

/--php
$form->addText('date', 'Datum vydání')->setDefaultValue(date('j.n.Y'));
\--

Pro nastavení výchozích hodnot pro více prvků se hodí spíše metoda formuláře s názvem [setDefaults | api:Nette\Forms\FormContainer::setDefaults]. Lze ji použít i na [kontejner prvků | doc:cs:Formuláře/Formulářové prvky#Kontejner prvků].

/--php
$article = array(
	'name' => 'Článek',
	'description' => 'Popisek článku',
	'text' => 'Text článku',
);

$form->setDefaults($article);
\--

Pokud je získání výchozích dat náročnější, například dotazem do databáze, můžeme jejich nastavení uzavřít do podmínky `if ($form->isSubmitted()) { ... }`. Tato metoda bude fungovat ale pouze v případě, že formulář je jako komponenta již připojen k formuláři. Viz druhý příklad továrničky. .[note]

V případě, že byl formulář odeslán, se nemusíte obávat, že by vám použití těchto metod přepsalo uživatelem odeslané hodnoty, Nette se postará, aby se to nestalo. .[tip]

Odeslání formuláře
==================

Zpracování formuláře probíhá v životním cyklu presenteru ve fázi zpracování signálů, která je mezi fázemi action a render. Například načítání dat do šablony je tedy doporučeno provádět v render fázi, pokud je odeslaný formulář může změnit. .[note]

Reagovat na odeslání formuláře lze nastavením patřičných *událostí* na odesílacích tlačítkách či celém formuláři.

Zpracování odeslání na formuláři
--------------------------------

Nejjednodušší je nastavení události `onSubmit` na formuláři. Událost je zavolána **jen při úspěšném odeslání** formuláře, tj. bez validačních chyb. Pro zpracování v případě chybného odeslání slouží podobně používaná událost s názvem `onInvalidSubmit`.

Jelikož jsou události onSubmit a onInvalidSubmit pole, můžete na ně navěsit více než jednen callback/funkci. .[tip]

/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem orderForm
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentOrderForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		$form->addText('name', 'Jméno');
		$form->addText('surname', 'Příjmení');
		$form->addText('company', 'Firma');
		$form->addText('phone', 'Telefon');
		$form->addText('mail', 'E-mail');

		$form->addSubmit('submitter', 'Odeslat poptávku');

		$that = $this; //protože v Closure není dostupný objektový kontext, použijeme jako alias proměnnou $that

		$form->onSubmit[] = function (Nette\Application\AppForm $form) use ($that) {
			$values = $form->getValues();
			MyApplication\Models\Order::create($values);
			$that->flashMessage('Objednávka byla úspěšně odeslána');
			$that->redirect('default');
		};

		return $form;
	}
}
\--

Parametrem získáváme instanci formuláře, ze kterého poté můžeme získat uživatelem odeslaná data a něco s nimi provést.

Po odeslání formuláře by mělo následovat přesměrování podle návrhového vzoru "Post/Redirect/Get":http://en.wikipedia.org/wiki/Post/Redirect/Get, aby se předešlo jeho vícenásobnému odeslání. .[note]

Data získaná metodou `getValues` neobsahují hodnoty formulářových tlačítek, ani prvku pro ochranu proti CSRF. .[note]


Zpracování odeslání na tlačítku
-------------------------------
Pokud má formulář více odesílacích tlačítek, hodí se, že zpracování může být pro každé tlačítko nastaveno zcela jinak. Odesílacím tlačítkům můžeme nastavit události s názvy `onClick` a `onInvalidClick`. I v tomto případě je událost `onClick` volána pouze v případě korektního odeslání formuláře.

Zpracování pomocí Closure((anonymních funkcí)):

/--php
class ExamplePresenter extends Nette\Application\Presenter
{
	/**
	 * Továrnička vyrábějící registrační formulář
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentRegisterForm($name)
	{
		$form = new Nette\Application\AppForm($this, $name);

		...

		$that = $this;

		$form->addSubmit('register', 'Registrovat')
			->onClick[] = function (Nette\Forms\SubmitButton $button) use ($that) {
				$values = $button->getForm()->getValues();
				MyApplication\Models\Register::create($values);
				$that->flashMessage('Byl jste úspěšně registrován(a). No co s vámi mám dělat.');
				$that->redirect('default');
			};

		$form->addSubmit('cancel', 'Zpět')
			->setValidationScope(FALSE) // vypne validaci formuláře pro toto tlačítko
			->onClick[] = function () use ($that) {
				$that->flashMessage('Děkujeme, že jste si registraci rozmyslel.');
				$that->redirect('default');
			};

		return $form;
	}
}
\--

Zpracování pomocí callbacků:

PHP 5.2 oproti novější verzi obsahuje několik omezení. Kromě absence [jmenných prostorů | php:namespaces] nezná ani [anonymní funkce | php:closures]. Pro něj je tedy nutné použít pouze PHP pseudotyp [callback | php:pseodo-types], který je popsán níže. .[note]

/--php
class ExamplePresenter extends /*Nette\Application\*/Presenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem orderForm
	 * @return AppForm
	 */
	protected function createComponentOrderForm($name)
	{
		$form = new /*Nette\Application\*/AppForm($this, $name);

		$form->addText('name', 'Jméno');
		$form->addText('surname', 'Příjmení');
		$form->addText('company', 'Firma');
		$form->addText('phone', 'Telefon');
		$form->addText('email', 'E-mail');

		$form->addSubmit('submitter', 'Odeslat poptávku');

		$form->onSubmit[] = callback($this, 'orderFormSubmitted');

		return $form;
	}

	/**
	 * Odesílací handler pro orderForm
	 */
	public function orderFormSubmitted(/*Nette\Application\*/AppForm $form)
	{
		$values = $form->getValues();
		/*MyApplication\Models\*/OrderModel::create($values);
		$this->flashMessage('Objednávka byla úspěšně odeslána');
		$this->redirect('default');
	}
}
\--


Ochrana před Cross-Site Request Forgery (CSRF)
=============================================
.[note]
Podstatou útoku CSRF (Cross-Site Request Forgery) je nalákání oběti útočníkem na stránku, která následně vykoná požadavek (přesměrováním nebo javascriptem) na server, na kterém je oběť přihlášena. Ochrana spočívá v kontroluje tokenu při zpracování požadavku, jehož hodnotu útočník nemůže znát a tudíž ji nemůže ani podstrčit. Může jít třeba o náhodně vygenerované číslo, které se uloží do session.

/--php
$form = new Nette\Application\AppForm();
...
$form->addProtection($message, $timeout);
\--
Více informací k tomuto prvku naleznete v [jeho dokumentaci | doc:cs:Formuláře/Formulářové prvky#Ochrana proti CSRF]. .[note]

Obrana by měla být aktivována pokaždé, kdy formulář mění nějaká citlivá data v aplikaci.
