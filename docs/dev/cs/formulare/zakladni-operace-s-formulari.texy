Základní operace s formuláři
****************************

Definice formuláře
==================

Formulář je definován v presenterech v tzv. továrničkách. Jedná se o speciální metody, které jsou schopny na požádání vytvořit instanci komponenty, v tomto případě formuláře. Továrničky potřebují speciální název - `createComponent{nazevKomponenty}` - a viditelnost metody alespoň `protected`.

/--php
class ExamplePresenter extends BasePresenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem orderForm
	 *
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentOrderForm()
	{
		$form = new Nette\Application\AppForm;

		$form->addText("name", "Jméno");
		$form->addText("surname", "Příjmení");
		$form->addText("company", "Firma");
		$form->addText("phone", "Telefon");
		$form->addText("mail", "E-mail");

		$form->addSubmit("s", "Odeslat poptávku");

		return $form;
	}
}
\--

Továrnička musí formulář buď vracet a nebo se někdy může hodit jeho okamžité připojení do stromu komponent.

/--php
class ExamplePresenter extends BasePresenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem orderForm
	 *
	 * @param string component name
	 */
	protected function createComponentOrderForm($name)
	{
		// formulář je připojen
		$form = new Nette\Application\AppForm($this, $name);

		...

		// a není vracen
	}
}
\--

Při tom se hodí předávaný parametr s názvem komponenty.


Naplnění výchozími hodnotami
============================

Pro každé formulářové pole existuje metoda `setDefaultValue`, která jej umí před prvním zobrazením uživateli inicializovat výchozí hodnotou.

/--php
$form->addText("date", "Datum vydání")->setDefaultValue(date("j.n.Y"));
\--

Pro načtení více hodnot se více hodí metoda formuláře s názvem `setDefaults`.

/--php
$article = array(
	"name" => "Článek",
	"description" => "Popisek článku",
	"text" => "Text článku",
);

$form->setDefaults($article);
\--

.[note]
Pokud je získání výchozích dat náročnější, například dotazem do databáze, můžeme jejich nastavení uzavřít do podmínky `if ($form->isSubmitted()) { ... }`. Tato metoda bude fungovat ale pouze v případě, že formulář je jako komponenta již připojen k formuláři. Viz druhý příklad továrničky.

Odeslání formuláře
==================

.[note]
Zpracování formuláře probíhá v životním cyklu presenteru ve fázi zpracování signálů, která je po action fázi a před render fází. Například načítání dat do šablony je tedy doporučeno provádět v render fázi, pokud je odeslaný formulář může změnit.

Reagovat na odeslání formuláře lze nastavením patřičných *událostí* na odesílacích tlačítkách či celém formuláři.

Zpracování odeslání na formuláři
--------------------------------

Nejjednodušší je nastavení události `onSubmit` na formuláři. Událost je zavolána **jen při úspěšném odeslání** formuláře bez validačních chyb. Pro zpracování v případě chybného odeslání slouží podobně používaná událost s názvem `onInvalidSubmit`.

/--php
class ExamplePresenter extends BasePresenter
{
	/**
	 * Továrnička vyrábějící formulář s názvem orderForm
	 *
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentOrderForm()
	{
		$form = new Nette\Application\AppForm;

		$form->addText("name", "Jméno");
		$form->addText("surname", "Příjmení");
		$form->addText("company", "Firma");
		$form->addText("phone", "Telefon");
		$form->addText("mail", "E-mail");

		$form->addSubmit("s", "Odeslat poptávku");

		$presenter = $this;

		$form->onSubmit[] = function (Nette\Application\AppForm $form) use ($presenter) {
			$values = $form->getValues();
			MyApplication\Models\Order::create($values);
			$presenter->flashMessage("Objednávka byla úspěšně odeslána");
			$presenter->redirect("default");
		};

		return $form;
	}
}
\--

Protože událost je pole, můžu na obsluhu pověsit více obslužných funkcí.

Parametrem získám instanci formuláře a z něj poté můžu získat odeslaná data a něco s nimi provedu.

.[note]
Po odeslání formuláře by mělo následovat přesměrování podle návrhového vzoru "Post/Redirect/Get":http://en.wikipedia.org/wiki/Post/Redirect/Get.

.[note]
Data získaná metodou `Form::getValues` neobsahují hodnoty formulářových tlačítek.


Zpracování odeslání na tlačítku
-------------------------------
Pokud má formulář více odesílacích tlačítek, hodí se, že zpracování může být pro každé tlačítko nastaveno zcela jinak. Odesílacím tlačítkům můžeme nastavit události s názvy `onClick` a `onInvalidClick`. I v tomto případě je událost `onClick` volána pouze v případě korektního odeslání formuláře.

/--php
class ExamplePresenter extends BasePresenter
{
	/**
	 * Továrnička vyrábějící registrační formulář
	 *
	 * @return Nette\Application\AppForm
	 */
	protected function createComponentRegisterForm()
	{
		$form = new Nette\Application\AppForm;

		...

		$presenter = $this;

		$form->addSubmit("register", "Registrovat")
			->onClick[] = function (Nette\Forms\SubmitButton $btn) use ($presenter) {
				$values = $btn->getForm()->getValues();
				MyApplication\Models\Register::create($values);
				$presenter->flashMessage("Jste úspěšně registrován(a). No co s váma mám dělat.");
				$presenter->redirect("default");
			};

		$form->addSubmit("cancel", "Zpět")
			->setValidationScope(FALSE) // vypne validaci formuláře pro toto tlačítko
			->onClick[] = function () use ($presenter) {
				$presenter->flashMessage("Děkujeme, že jste si registraci rozmyslel.");
				$presenter->redirect("default");
			};

		return $form;
	}
}
\--



Obrana před Cross-Site Request Forgery (CSRF)
=============================================

.[note]
Útok spočívá v tom, že útočník naláká oběť na stránku, která vykoná požadavek (přesměrováním nebo javascriptem) na server, na kterém je oběť přihlášena. Ochrana spočívá v tom, že při požadavku se kontroluje token, jehož hodnotu útočník nemůže znát a tudíž ji nemůže ani podstrčit.

/--php
$form = new Nette\Application\AppForm;
...
$form->addProtection($messag, $timeout);
\--

Jako parametr je volitelně možné uvést text chybové hlášky, která se zobrazí uživateli, pokud je detekováno neoprávněné odeslání.

Token chránící před CSRF útokem má platnost po dobu existence session. Platnost je však možné zkrátit na počet sekund, které se uvedou jako druhý parametr.

Obrana by měla být aktivována pokaždé, kdy formulář mění nějaká citlivá data v aplikaci.
