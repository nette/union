Nacházíte se ve scénáři druhého **screencastu**:[nettecast], pokud chcete můžete [přejít na seznam scénářů jednotlivých screencastů | nettecast].

.[tip]
Dotazy na tento scénář nebo na screencast o Nette piště prosím Tomikovi:[http://tomik.jmx.cz] (autorovi tohoto textu) na "tomik@jmx.cz":[mailto:tomik@jmx.cz].

Screencast - Formuláře - scénář
==================

Informace o scénáři
-------------------

- **Název:** Formuláře
- **Délka:** cca 10 minut

0. úvodní znělka
----------------
1. slide s informace o screencastu
-----------------------------------

3. Přestavení
---------------

*Mluvené slovo + video hovořícího moderátora, který se představuje (to budu jako já :D).*

"Dobrý den, vítám Vás u Nettecastu, tedy screencastu o Nette Frameworku."

"V tomto screencastu si povíme o tom, jak Vám může Nette Framework ulehčit práci s formuláři."

4. Požadavky
----------------
"A co budete pro práci s formuláři v Nette potřebovat? Stáhnuté Nette, které si vložíte do svého projektu - pokud nevíte jak na to, podívejte se na screencast o zprovoznění Nette - a základní znalosti o programování v PHP. Nic víc."

5. Začínáme
-----------
"Proč vlastně Nette pro tvorbu formulářů využít? Odpověď je jednoduchá, i při tvorbě jednoduchého formuláře o několika položkách je mnoho věcí, na které se nesmí zapomínat, a ruku na srdce, pokud takový formulář píšeme "z hlavy", pak pravděpodobně na spoustu takových věcí zapomínáme, nebo je prostě jen vědomě neřešíme.  A právě proto Nette spousty takových věcí řeší za vás tak, abyste na ně nemuseli myslet."

"Začneme samozřejmě tím, že si Nette do projektu přidáme, např. takto:"

/--php
<?php
require 'Nette\loader.php';
?>
\--

"Téměř veškeré možnosti, které Nette nabízí pro usnadnění práce s formuláři v sobě skrývá třída **Form**, chceme-li tedy vytvořit nový formulář vytvoříme jej takto:"

 /--php
<?php
$form = new Form;
?>
\--

 "Nyní můžeme do tohoto formuláře přidat nějaké položky, chceme-li tedy vytvořit registrační formulář, bude to jméno a věk."

 "Prvním parametrem je vždy název prvku, druhým je jeho popisek."

/--php

<?php
$form->addText('name', 'Jméno:');
$form->addText('age', 'Věk:');
?>
\--
"Nyní bychom chtěli vložit položku pohlaví, víme že mohou být dvě pohlaví, vytvoříme si tedy pole s možnými hodnotami:"

/--php
<?php
$sex = array(
    'm' => 'muž',
    'f' => 'žena',
);

$form->addRadioList('gender', 'Pohlaví:', $sex);
?>
\--
"Všimněte si, že u tohoto prvku přibyl třetí parametr, kterým je pole možností, kterých může nabývat - v tomto případě tedy pohlaví."

"Dále bychom do formuláře chtěli vložit políčko pro e-mailovou adresu, heslo a tlačítko. Analogicky to tedy provedeme takto:"
/--php
<?php
$form->addPassword('email', 'E-mail:');
$form->addPassword('password', 'Heslo:');
$form->addSubmit('ok', 'Registrovat');
?>
\--
"Nyní si takový formulář necháme zobrazit a to jednoduše pomocí"

/--php
<?php
echo $form;
?>
\--

"Ještě než si prohlédneme výsledek v prohlížeči, upozorním, že script by měl být uložen v UTF. V případě, že pracujete v jiném kódování je nutné formuláři po jeho vytvoření pomocí `setEncoding` metody nastavit."

"Nyní si tedy otevřeme prohlížeč..."

"Vidíme, že pomocí několika málo řádek se nám podařilo vytvořit skoro hotový formulář."

6. Zpracování formuláře
-----------------------
"Buď lze nastavit, kam se formulář odešle pomocí metody `$form->setAction('zpracuj.php');` nebo lze využít zpracování pomocí php souboru, který formulář vytvořil, k tomu využijeme metody:"

/--php
<?php
// Byl formulář odeslán?
if ($form->isSubmitted()) {
    if ($form->isValid()) {
        echo '<h1>Formulář byl odeslán</h1>';

        // Získáme hodnoty
        $values = $form->getValues();

        // Data místo zpracování vypíšeme, ale v tomto místě by mělo dojít ke zpracování
        Debug:dump($values);
        exit;

        // V případě, že bychom data zrpacovávali, zde by měl být redirect, aby nemohl uživatel klávesou F5 nebo refresem stránky data odeslat znovu
    }
} else {
    // Pokud nebyl formulář odeslán je možné nastavit výchozí hodnoty:
    $form->setDefaults(array(
        'gender' => 'm' // Předpokládejme, že většina našich uživatelů budou muži :)
    ));}
?>
\--
"Nebo můžete u formuláře definovat callbackovou funkci, která bude zavolána, pokud dojde k odeslání formuláře:"

/--php
<?php
$form->onSubmit[] = 'FormSubmitted';
?>
\--

"Taktová funkce dostane fomulář jako parametr, takže jej pak může zpracovat:"
/--php
<?php
  function FormSubmitted($form) {
      $values = $form->getValues();

      // Nějaké další zpracování dat...
  }
?>
\--
"Tato fuknce bude zavolána až v případě, že byl formulář odeslán a všechna data jsou validní, není třeba tedy data kontrolovat pomocí `isValid()`."

"V případě, že náš formulář by měl více tlačítek, je možné zpracovávající fuknci nastavit pro jednotlivá tlačítka.."

/--php
<?php
$form->addSubmit('ok', 'OK')->onClick[] = 'OkSubmitted';
$form->addSubmit('cancel', 'Cancel')->onClick[] = 'CancelSubmitted';
?>
\--

"S tím, že funkce pro zpracovávání nedostává jako parametr formulář, ale tlačítko, jakým byl odeslán... Takže je nutné toto:"

/--php
<?php
  function OkSubmitted($button) {
      $form = $button->getForm();
      $values = $form->getValues();

      // Nějaké další zpracování dat...
  }
?>
\--
6. Ještě dále, a ještě lépe!
----------------------------

"Takový formulář ovšem nemá žádnou validaci, a vlastně ani jinou přidanou hodnotu, kterou jsem sliboval, tak pojme si tedy ukázal, jak dosáhnout toho, že uživatel vloží do fomuláře opravdu to, co po něm chceme. Pojďme se podívat na možnosti validace fomulářů v Nette:"

"První položkou je políčko se jménem, to budeme požadovat. Přidáme tedy validaci na prvek `name`:"

/--php
<?php
$form['name']->addRule(Form::FILLED, 'Zadejte jméno');
?>
\--

"První parametr říká o jaké pravidlo se jedná, druhá pak specifikuje chybovou hlášku."

"Vzhledem k tomu, že Nette\Form disponuje fluent rozhraním je možné validaci definovat už při vytváření prvku, tedy takto:"

/--php
<?php
$form->addText('name', 'Jméno:')
    ->addRule(Form::FILLED, 'Zadejte jméno');
?>
\--
"Povinný prvek získá CSS třídu `required` - je tedy možné si políčko nastylovat."

"Pojďme se na to podívat v prohlížeči: vidíme, že pokud položku nevyplním jsem rovnou javascriptem požádán o vyplnění, javascriptovou validaci generuje Nette samo, o nic se tedy nemusíte starat."

"Pokud si říkáte, co se stane, když vypnu javascript, můžeme si to ukázat:"

"Jak vidíte, nic se neděje, uživatel je na nutnost vyplnit políčko upozorněn serverem, i tuto validaci zajistí Nette samo, stačí pouze definovat pravidla..."

"Lze samozřejmě za sebou definovat i více pravidel, např. u věku budeme chtít, abych políčko bylo vyplněné, aby vyplněná hodnota bylo číslo, a aby bylo v rozmezí 5 až 120 let, to provedeme takto:"

/--php
<?php
$form->addText('age', 'Věk:')
    ->addRule(Form::FILLED, 'Zadejte věk')
    ->addRule(Form::INTEGER, 'Věk musí být číslo')
    ->addRule(Form::RANGE, 'Věk musí být v rozmezí od %d do %d let', array(5, 120));
?>
\--
"Všimněte si, že v chybové hlášce, která se týká rozmezí se neuvádí konkrétní čísla, ale zástupné znaky, čísla se vezmou ze třetího parametru, čoz je pole s čísly určující interval rozsahu."

"Dále budeme chtít přidat validaci na políčko s e-mailem.:"

/--php
<?php
$form->addText('email', 'E-mail:')
    ->addRule(Form::EMAIL, 'E-mailová adresa není platná');
?>
\--
"V takovémto případě ale bude e-mailová adresa požadována, může ale nastat situace, kdy ji nebudeme požadovat, ale budeme ji chtít validovat pouze v případě, že je zadána. Pro takové požadavky má Nette podmínky, jak na to?"

"Před definici pravidla prostě přidáme pomocí `addCondition` podmínku, která musí platit, aby se aplikovalo pravidlo."
/--php
<?php
$form->addText('email', 'E-mail:')
        ->addCondition(Form::FILLED) // podmínka: pokud je e-mail vyplněn
                ->addRule(Form::EMAIL, 'E-mailová adresa není platná'); // pak musí být platný
?>
\--
"V tomto případě se vám na zpracování dostane buď validní mailová adresa, nebo prázdný řetězec."

"Jestli se někdo z vás pokoušel registrovat na nějaký web z ciziny, jistě mi dáte za pravdu, že na některých klávesnicích najít zavináč je opravdu úkol hodný Esa Rimmera, jak tedy našim uživatelům, kteří nesedí u svého PC pomoci?"

"Můžeme u každého prvku nastavit tzv. prázdnou hodnotu, co to znamená? Pojďme si to ukázat..."
/--php
<?php
$form->addText('email', 'E-mail:')
        ->setEmptyValue('@') // předvyplněna hodnota!
        ->addCondition(Form::FILLED) // podmínka: pokud je e-mail vyplněn
                ->addRule(Form::EMAIL, 'E-mailová adresa není platná'); // pak musí být platný
?>
\--
"Předcházející definici prvku jsem doplnil o `setEmptyValue('@')`, to znamená, že tato hodnota bude v políčku "předvyplněna", ale pokud nedojde k její změně, je to bráno jako prázdná hodnota a ke zpracování formuláře se dostane prádzný řetězec."

"Pokud se nyní na formulář podíváme, vidíme, že u políčka email je předvyplněn @."

"Doplníme ještě validaci políčka pro heslo:"
/--php
<?php
$form->addText('password', 'Heslo:')
    ->addRule(Form::FILLED, 'Zadejte heslo!');
?>
\--
"Nyní máme hotovou celou validaci formuláře, když si ji prohlédneme, můžeme vidět, že se nám jako uživateli opravdu nepodaří odeslal nějakou informaci, kterou daná položka neakceptuje..."

"Pokud se pokusím formulář odeslat se špatnými hodnotami, upozorní mě."

"Pokud vše vyplním, jak mám, jen e-mail nechám prázdný, pak vidíte, že jednak nedošlo k jeho validaci - prádzná hodnota by validací neprošla a druhak vidíte, že předvyplněný zavináč se ke zpracování nedostal..."

7. A co ochranu, tu používáte?
------------------------------

"Kdo z Vás používá ochranu proti podtvření falešného požadavku na fomulář - tzv. Cross-Site Request Forgery? Pokud jste o tomto útoku neslyšeli, pak vězte, že se jedná o poměrně nebezpečný způsob, jak provést akce, které uživatel nemusí schválit, může tedy takto útočním např. smazat položky, případně provést jiném administrátorské operace, má-li právě přihlášený uživatel admin práva."

"Jak tomuto s Nette zabránit? Snadno!"

"Stačí po vytvoření formuláře přidat obranu a to takto:"

/--php
<?php
$form->addProtection('Vypršel ochranný časový limit, odešlete prosím formulář ještě jednou');
?>
\--

"A formulář je chráněný, formulář si sám generuje ochrané hashe a ty konkroluje, takže na útok, pokud se o něj někdo pokusí, přijde sám..."

8. Vykreslování
----------------
"Pokud se Vám nelíbí způsob, jakým se Nette formuláře vykreslují (ve výchozím nastavení do tabulky), pak si můžete toho chování velmi jednoduše změnit:"

"Nejprve si vezmeme vykreslovač - tzv. renderer formuláře:"

/--php
<?php
$renderer = $form->getRenderer();
?>
\--

"A tomu nyní můžeme nastavit, čím se mají jednotlivé prvky formuláře obalit:"
/--php
<?php
$renderer->wrappers['controls']['container'] = 'dl';
$renderer->wrappers['pair']['container'] = NULL;
$renderer->wrappers['label']['container'] = 'dt';
$renderer->wrappers['control']['container'] = 'dd';
?>
\--
"Že nevíte, co jednotlivé názvy znamenají? Na tomto přehledném obrázku..."

http://i.iinfo.cz/images/611/nette-formular.gif // ukážu obrázek

"... si můžete prohlédnou, jak jsou jednotlivé prvky formuláře rozděleny do skupin."

"Mnou napsané nastavení" - přepnu zpět na ...
/--php
<?php
$renderer->wrappers['controls']['container'] = 'dl';
$renderer->wrappers['pair']['container'] = NULL;
$renderer->wrappers['label']['container'] = 'dt';
$renderer->wrappers['control']['container'] = 'dd';
?>
\--
".. tedy celý formulář obalí do definičního seznamu, pár popsiku a prvku necháme neobalený, ale popisem obalíme do tagu `dt` a prvek do `dd`. "

"A vidíte, že se nám formulář vykreslil jinak..." // ukazuje formulář v prohlížeči

"V případě, že by se Vám takovéhle změny nechtělo provádět při každém použití fomrulářů, stačí si třídu `Form` podědit a změnit způsob vykreslování jejímu potomkovi."

9. Mnoho dalšího
----------------
"Nette Forms nabízí mnoho dalšího -- lze pracovat se všemi HTML formulářovými prvky, lze validovat vlastními funkcemi. Stejně tak jako v celém Nette i jakoukoli část formulářů v Nette, pokud vám nevyhovuje, je možné si ji podědit a změnit k obrazu svému."

"A pokud Vám chybí něco v zakládních Nette Forms, pak jsou další prvky v Nette Extras repozitáři..."

// ukážu DatePicker

// FileMultiUploader

// Captchu

// Nebo třeba Live validaci

10. Příklady
-----------

"V distribuci se nachází spousta příkladů práce s formuláři, doporučuju si je všechny prohlédnout a inspirovat se."

11. Závěř
---------
"Nyní už víte jak pracovat s Nette formuláři, a že vám Nette pomůže s jejich tvorbou i zpracováním."

"Pokud Vás zajímají všechny možnost Nette formulářů, doporučuji si projít API na adrese http://api.nette.org - zde klikněte na `Nette\Form`..."

"Pokud Vám není něco jasné, obraťte se na fórum, tam se nachází spousta lidí, kteří vám rádi pomohou."

"Děkuji za pozornost!"

.[tip]
Dotazy na tento scénář nebo na screencast o Nette piště prosím Tomikovi:[http://tomik.jmx.cz] (autorovi tohoto textu) na "tomik@jmx.cz":[mailto:tomik@jmx.cz].
