Database and model
****************

.[perex]
We are going to design a database structure and it's layer - a model. We are going to use Nette\Database as a base library for quick and easy usage. The reason for using this library will be described later in this article.


Database structure
====================
Let's create a new database and call it `quickstart` and put several tables into it. The first will be for users (`user`), the second for tasks (`task`) and the last one for lists (`list`).

[* 03-schema.png *]

User table:

- `id`:          unique ID
- `username`:    login
- `password`:    hashed password (we are going to use Blowfish hash function to protect passwords against brutal force attacks)
- `name`:        user's  real name

List table:

- `id`:          unique ID
- `title`:       list's name

Task table:

- `id`:          unique ID
- `text`:        task
- `created`:     date and time, when the current task was created
- `done`:        marks finished task
- `user_id`:     ID of the assigned user
- `list_id`:     ID of the list, the task is part of

To create database, we can use "Adminer":[http://adminer.org/], which is preinstalled with sandbox. You can find it on the following address: `http://localhost/sandbox/www/adminer/`.

To create tables, you can use the following sql "script":https://github.com/nette/quickstart/blob/master/mysql.structure.sql.

To add some test data, you can use the following sql "script":https://github.com/nette/quickstart/blob/master/mysql.data.sql.

These scripts are prepared for using in MySQL database, because it is the most widely used database.
To use it in another database, you might have to modify it a bit.

Connectiong to the database
====================

Connection string is written in a configuration file `app/config/config.neon`. If you need help with connection strings for MySQL in PHP, visit "PHP doc":http://php.net/manual/en/ref.pdo-mysql.connection.php. Don't forget to check the validity of your credencials.

/---neon
	nette:
		database:
			dsn: 'mysql:host=localhost;dbname=quickstart'
			user:
			password:
\---

.[note]
Be careful with indents while editing this file. "NEON":http://ne-on.org/ format accepts both spaces and tabs, but not both together! In this sandbox configuration file only tabs are used.


Model
=====

A domain model is like a heart of your application. The model represents the probl√©m that is solved by your application. The model contains entities (objects, in our case for users, tasks and lists), their behavior and interactions. The model is independent on an application logic (see "MVC":http://doc.nette.org/en/presenters#toc-model-view-controller-mvc).

There are many ways, how to desing a model and how to access data. Realy usefull one is Facade pattern.
The purpose of this pattern is dividing model into several layers:

- service
- entity
- repository
- mapper
- data storage

Service or facade is a top level layer which uses entities for the desired operations, usualy requested by a controller (application logic). Entities represent our objects. Repositories handle basic operations with entities without any knowledge where and how are their data stored. This functionality is provided by mappers. Mappers define an interface for accessing data storage (database, XML, etc.). For more information and usage see "Doctrine 2":http://www.doctrine-project.org/.

In our case, we will simplify this pattern by using Nette\Database, a clever tool for database access that provides us a way how achieve our goal faster.

We will create an abstract repository `Repository` and 3 additional repositories `UserRepository`, `TaskRepository` and `ListRepository` inherited from it. All repositories will be placed in a namespace `Todo`.

/---php
<?php
namespace Todo;
use Nette;

/**
 * Performs operations on a database table.
 */
abstract class Repository extends Nette\Object
{
	/** @var Nette\Database\Connection */
	protected $connection;

	public function __construct(Nette\Database\Connection $db)
	{
		$this->connection = $db;
	}

	/**
	 * Returns an object representing database table.
	 * @return Nette\Database\Table\Selection
	 */
	protected function getTable()
	{
		// we will get table name by derivation from the class name
		preg_match('#(\w+)Repository$#', get_class($this), $m);
		return $this->connection->table(lcfirst($m[1]));
	}

	/**
	 * Returns all database table rows.
	 * @return Nette\Database\Table\Selection
	 */
	public function findAll()
	{
		return $this->getTable();
	}

	/**
	 * Returns filtered rows, for example array('name' => 'John')
	 * @return Nette\Database\Table\Selection
	 */
	public function findBy(array $by)
	{
		return $this->getTable()->where($by);
	}

}

\---

.[note]
We recommend you to not use PHP ending `?>`. It is not required and not using it will prevent you from unwanted errors caused by additional white spaces in the end of the file.

And the following files `app/model/UserRepository.php`:

/---php
<?php
namespace Todo;
use Nette;

/**
 * Table user
 */
class UserRepository extends Repository
{
}
\---

`app/model/ListRepository.php`:

/---php
<?php
namespace Todo;
use Nette;

/**
 * Table list
 */
class ListRepository extends Repository
{
}
\---

and `app/model/TaskRepository.php`:

/---php
<?php

namespace Todo;
use Nette;

/**
 * Table task
 */
class TaskRepository extends Repository
{
}
\---


And that's all. We have prepared a skeleton of our database model.



Services
======

Back to the configuration file. Section `services` (placed inside a `nette` block) defines special services, see "Dependency Injection":http://doc.nette.org/en/dependency-injection. As default (from the sandbox), there is only one service - `authenticator`, which handles login and password validation. We will use it later.

/---neon
	services:
		authenticator: Authenticator

\---

We will register our repositories here, each one as a separated service:

/---neon
	services:
		authenticator: Authenticator

		taskRepository: Todo\TaskRepository
		userRepository: Todo\UserRepository
		listRepository: Todo\ListRepository
\---

Now, we have 3 more services: `taskRepository`, that contains an instance of `Todo\TaskRepository`, `userRepository`, that contains an instance of `Todo\UserRepository`, `listRepository`, that contains an instance of `Todo\ListRepository`.

Each of this classes requires one parameter in their constructor - an instance of `Nette\Database\Connection` to provide a connection with the database. Because there is only once instance of this class in our application, there is no need to specify, which one will be used. Nette will add the propper one by using "auto-wiring":http://doc.nette.org/en/configuring#toc-auto-wiring.


To specify the instance explicitly, use the following syntax:

/---neon
	services:
		authenticator: Authenticator(@nette.database.default)

		taskRepository: Todo\TaskRepository(@nette.database.default)
		userRepository: Todo\UserRepository(@nette.database.default)
		listRepository: Todo\ListRepository(@nette.database.default)
\---

Now, it's time to change the definition of our authenticator. We want to add the authenticator to Todo namespace and change its required parameter from an instance of `Nette\Database\Connection` to our userRepository service instead. To do so, we have to add namespace statement and change the parametr type in the constructor in `app/model/Authenticator.php`:

/--php
namespace Todo;
//...
class Authenticator extends Nette\Object implements Security\IAuthenticator
{
	/** var UserRepository */
	private $users;

	public function __construct(UserRepository $users)
	{
		$this->users = $users;
	}
//...
}
\--

And slightly modify `app/confing/config.neon` file:

/--
	services:
		authenticator: Todo\Authenticator
\--

The rest remains the same.

We have successfully created several simple repositories, which will be handy in the next chapter - presenters...

Source codes are available on "GitHub":https://github.com/nette/quickstart/tree/2.
