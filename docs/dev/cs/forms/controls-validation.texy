Formulářové prvky a jejich validace
*******************


Formulářové prvky
=================

Přehled standardních formulářových prvků.


addText($name, $label = NULL, $cols = NULL, $maxLength = NULL) .{toc: addText()}
------------------------------------------------------------------

Přidá jednořádkové textové políčko (třída [TextInput |api:Nette\Forms\Controls\TextInput]). Automaticky ořezává levo- a pravostranné mezery nebo případné odřádkování. Kromě [standardních validačních pravidel | #Validace] lze použít navíc i tato:

| `Form::MIN_LENGTH` | minimální délka
| `Form::MAX_LENGTH` | maximální délka
| `Form::LENGTH` | právě tato délka
| `Form::EMAIL` | je hodnota platná e-mailová adresa?
| `Form::URL` | je hodnota absolutní URL?
| `Form::PATTERN` | test oproti regulárnímu výrazu
| `Form::INTEGER` | je hodnota celočíselná?
| `Form::FLOAT` | je hodnota číslo?
| `Form::RANGE` | je hodnota v daném rozsahu?

/--php
$form->addText('zip', 'PSČ:')
	->addRule(Form::PATTERN, 'PSČ musí mít 5 číslic', '([0-9]\s*){5}');
\--


addPassword($name, $label = NULL, $cols = NULL, $maxLength = NULL) .{toc: addPassword()}
--------------------------------------------------------------------------

Přidá políčko pro zadání hesla (třída [TextInput |api:Nette\Forms\Controls\TextInput]). Automaticky ořezává levo- a pravostranné mezery nebo případné odřádkování. Při znovu-zobrazení formuláře bude políčko prázdné. Lze použít stejná validační pravidla jako pro [addText |#addText()].

/--php
$form->addPassword('password', 'Heslo:')
	->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3);
	->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9].*');
\--


addTextArea($name, $label = NULL) .{toc: addTextArea()}
-------------------------------------------------------

Přidá pole pro zadání víceřádkového textu (třída [TextArea |api:Nette\Forms\Controls\TextArea]). Lze použít stejná validační pravidla jako pro [addText |#addText()]. Na rozdíl od jednořádkového vstupního políčka k žádnému ořezávání mezer nedochází.

/--php
$form->addTextArea('note', 'Poznámka:')
	->addRule(Form::MAX_LENGTH, 'Poznámka je příliš dlouhá', 10000);
\--

/--comment

	addEmail($name, $label = NULL) .{toc: addEmail()}
	-------------------------------------------------

	Přidá políčko pro zadání e-mailové adresy s kontrolou její platnosti (třída [TextInput |api:Nette\Forms\Controls\TextInput]). Lze použít stejná validační pravidla jako pro [addText |#addText()].

	/--php
	$form->addEmail('email', 'E-mail:');
	\--
\--


addUpload($name, $label = NULL) .{toc: addUpload()}
-----------------------------------------------

Přidá políčko pro upload souboru (třída [UploadControl |api:Nette\Forms\Controls\UploadControl]). Kromě [standardních validačních pravidel | #Validace] lze použít navíc i tato:

| `Form::MAX_FILE_SIZE` | ověřuje maximální velikost souboru
| `Form::MIME_TYPE` | ověření MIME type
| `Form::IMAGE` | ověření, že jde o obrázek JPEG, PNG nebo GIF

/--php
$form->addUpload('avatar', 'Avatar:')
	->addRule(Form::IMAGE, 'Avatar musí být JPEG, PNG nebo GIF.')
        ->addRule(Form::MAX_FILE_SIZE, 'Maximální velikost souboru je 64 kB.', 64 * 1024 /* v bytech */);
\--


addHidden($name, $default = NULL) .{toc: addHidden()}
-----------------------------------------------------

Přidá skryté pole (třída [HiddenField |api:Nette\Forms\Controls\HiddenField]).

/--php
$form->addHidden('userid');
\--

.[note]
Týká se třídy [api:Nette\Application\UI\Form] využívané v presenterech (MVC).



addCheckbox($name, $caption = NULL) .{toc: addCheckbox()}
---------------------------------------------------------

Přidá zaškrtávací políčko (třída [Checkbox |api:Nette\Forms\Controls\Checkbox]). Políčko vrací hodnotu buď TRUE nebo FALSE, podle toho, zda je zaškrtnuté či nikoliv.

[* checkbox-cs.png .[border] *]

/--php
$form->addCheckbox('agree', 'Souhlasím s podmínkami')
	->addRule(Form::EQUAL, 'Je potřeba souhlasit s podmínkami', TRUE);
\--


addRadioList($name, $label = NULL, array $items = NULL) .{toc: addRadioList()}
------------------------------------------------------------------------------

Přidá přepínací tlačítka (třída [RadioList |api:Nette\Forms\Controls\RadioList]). Pole nabízených hodnot předáme jako třetí parametr.

[* radiolist-cs.png *]

/--php
$sex = array(
	'm' => 'muž',
	'f' => 'žena',
);
$form->addRadioList('gender', 'Pohlaví:', $sex);

// pro vypsání možností do 1 řádku
$form->addRadioList('gender', 'Pohlaví:', $sex)
	->getSeparatorPrototype()->setName(NULL);
\--


addSelect($name, $label = NULL, array $items = NULL) .{toc: addSelect()}
------------------------------------------------------------------------

Přidá select box (třída [SelectBox |api:Nette\Forms\Controls\SelectBox]). U select boxů má často první položka speciální význam, slouží jako výzva k akci. K přidání takové položky slouží metoda `setPrompt()`. Pole nabízených hodnot předáme jako třetí parametr. Pole může být i dvourozměrné:

[* selectbox-cs.png *]

/--php
$countries = array(
	'Europe' => array(
		'CZ' => 'Česká Republika',
		'SK' => 'Slovensko',
		'GB' => 'Velká Británie',
	),
	'CA' => 'Kanada',
	'US' => 'USA',
	'?'  => 'jiná',
);
$form->addSelect('country', 'Země:', $countries)
	->setPrompt('Zvolte zemi');
\--


addMultiSelect($name, $label = NULL, array $items = NULL) .{toc: addMultiSelect()}
----------------------------------------------------------------------------------

Přidá select box pro výběr více položek (třída [MultiSelectBox |api:Nette\Forms\Controls\MultiSelectBox]).

/--php
$form->addMultiSelect('options', 'Možnosti:', $options);
\--


addSubmit($name, $caption = NULL) .{toc: addSubmit()}
-----------------------------------------------------

Přidá odesílací tlačítko (třída [SubmitButton |api:Nette\Forms\Controls\SubmitButton]).

/--php
$form->addSubmit('submit', 'Odeslat');
\--

Pokud stisknutí tlačítka nemá provádět validaci (vhodné pro tlačítka *Cancel* nebo *Preview*), vypneme ji metodou `setValidationScope(FALSE)`.


addButton($name, $caption) .{toc: addbutton()}
-----------------------------------------------------

Přidá tlačítko (třída [Button |api:Nette\Forms\Controls\Button]), které nemá odesílací funkci. Lze ho tedy využít na nějakou jinou funkci, např. zavolání js funkce při kliknutí.

/--php
$form->addButton('add', 'Zvýšit plat')
	->setAttribute("onclick()","raisePayment");
\--



addImage($name, $alt = NULL) .{toc: addImage()}
-----------------------------------------------

Přidá odesílací tlačítko v podobě obrázku (třída [ImageButton |api:Nette\Forms\Controls\ImageButton]).

/--php
$form->addImage('submit', '/path/to/image');
\--


addContainer($name) .{toc: addContainer()}
------------------------------------------

Přidá pod-formulář (třída [Container|api:Nette\Forms\Container]), do které lze přidávat další prvky stejným způsobem, jako je přidáváme do formuláře. Fungují i metody `setDefaults()` nebo `getValues()`.

/--php
$sub1 = $form->addContainer('first');
$sub1->addText('name', 'Your name:');
$sub1->addText('email', 'Email:');

$sub2 = $form->addContainer('second');
$sub2->addText('name', 'Your name:');
$sub2->addText('email', 'Email:');
\--


Validace
========

Na již zmíněné prvky lze použít tyto validační pravidla:

| `Form::FILLED` | je prvek vyplněn?
| `Form::EQUAL` | je hodnota rovna uvedené?
| `Form::IS_IN` | testuje, zda hodnota spadá do výčtu
| `Form::VALID` | je prvek vyplněn správně?

Všem validačním pravidlům můžeme přidat vlastní chybovou hlášku, nebo se použije [hláška výchozí |api:Nette\Forms\Rules::$defaultMessages]. U [vícejazyčných formulářů |#vícejazyčné formuláře] se hlášky automaticky překládají.

V textu chybových hlášek lze používat i speciální zástupné řetězce:

| %label | nahradí se textem popisky
| %name  | nahradí se identifikátorem prvku
| %value | nahradí se zadanou hodnou

Kromě pravidel lze přidávat také dotazovací podmínky. Ty se zapisují podobně jako pravidla, jen místo `addRule()` použijeme metodu `addCondition()` a pochopitelně neuvádíme žádnou chybovou zprávu (podmínka se jen ptá):

/--php
$form->addPassword('password', 'Heslo:')
	// pokud není heslo delší než 5 znaků
	->addCondition(Form::MAX_LENGTH, 5)
		// pak bude muset obsahovat číslici
		->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9].*');
\--

Podmínku je možné vázat i na jiný prvek, než ten aktuální. Stačí `addCondition()` nahradit za `addConditionOn()` a jako první parametr uvést odvolávku na jiný prvek. V tomto případě se bude e-mail vyžadovat tehdy, zaškrtne-li se checkbox (tj. jeho logická hodnota bude TRUE):

/--php
$form->addCheckbox('newsletters', 'zasílejte mi newslettery');

$form->addText('email', 'E-mail:')
	// pokud je checkbox zaškrtnut
	->addConditionOn($form['newsletters'], Form::EQUAL, TRUE)
		// pak vyžaduj e-mail
		->addRule(Form::FILLED, 'Zadejte e-mailovou adresu');
\--

Pravidla a podmínky je možné negovat znakem `~` (vlnovka), tj. `addRule(~Form::FILLED, ...)`. Také lze z podmínek vytvářet komplexní struktury za pomoci metod `elseCondition()` a `endCondition()`.

Jak vidíte, jazyk pro formulování podmínek a pravidel je velice silný. Všechny konstrukce přitom fungují jak na straně serveru, tak i na straně JavaScriptu.

Můžeme si také přidat vlastní validátory. Metody `addRule()` a `addCondition()` totiž jako název pravidla akceptují callback:

/--php
// uživatelský validátor: testuje, zda je hodnota dělitelná argumentem
function divisibilityValidator($item, $arg)
{
	return $item->value % $arg === 0;
}

$form->addText('number', 'Číslo:')
	->addRule('divisibilityValidator', 'Číslo musí být dělitelné %d.', 8);
\--


Validace celého formuláře
-------------------------
Dosud jsme mluvili pouze o validaci na úrovni jednotlivých políček. Můžete ale také potřebovat validovat formulář jako celek, např. kombinaci hodnot několika políček.

Takových validačních funkcí můžete definovat libovolné množství a k formuláři je navážete přes onValidate:

/--php
protected function createComponentSignInForm()
{
	$form = new SignInForm();
	...
	$form->onValidate[] = callback($this, 'validateSignInForm');
	return $form;
}

public function validateSignInForm($form)
{
	$values = $form->getValues();

	if (...) {	// validační podmínka
		$form->addError('Tato kombinace není možná.');
	}
}
\--


Vlastní chyby
-------------

V mnoha případech se o chybě dozvíme až ve chvíli, kdy zpracováváme platný formulář, například zapisujeme novou položku do databáze a narazíme na duplicitu klíčů. V takovém případě chybu zpětně předáme do formuláře metodou `addError()`. Tu lze volat buď na konkrétním prvku, nebo přímo na formuláři:

/--php
try {
	$values = $form->getValues();
	$this->user->login($values->username, $values->password);
	$this->redirect('Homepage:');

} catch (Nette\Security\AuthenticationException $e) {
	$form->addError($e->getMessage());
}
\--


JavaScript
----------

Validační pravidla se na stranu JavaScriptu přenášejí v HTML atributes `data-nette-rules`, které obsahují JavaScriptový objekt popisující jednotlivá pravidla nebo podmínky. Samotnou validaci pak provádí skript, který odchytí událost `submit`, projde jednotlivé prvky a vykoná příslušnou validaci. Výchozí implementací je soubor `netteForms.js`, který najdete v distribuci v adresáři `client-side/forms`. Stačí jej tedy do stránky zalinkovat přes `<script src="netteForms.js"></script>`.

Vlastní validační pravidla přidáme rozšířením objektu `Nette.validators`:

/--html
<script>
Nette.validators.divisibilityValidator = function(elem, args, val) {
	return val % args === 0;
};
</script>
\--



Rozšíření formulářových prvků
===

Formulářové prvky můžeme kromě podmínek a pravidel rozšířit o popisek, upravit `class` apod.

.[caution]
Pozor na pořadí podmínek, pravidel a užití těchto rozšíření.

Nastavení třídy nebo js:

/--php
$form->addText('number', 'Číslo:')
	->setAttribute('class', 'bigNumbers');

$form->addSelect('rank', 'Řazení dle:', array('ceny', 'názvu'))
	->setAttribute('onchange', 'submit()'); // při změně odeslat


// chceme-li to samé udělat pro celý $form
$form->getElementPrototype()->id("myForm");
$form->getElementPrototype()->target("_top");
$form->getElementPrototype()->class("tinyForm");


// nebo pouze pro label
$form->addText('name', 'Název')
	->getLabelPrototype()->class('labelBig');
\--


Nastavení typu (např. pro HTML5):

/--php
$form->addText('email', 'Váš email:')
	->setAttribute('type', 'email')
	->setAttribute('placeholder', 'napište email');
\--

Nastavení popisku (defaultně se vypisuje za polem):

/--php
$form->addText('phone', 'Číslo:')
	->setOption('description', 'Toto číslo zůstane skryté');
\--

Pokud chceme umístit HTML obsah, využijeme třídy [Html | doc:/cs/html-elements ]

/--php
use Nette\Utils\Html;

$form->addText('phone', 'Číslo:')
	->setOption('description', Html::el("p")
		->setHtml("Toto číslo zůstane skryté. <a href='...'>Podmínky uchovávání Vašeho čísla</a>")
	);
\--

.[tip]
Html prvek lze využít i místo labelu, `$form->addCheckbox('conditions', $readConditions);`
