Formuláře samostatně
**********

/--div .[perex]
Třída [Nette\Forms\Form |api:Nette\Forms\Form] je ideální pro využití Nette v rozdělaných projektech nebo na malé projektíky. Stačí připojit `nette.min.php` a můžete ihned vytvářet luxusní formuláře snadno a rychle.
\---

.[caution]
Tato třída a její využití se v mnoha ohledech podobá (a liší) třídě pro `Nette\Application\UI\Form` [MCV a presentery |dev:cs:forms:mvc]. Pokud vám zde bude něco chybět, můžete nakouknout tam.

Pojďmě se tedy podívat, jak lze třídu `Nette\Forms\Form` pěkně použít.


Vytvoření formuláře
===

Vytvoříme si jednoduchý registrační formulář:

/--php
require 'nette.min.php';

use Nette\Forms\Form;

$form = new Form;
$form->addText('name', 'Jméno:');
$form->addPassword('password', 'Heslo:');
$form->addSubmit('send', 'Registrovat');

echo $form; // vykreslí formulář
\--

.[caution]
**Upozornění:** skripty musí být uloženy v UTF-8.


V prohlížeči se vykreslí takto:

[* form-cs.png *]


.[tip]
O ostatních prvcích i jejich **validaci** se dočtete v části [Formulářové prvky jejich validace |dev:cs:forms:controls-validation].



Metoda GET
---
Vytvořili jsme formulář, který se metodou POST odešle na stejnou stránku, na jaké se nachází, což lze případně snadno změnit. Takto bychom mohli formulář odeslat kupříkladu metodou GET na adresu `/submit.php`

/--php
$form = new Form;
$form->setAction('/submit.php');
$form->setMethod('GET');
// ...
\--


U každé metody `add`*Prvek*`()` představuje první parametr identifikátor prvku. K jednotlivým prvkům formuláře `$form` lze poté přistupovat pomocí hranatých závorek, podobně jako k prvkům pole.

/--php
$form['name'] // objekt `Nette\Forms\Controls\TextInput`, první políčko formuláře
\--

Vykreslený formulář splňuje základní pravidlo přístupnosti - všechny popisky jsou zapsány jako `<label>` a provázané s příslušným formulářovým prvkem. Při kliknutí na popisku se kurzor automaticky objeví ve formulářovém políčku.


Zpracování formuláře
===

Teď formulář oživíme. Dotazem na `$form->isSuccess()` zjistíme, zda byl formulář odeslán a zda byl vyplněn korektně. Pokud bude formulář správně vyplněn, data vypíšeme do okna prohlížeče. Za definici formuláře tedy vložíme kód:

/--php
if ($form->isSuccess()) {
	echo 'Formulář byl správně vyplněn a odeslán';

	$values = $form->getValues();
	dump($values);
}
\--

.[tip]
Po odeslání a zpracování formuláře je vhodné přesměrovat na další stránku. Zabrání se tak nechtěnému opětovnému odeslání formuláře tlačítkem Obnovit nebo Zpět.


Data získaná metodou `getValues()` neobsahují hodnoty formulářových tlačítek, tak je lze obvykle rovnou použít pro další zpracování (například vložení do databáze). Zároveň si můžete všimnout, že z textových políček jsou automaticky odstraněny levo- i pravostranné mezery. Schválně si zkuste do políčka napsat své jméno a za něj několik mezer - po odeslání budou mezery ořezané.

Zmínili jsme se o validaci, ale formulář zatím žádná validační pravidla nemá. Pojďme to napravit. Jméno bude povinné, proto je označíme metodou `setRequired()`, jejíž volitelný argument je text chybové hlášky, která se zobrazí, pokud uživatel jméno nevyplní:

/--php
$form->addText('name', 'Jméno:')
	->setRequired('Zadejte prosím jméno');
\--

Zkuste si odeslat formulář bez vyplněného jména a uvidíte, že se zobrazí chybová hláška a server vám jej bude nabízet do té doby, dokud jej nevyplníte v souladu s validačními pravidly. Zbývá ještě zprovoznit validaci na straně JavaScriptu, což je nesmírně jednoduché - stačí zalinkovat soubor `netteForms.js`, který najdete v distribuci v adresáři `client-side/forms`. Zkopírujeme jej do složky s formulářem a přidejte kód:

/--html
<script src="netteForms.js"></script>
\--


Nette Framework povinným prvkům nastaví CSS třídu `required`. Zkusme přidat stylopis

/--html
<style>
.required label { color: maroon }
</style>
\--

a popiska „Jméno“ bude červená.


Označením povinných prvků validování pochopitelně nekončí. Přidáme další validační pravidla metodou `addRule()`, jejíž první argument říká, co chceme ověřovat, a druhý argument je opět text hlášky, která se zobrazí, pokud hodnota validací neprojde. Můžeme si vytvářet i vlastní validační pravidla, zatím si však vystačíme s předdefinovanými.

Formulář rozšíříme o nové políčko „věk“ s podmínkou, že musí být číslo (`Form::INTEGER`) a navíc v povoleném rozsahu (`Form::RANGE`). Zde využijeme třetí parametr metody `addRule()`, kterým předáme validátoru požadovaný rozsah:

/--php
$form->addText('age', 'Věk:')
	->addRule(Form::INTEGER, 'Věk musí být číslo')
	->addRule(Form::RANGE, 'Věk musí být od 18 do 120', array(18, 120));
\--

Zde vzniká prostor pro drobný refactoring. V chybové hlášce a ve třetím parametru jsou čísla uvedená duplicitně, což není ideální. Pokud bychom tvořili [#vícejazyčné formuláře] a hláška obsahující čísla by se musela přeložit do více jazyků, ztížila by se pozdější změna hodnot. Z toho důvodu je možné použít zástupné znaky v [tomto formátu | php:sprintf]:

/--php
	->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120));
\--

.[tip]
Více se dozvíte v samostatné sekci [Formulářové prvky a jejich validace |dev:cs:forms:controls-validation].


Pokud by formulář nesloužil k registraci nových uživatelů, ale pro editaci záznamů, hodilo by se na začátku nastavit prvkům [#výchozí hodnoty].

Tímto máme hotový plně funkční formulář, který disponuje validací na straně klienta (tj. javascriptovou validací) i validací na straně serveru. Automaticky ošetřuje *magic quotes*, ověřuje, zda útočník neposílá nevalidní UTF-8 řetězce apod. Na tyto věci už nemusíme myslet.

Příklady si můžete [stáhnout |attachment:form-example-cs.php]. Zkuste si do něj přidat i další [formulářové prvky |dev:cs:forms:controls-validation]. Inspiraci najdete také v distribuci v adresáři `examples/Forms`.


Výchozí hodnoty
===

Výchozí hodnoty nastavujeme stejně jako u [formulářů v presenterech |dev:cs:forms:mvc#Výchozí hodnoty].



Vykreslení formuláře
===

...neboli render je obdobný jako u `Nette\Application\Forms\UI`. Více o něm na stránce [Vykreslování formulářů |dev:cs:forms:render].




{{themeicon: icon-form.png}}
