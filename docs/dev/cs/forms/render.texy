Vykreslování formulářů
******

Vzhled formulářů může být velmi různorodý. V praxi můžeme narazit na dva extrémy. Na jedné straně stojí potřeba v aplikaci vykreslovat řadu formulářů, které jsou si vizuálně podobné jako vejce vejci, a oceníme snadné vykreslení pomocí `echo $form`. Jde obvykle o případ administračních rozhraní.

Na druhé straně tu jsou rozmanité formuláře, kde platí: co kus, to originál. Jejich podobu nejlépe popíšeme jazykem HTML. A samozřejmě kromě obou zmíněných extrémů narazíme na spoustu formulářů, které se pohybují někde mezi.


Výchozí DefaultFormRenderer
===

Automatické vykreslení formuláře obstarává tzv. renderer. Ten lze nastavit metodou `setRenderer`. Předá se mu řízení při zavolání metody `$form->render()` nebo `echo $form`. Pokud nenastavíme vlastní renderer, bude použit výchozí vykreslovač [api:Nette\Forms\Rendering\DefaultFormRenderer]. Stačí tedy napsat:


/--php
// Nette\Application\UI\Form
{control form}
\--

nebo

/--php
// Nette\Forms\Form
echo $form;
\--


a formulář je na světě. Prvky formuláře se vykreslí do HTML tabulky. Výstup vypadá takto:

/--html
<table>
<tr class="required">
	<th><label class="required" for="frm-name">Jméno:</label></th>

	<td><input type="text" class="text" name="name" id="frm-name" value="" /></td>
</tr>

<tr class="required">
	<th><label class="required" for="frm-age">Věk:</label></th>

	<td><input type="text" class="text" name="age" id="frm-age" value="" /></td>
</tr>

<tr>
	<th><label>Pohlaví:</label></th>
	...
\--

*Hezky naformátované, viďte? :-)*

Zda použít nebo nepoužít pro kostru formuláře tabulku je sporné a řada webdesignerů preferuje jiný markup. Například definiční seznam. Překonfigurujeme `DefaultFormRenderer` tak, aby formulář v podobě seznamu vykreslil. Konfigurace se provádí editací pole [$wrappers | api:Nette\Forms\Rendering\DefaultFormRenderer::$wrappers]. První index vždy představuje oblast a druhý její atribut. Jednotlivé oblasti znázorňuje obrázek:

[* defaultformrenderer.gif *]

Standardně je skupina prvků `controls` obalena tabulkou `<table>`, každý `pair` představuje řádek tabulky `<tr>` a dvojice `label` a `control` jsou buňky `<th>` a `<td>`. Nyní obalující elementy změníme. Oblast `controls` vložíme do kontejneru `<dl>`, oblast `pair` necháme bez kontejneru, `label` vložíme do `<dt>` a nakonec `control` obalíme značkami `<dd>`:

/--php
$renderer = $form->getRenderer();
$renderer->wrappers['controls']['container'] = 'dl';
$renderer->wrappers['pair']['container'] = NULL;
$renderer->wrappers['label']['container'] = 'dt';
$renderer->wrappers['control']['container'] = 'dd';

\--

a výsledkem je tento HTML kód:

/--html
<dl>
	<dt><label class="required" for="frm-name">Jméno:</label></dt>

	<dd><input type="text" class="text" name="name" id="frm-name" value="" /></dd>


	<dt><label class="required" for="frm-age">Věk:</label></dt>

	<dd><input type="text" class="text" name="age" id="frm-age" value="" /></dd>


	<dt><label>Pohlaví:</label></dt>
	...
</dl>
\--

V poli wrappers lze ovlivnit celou řadu dalších atributů:

- přidávat CSS třídy jednotlivým typům formulářových prvků
- rozlišovat CSS třídou liché a sudé řádky
- vizuálně odlišit povinné a volitelné položky
- určovat, zda se chybové zprávy zobrazí přímo u prvků nebo nad formulářem



Manuální vykreslování
===

DefaultFormRenderer nám umožňuje bleskově renderovat formuláře se standardním vzhledem. Jak ale vykreslit formulář, který lze jen těžko postihnout polem `$wrappers` nebo vlastním rendererem? Asi nejpragmatičtější řešení je takový formulář popsat přímo HTML šablonou.

Jak už víte, jednotlivé prvky formuláře lze adresovat podobně jako prvky pole (tj. třeba `$form['name']`). Co možná nevíte, tak že každý prvek disponuje metodami `getLabel()` a `getControl()`, které vracejí HTML kód popisky a samotného prvku. Nette Framework dovoluje ke *getterům* přistupovat podobně, [jako by to byly proměnné |php-language-enhancements#Properties, gettery a settery], takže stačí psát jen `label` a `control`. Dejme tyto informace dohromady a máme tu manuální renderování:



Nette\Application\UI\Forms
---

Díky využití `{form}` maker je vykreslení formuláře hračka.

/--html
{form myForm}

<!-- Jednoduché vykreslení chyb -->
<ul class="errors" n:if="$form->hasErrors()">
        <li n:foreach="$form->errors as $error">{$error}</li>
</ul>

<table>
	<tr class="required">
		<th>{label name /}</th>
		<td>{input name}</td>
	</tr>

	<tr class="required">
		<th>{label age /}</th>
		<td>{input age}</td>
	</tr>

	...

</table>
{/form}
\--

V tuto chvíli jste naprostým pánem vygenerovaného kódu. Formulář si vykreslíte přesně na míru.


Jak nastavit HTML elementům další atributy? Metody `getControl()` a `getLabel()` vrací element v podobě Nette\Utils\Html objektu, se kterým se dá [snadno pracovat |html-elements]. Takto například v Latte:

/--html
{form signForm class => 'big'}
<table>
<tr class="required">
	<th>{label name /}</th>
	<td>{input name cols => 40, autofocus => TRUE}</td>
</tr>
\--

Dokonce je možné jen "oživit" prvky napsané čistě v HTML pomocí makra `n:input`, které ho sváže s formulářovým prvek uvedením jeho identifikátoru:

/--html
<table>
<tr class="required">
	<th><label for="#frm-name"></th>
	<td><input cols=40 n:input="name"></td>
</tr>
\--



Nette\Forms\Forms
---

V tomto případě nemáme k dispozici Latte, proto bude výpis o něco pracnější.

/--html
<?php $form->render('begin') ?>
<?php $form->render('errors') ?>

<table>
	<tr class="required">
		<th><?php echo $form['name']->label ?></th>
		<td><?php echo $form['name']->control ?></td>
	</tr>

	<tr class="required">
		<th><?php echo $form['age']->label ?></th>
		<td><?php echo $form['age']->control ?></td>
	</tr>

	...

</table>

<?php $form->render('end') ?>
\--


Skupiny
=======
Formulářové prvky lze seskupovat i čistě vizuální cestou (tedy ne pomocí kontejneru). Slouží k tomu skupiny a metoda [addGroup($name) | api:Nette\Forms\Form::addGroup()]. Jedná se o Nette ekvivalent k `<fieldset>` a `<legend>`, který bude obsahovat data z parametru `$name`. Jejich chování se od prvků značně liší:
- přidávají se na formulář
- nijak neovlivňují strukturu dat
- jsou vykreslovány v pořadí v jakém byly přidány
- pokud existuje alespoň jedna skupina, prvky bez skupiny se vykreslují až po vykreslení skupin
K práci se skupinami se používají tyto metody:
- [addGroup | http://api.nette.org/2.0/Nette.Forms.ControlGroup.html#_add]: slouží k přidání nové a otevření skupiny
- [setCurrentGroup | http://api.nette.org/2.0/Nette.Forms.Container.html#_setCurrentGroup]: otevře již existující skupinu
- [removeGroup | http://api.nette.org/2.0/Nette.Forms.Form.html#_removeGroup]: odstraní skupinu
/--php
$form->addGroup('Osobní info');//následující prvky spadají do této skupiny
$form->addText('name', 'Jméno a příjmení');
$form->addText('email', 'E-mail');
$form->setCurrentGroup(NULL); //následující prvky nejsou v žádné skupině
$form->addSelect('question', 'Máte rádi psy?', array(
    'yes' => 'Ano',
    'no' => 'Na talíři',
));
\--


Seskupování prvků
===

Prvky lze seskupovat do vizuálních skupin (fieldsetů) vytvořením skupiny:

/--php
$form->addGroup('Personal data');
\--

Po vytvoření nové skupiny se tato stává aktivní a každý nově přidaný prvek je zároveň přidán i do ní. Takže formulář lze stavět tímto způsobem:

/--php
$form = new Form;
$form->addGroup('Personal data');
$form->addText('name', 'Your name:');
$form->addText('age', 'Your age:');
$form->addText('email', 'Email:');

$form->addGroup('Shipping address');
$form->addCheckbox('send', 'Ship to address');
$form->addText('street', 'Street:', 35);
$form->addText('city', 'City:', 35);
$form->addSelect('country', 'Country:', $countries);
\--




Dynamický obsah formulářů pomocí toggle
====

Jsou sitace, kdy na základě určité volby nabídneme uživateli odlišné nabídky. Např. pokud je fyzická osoba, musím vyplnit pouze adresu, pokud je ale právnická, musí vyplnit i sídlo firmy, IČ, DIČ apod. Přesně k tomu slouží metoda `toggle`.

Jak už název napovídá, skrývá a zobrazuje prvky formuláře, nebo stránky. Je rozšířením validačních pravidel a proto je pro fungování nezbytné, aby ve stránce byl připojen script `netteForms.js`.  Prvky automaticky po načtení stránky podle potřeby schová, nebo zobrazí javascriptem, na základě hodnot formuláře a definovaných pravidel.

Nejčastěji je aplikován na skupinu ([$form->addGroup() | api:Nette\Forms\Form::addGroup()]). Jako argument se předává `#id` elementu stránky, se kterým má pracovat.

/--php
$subjects = array(
	1 => "Právnická Osoba",
	2 => "Fyzická osoba"
);

$form->addGroup(); // nutné, jinak by se ostatní skupiny zobrazili nad touto
$form->addRadioList("subject", "Jsem", $subjects)
	->addCondition(Form::EQUAL, 1)
		->toggle("PO") // zobrazíme skupinu s id "PO"
	->elseCondition()
		->toggle("FO"); // zobrazíme skupinu s id "FO"

$form->addGroup()->setOption('container', Html::el('fieldset')->id("PO"));
$form->addText("ico", "IČO");

$form->addGroup()->setOption('container', Html::el('fieldset')->id("FO"));
$form->addText("rn", "Rodné číslo");
\--

.[tip]
Jelikož je toggle js funkce, která je aktivována při načtení stránky, schovaný obsah vždy problikne, což není moc pěkné. Řešením je přidání `display:none` pro danou skupinu, což můžeme přidat buď ručním renderováním, nebo přímo na skupinu při vytváření formuláře:
/--php
$form->addGroup()->setOption('container', Html::el('fieldset')->id("PO")->style("display:none"));
\--


Pokud uživatel zvolí, že je fyzická osoba, budeme po něm vyžadovat rodné číslo a naopak. Bylo by matoucí, kdyby měl vyplňovat rodné číslo a input by na stránce nebyl. Podmíníme proto validační pravidla výběrem typu osoby.

/--php
$form->addText("rn", "Rodné číslo:")
	->addConditionOn($form["subject"], Form::EQUAL, 2) // zvolena FO
	->addRule(Form::FILLED, "Vyplňte rodné číslo");
\--

"Vnořený" toggle
------

Tedy pokud chceme v již vybrané skupině rozlišit mezi dalšími 2 skupinami.

Doručovací adresa je součástí skupiny "PO"
/--php
$form->addText("street");
// ...
\--

Ve výchozím stavu je další adresa schovaná, protože předpokládáme, že je stejná

/--php
$form->addCheckbox("invoiceSame")
	->setDefaultValue("on")
	->addCondition(Form::EQUAL, 0)
	->toggle("invoiceAddress"); // pro funkčnost musíme přidat i původní skupinu

$form->addGroup()->setOption('container', Html::el('fieldset')->id("invoiceAddress"));
$form->addText("streetInvoice");
// ...
\--

.[tip]
Pro adresu je výhodnější použít [samostatný container | doc:Forms#addContainer()].


"Sdílený" toggle
------

Pokud máme 2 možnosti, které něco sdílí, můžeme vytvořit třetí skupinu a tu zobrazovat pro obě volby. Využití najdete v případě, kdy máte na počátku ještě 3. možnost, která tuto třetí skupinu nepotřebuje.
/--php
$subjects = array(
	1 => "PO",
	2 => "FO"
);

$form->addRadioList("subject", "Jsem:", $subjects)
	->addCondition(Form::EQUAL,1)
		->toggle("PO")
	->endCondition() // ukončení podmíny
	->addCondition(Form::EQUAL,2)
		->toggle("FO")
	->endCondition() // ukončení podmíny
	->addCondition(Form::IS_IN,array(1,2)) // tímto zobrazíme adresu pro obě skupiny
		->toggle("address");

\--

Ruční vykreslení toggle
---

`Toggle` pracuje s id v css, stačí tedy příslušnému bloku nastavit jeho hodnotu. Využijeme výše uvedeného formuláře.

.[tip]
Vhodné je daný box schovat pomocí css na prvku (jiný zápis není možný, jelikož `js` pracuje právě s `display` na prvku), aby nedošlo při načítání stránky k probliknutí při jeho schování js.

/--html
{form toggleForm}
	<div>
		{label subject /}</td><td>{input subject}</td>
	</div>
	<div id="PO" style="display:none">
		<!-- zde vykreslíme prvky pro PO -->
	</div>
	<div id="FO" style="display:none">
		<!-- zde vykreslíme prvky pro FO -->
	</div>
{/form}
\--





{{themeicon: form.png}}
