Formuláře
**********

/--div .[perex]
Třída Form výrazně usnadňuje vytváření a zpracování webových formulářů ve vašich aplikacích. Co všechno umí?

- validovat odeslaná data na straně serveru i JavaScriptem
- poskytují zabezpečení proti zranitelnostem
- zvládají několik režimů vykreslování
- vícejazyčnost
\--

K čemu vůbec nasazovat framework na jednoduchý formulář? Vyhneme se tak celé řadě rutinních úkolů, jako je třeba psaní dvojí validace (na straně serveru a JavaScriptu), minimalizujeme pravděpodobnost vzniku chyb a bezpečnostních děr.

Nette Framework klade velký důraz na bezpečnost aplikací a proto úzkostlivě dbá i na dobré zabezpečení formulářů. Dělá to zcela transparentně a nevyžaduje manuálně nic nastavovat. Ochrání vaše aplikace před útokem [Cross Site Scripting (XSS) |vulnerability-protection#toc-cross-site-scripting-xss] i [Cross-Site Request Forgery (CSRF)| #Obrana před Cross-Site Request Forgery (CSRF)], odfiltruje ze vstupů kontrolní znaky, ověří validitu UTF-8 kódování nebo jestli nejsou položky vybrané v select boxech podvržené atd. To zní zajímavě, pojďme to vyzkoušet!


.[caution]
**Pozor!** Ve skutečnosti jde o dvě různé třídy.


Různé třídy pro různá prostředí
===

- První, [Nette\Application\UI\Form |api:Nette\Application\UI\Form], o které je tato pasáž, je určena pro využití v [MVC aplikacích a presenterech |doc:cs:presenters].
- Možná ale s Nette začínáte, nebo potřebujete z jiného důvodu vytvořit *jeden jednoduchý formulář bez využití plné síly Nette* - přesně na to je určena třída [Nette\Forms\Form |api:Nette\Forms\Form], kterou můžete využít po přilinkování Nette *ihned a kdekoliv*. Více o té se dozvíte v části **[Formuláře samostatně|dev:cs:forms:standalone]** (bez presenterů).


Vytvoření formuláře
==============

Nejdříve vytvoříme formulář pomocí [továrničky |presenters#toc-tovarnicky-na-komponenty].

/--php

use Nette\Application\IU\Form;

class HomepagePresenter extends Nette\Application\UI\Presenter {

	protected function createComponentMyForm()
	{
		$form = new Form;

		$form->addText('name', 'Jméno:');
		$form->addPassword('password', 'Heslo:');
		$form->addSubmit('send', 'Registrovat');

		// funkce, která formulář zpracuje, o té později
		$form->onSuccess[] = callback($this, 'processMyForm');

		return $form;
	}
}
\--

V šabloně jej vykreslíme jako jakoukoliv jinou komponentu...

/--html
{control myForm}
\--

...a výsledek v prohlížeči:

[* form-cs.png *]


.[tip]
S vykreslováním si můžeme všemožně vyhrát, použít ruční render, {form} makra a další, viz [Vykreslování formulářů |dev:cs:forms:render].


Metoda GET
---

Vytvořili jsme formulář, který se odešle metodou POST. Co kdybychom ale chtěli odeslat filtrovací fomulář s podporou stránkování, kdy je vhodné využít GET?

/--php
protected function createComponentFilterForm()
{
	$form = new Form;
	$form->setMethod('GET');
	$form->addHidden("do","filterForm"); // obdoba callbacku u POST
}

public function handleFilterForm(Form $form)
{
	// ...
}
\--


Formulářové prvky
---

U každé metody `add`*Prvek*`()` představuje první parametr identifikátor prvku.
/--php
$form->addText('name', 'Jméno');
\--

K jednotlivým prvkům formuláře `$form` lze poté přistupovat pomocí hranatých závorek, podobně jako k prvkům pole.
/--php
$form['name']; // objekt `Nette\Forms\Controls\TextInput`, první prvek formuláře
\--

Vykreslený formulář splňuje základní pravidlo přístupnosti - všechny popisky jsou zapsány jako `<label>` a provázané s příslušným formulářovým prvkem. Při kliknutí na popisku se kurzor automaticky objeví ve formulářovém políčku.


.[tip]
Prvků, které můžeme přidat, je nepřeberné množství. Její výčet naleznete v sekci [Formulářové prvky a jejich validace|dev:cs:forms:controls-validation].


Zpracování formuláře
===

Formulář máme postavený, vykreslený a odeslaný, teď už ho jen zpracovat. Funkci, která formulář zpracuje, určíme callbackem při jeho vytváření, viz. `$form->onSuccess[] = callback($this, 'processMyForm');`.


Pokud má formulář více než jedno tlačítko, mezi kterými chceme rozlišovat, je vhodnější nastavit handler na událost `onClick` tlačítka. Ten se volá před handlerem události `onSuccess`:

/--php
$form->addSubmit('login', 'Přihlásit se')
	->onClick[] = callback($this, 'signInFormSubmitted');
\--

Když se formulář odešle tlačítkem *enter*, za odesílací tlačítko se považuje to první.

Handlery událostí `onSuccess` a `onClick` se volají **pouze v případě, že je odeslání validní**. Uvnitř obslužných metod tedy nemusíme validitu ověřovat. Formulář má ještě událost `onSubmit`, která se volá vždy nezávisle na validitě.

.[tip]
Po odeslání a zpracování formuláře je vhodné přesměrovat na další stránku. Zabrání se tak nechtěnému opětovnému odeslání formuláře tlačítkem Obnovit nebo Zpět.

Takto může vypadat funkce pro zpracování:

/--php
public function processMyForm(Form $form)
{
	if($form->isSuccess()) { // je formulář správně vyplněný?
		$values = $form->getValues(); // získáme hodnoty formuláře

		// samotné zpracování hodnot - uložení do databáze, odeslání...

		$this->flashMessage("Formulář byl úspěšně odeslán.")
		$this->redirect("this");
	}
	else {
		$this->flashMessage("Formulář není správně vyplněn.");
	}
}
\--


Získání hodnot formuláře
---

Data získaná metodou [getValues() |api:Nette\Forms\Form::getValues()] neobsahují hodnoty formulářových tlačítek, tak je lze obvykle rovnou použít pro další zpracování (například vložení do databáze). Zároveň si můžete všimnout, že z textových políček jsou automaticky odstraněny levo- i pravostranné mezery. Schválně si zkuste do políčka napsat své jméno a za něj několik mezer - po odeslání budou mezery ořezané.

Tento způsob vrací objekt typu [ArrayHash | api:Nette\ArrayHash]. Hodnoty lze **získat i v poli**.

/--php
$values = $form->getValues(TRUE);
\--

Pokud prvek ve formuláři je, ale jeho hodnotu pomocí výše uvedného způsobu nelze získat (typicky hodnota `selectu` při použití ajax snippetu), lze využít metodu [getHttpData() | api:Nette\Forms\Form::getHttpData()] vracející taktéž pole.

/--php
$values = $form->getHttpData();
\--


Validace
===

Zmínili jsme se o validaci, ale formulář zatím žádná validační pravidla nemá. Pojďme to napravit. Jméno bude povinné, proto je označíme metodou `setRequired()`, jejíž volitelný argument je text chybové hlášky, která se zobrazí, pokud uživatel jméno nevyplní:

/--php
$form->addText('name', 'Jméno:')
	->setRequired('Zadejte, prosím, jméno');
\--

Zkuste si odeslat formulář bez vyplněného jména a uvidíte, že se zobrazí chybová hláška a server vám jej bude nabízet do té doby, dokud jej nevyplníte v souladu s validačními pravidly. Zbývá ještě zprovoznit validaci na straně JavaScriptu, což je nesmírně jednoduché - stačí zalinkovat soubor `netteForms.js`, který najdete v distribuci v adresáři `client-side/forms`. Zkopírujeme jej do složky `www/js` a do hlavičky přidáme tento kód:

/--html
<script src="{$basePath}/js/netteForms.js"></script>
\--

Nette Framework povinným prvkům nastaví CSS třídu `required`. Zkusme přidat stylopis

/--html
<style>
.required label { color: maroon }
</style>
\--

a popiska „Jméno“ bude červená.


Označením povinných prvků validování pochopitelně nekončí. Přidáme další validační pravidla metodou `addRule()`, jejíž první argument říká, co chceme ověřovat, a druhý argument je opět text hlášky, která se zobrazí, pokud hodnota validací neprojde. Můžeme si vytvářet i vlastní validační pravidla, zatím si však vystačíme s předdefinovanými.

Formulář rozšíříme o nové políčko „věk“ s podmínkou, že musí být číslo (`Form::INTEGER`) a navíc v povoleném rozsahu (`Form::RANGE`). Zde využijeme třetí parametr metody `addRule()`, kterým předáme validátoru požadovaný rozsah:

/--php
$form->addText('age', 'Věk:')
	->addRule(Form::INTEGER, 'Věk musí být číslo')
	->addRule(Form::RANGE, 'Věk musí být od 18 do 120', array(18, 120));
\--

Zde vzniká prostor pro drobný refactoring. V chybové hlášce a ve třetím parametru jsou čísla uvedená duplicitně, což není ideální. Pokud bychom tvořili [#vícejazyčné formuláře] a hláška obsahující čísla by se musela přeložit do více jazyků, ztížila by se pozdější změna hodnot. Z toho důvodu je možné použít zástupné znaky v [tomto formátu | php:sprintf]:

/--php
	->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120));
\--

.[tip]
Více se dozvíte v samostatné sekci [Formulářové prvky a jejich validace |dev:cs:forms:controls-validation].


Pokud by formulář nesloužil k registraci nových uživatelů, ale pro editaci záznamů, hodilo by se na začátku nastavit prvkům [#výchozí hodnoty].

Tímto máme hotový plně funkční formulář, který disponuje validací na straně klienta (tj. javascriptovou validací) i validací na straně serveru. Automaticky ošetřuje *magic quotes*, ověřuje, zda útočník neposílá nevalidní UTF-8 řetězce apod. Na tyto věci už nemusíme myslet.


Výchozí hodnoty
===

Nastavit výchozí hodnoty lze dvěma způsoby:
1. Metodou `setDefaults()` nad celým formulářem nebo kontejnerem, zpravidla ve funkcích `render/action<view>`.
2. Metodou `setDefaultValue()` přímo nad prvkem.

/--php

public function renderDefault()
{
	$defaults = $form->setDefaults(array(
		'name' => 'John',
		'age' => '33'
	));

	// takto lze přistoupit k formuláři kdekoliv v presenteru
	$this["myForm"]->setDefaults($defaults); // 1. způsob
}

protected function createComponentMyForm()
{
	$form = new Form;

	$form->addText('name', 'Jméno');
	$form->addText('age', 'Věk');

	// 2. způsob
	$countryList = array(
		'cz' => 'Česká republika',
		'sk' => 'Slovensko',
	);
	$form->addSelect("country", "Země:")->setDefaultValue("sk");
}
\--

U *SelectBoxu* nebo *RadioListu* výchozí hodnotu zadáváme přes klíč z předaného pole hodnot.

U *CheckBoxu* zvolíme výchozí stav 'zaškrtnuto' pomocí `setDefaultValue(TRUE)`.


Vykreslení formuláře
===

Formulář můžeme vykreslovat jednoduše i ručně. Veškeré možnosti, kterých není málo, můžete prozkoumat na stránce [Vykreslování formulářů |dev:cs:forms:render].


Výhody využití v MVC/presenterech
===


Stejný formulář ve více presenterech
-----------------------------------------------

Pokud potřebujete jeden formulář použít ve více presenterech, máte dvě možnosti:
1) vložit do hierarchie presenterů jejich společného předka a továrničku definovat tam
2) definovat formulář v samostatné třídě jako komponentu a v jednotlivých továrničkách vytvářet jeho instance

Vhodné umístění pro takovou třídu je `app/forms/SignInForm.php`
/--php
use Nette\Application\UI,
	Nette\ComponentModel\IContainer;

class SignInForm extends UI\Form
{
	public function __construct(IContainer $parent = NULL, $name = NULL)
	{
		parent::__construct($parent, $name);
		$this->addText('name', 'Jméno:');
		// ...
		$this->addSubmit('login', 'Přihlásit se');
	}
}
\--

V továrničce každého presenteru, který náš formulář zobrazuje, ji pak použijeme takto:
/--php
	protected function createComponentSignInForm($name)
	{
		$form = new SignInForm();
		$form['login']->caption = 'Pokračovat';	// můžeme také formulář pozměnit

		$form->onSuccess[] = callback($this, 'signInFormSubmitted');
		return $form;
	}
\--

.[tip]
Odeslaný formulář ale můžeme také zpracovávat na jediném místě. Do definice formuláře přesuneme volání událostí i s metodou `signInFormSubmitted` a přejmenujeme ji například na `submitted`.


Zabezpečení
===

Obrana před Cross-Site Request Forgery (CSRF)
---

Nette Framework ochrání vaše aplikace před útokem [Cross-Site Request Forgery |doc:cs:vulnerability-protection#toc-cross-site-request-forgery-csrf] (CSRF). Útok spočívá v tom, že útočník naláká oběť na stránku, která nenápadně vykoná požadavek na server, na kterém je oběť přihlášena a server se domnívá, že požadavek vykonala oběť o své vůli.

Ochrana je velmi snadná:

/--php
$form->addProtection('Vypršel časový limit, odešlete formulář znovu');
\--

Proti útoku se lze bránit generováním a ověřováním autorizačního tokenu. Ten má platnost po dobu existence session. Díky tomu nebrání použití ve více oknech najednou (v rámci jedné session). Platnost je však možné zkrátit na počet sekund, které se uvedou jako druhý parametr. První parametr je přitom text chybové hlášky, která se zobrazí uživateli, pokud token vypršel.

Obrana by měla být aktivována pro **všechny formuláře, které mění citlivá data v aplikaci**.



Jazyková lokalizace
===

Pokud programujete vícejazyčnou aplikaci, budete nejspíš potřebovat stejný formulář vykreslit v různých jazykových mutacích. Formuláře v Nette Framework disponují podporou pro snadný překlad. Stačí, když formuláři nastavíte tzv. překladač, což je objekt implementující rozhraní [api:Nette\Localization\ITranslator]. Rozhraní má jedinou metodu `translate()`.


/--php
class MyTranslator extends Nette\Object implements Nette\Localization\ITranslator
{
	/**
	 * Translates the given string.
	 * @param  string   message
	 * @param  int      plural count
	 * @return string
	 */
	public function translate($message, $count = NULL)
	{
		return ...;
	}
}

$form->setTranslator($translator);
\--

V tu chvíli se nejen všechny popisky, chybové hlášky nebo položky select boxů transparentně přeloží do jiného jazyka.

Pokud má formulář položky, které **nechceme překládat**, docílíme toho takto:
/--php
$form["myHobbies"]->setTranslator(NULL);
\--


{{themeicon: icon-form.png}}
