Dědičnost šablon
****************

.[perex]
Dědičnost šablon představuje mocný nástroj, který umožňuje snadnou a efektivní tvorbu i velmi komplikovaných layoutů bez nutnosti zbytečného opakování kódu.

/--comment
Obecné poznámky a náměty na zlepšení
------------------------------------
 - Přidat příklady na práci s bloky v rámci jednoho souboru.
 - Vysvětlit, co je to vlastně ten "blok".
 - Preferovat deklaraci s hashem nebo bez hashe?
 - 'layout.phtml' vs. '@layout.latte'
 - Doplnit zmínku o tom, že bloky lze do sebe libovolně zanořovat a dají se volat křížem krážem.
 - Sjednotlit označení pro {include #foo} - načtení, volání, vložení.
 - Uvést použití v rámci Nette FW – zmínit automaticky použitý @layout.latte resp. MyPresenter.@layout.latte
 - Hovořit vůbec o vyjmutí bloku z běžného kontextu šablony? Přijde mi ho hodně těžké na pochopení.
\--

Bloky
=====
Bloky slouží pro **označení části šablony**. Mohou být buď anonymní nebo pojmenované (ty se používají především).

Definice
--------
K definici se obvykle používá makro `{block}`, které umožňuje definovat jak anonymní, tak pojmenované bloky.

/--html
{block}Anonymní blok{/block}
{block #foo}Pojmenovaný blok s názvem 'foo'. Hash (#) na začátku jména lze při deklaraci bloku vynechat.{/block}
\--

Kromě makra `{block}` lze pro definování pojmenovaného bloku ve specifických situacích využít také atributy `n:block` a `n:inner-block`.

Atribut **`n:block`** se používá pro definici bloku **okolo HTML tagu**. Následující dva zápisy jsou ekvivalentní:

/--html
{block #foo}<p>...</p>{/block}
<p n:block="foo">...</p>
\--

Atribut **`n:inner-block`** se používá pro definici bloku **uvnitř HTML tagu**. Následující dva zápisy jsou opět ekvivalentní:

/--html
<p>{block #foo}...{/block}</p>
<p n:inner-block="foo">...</p>
\--

Vkládání
--------
/--comment
Následující odstavec mi přijde trochu zmatený a těžký na pochopení. Napadá někoho, jak to vysvětlit snáze.
\--

Části šablony označené jako bloky jsou vyjmuty ze svých původních míst v šabloně a pro jejich vypsání je třeba je znovu "vložit". Pokud je blok definován v šabloně, která nepoužívá layout (o tom se dozvíte více později), je vložen automaticky na místo své definice. V ostatních případech je třeba blok vložit ručně, k čemuž slouží makro `{include}`. Název bloku zde musí být uveden s `#` (jinak by se makro pokusilo načíst soubor).

/--html
{include #foo}
\--

Příklady
--------
Dovnitř tagu `<title>` bude vložen obsah tagu `<h1>`.

/--html
...
	<title>{include #title} | Example.com</title> <!-- Vypíše "Registrace | Example.com" -->
...
	<h1 n:inner-block="title">Registrace</h1> <!-- Definován blok #title. Vyjmut z šablony a následně automaticky vložen. -->
...
\--

Platnost proměnných
----
Při **deklaraci** bloku do něj automaticky přecházejí všechny **lokální i [globální | api:Nette\Templating\Template::getParameters()]** proměnné. Změna hodnoty lokální proměnné se projeví pouze v daném bloku (a tím pádem i v dceřiných blocích). Nejlépe to bude vidět asi na příkladu:

/--html
{assign text => "A"}

{block #alpha}
	{$text} <!-- Vypíše "A" --><br>
	{assign text => "B"}
	{$text} <!-- Vypíše "B" --><br>

	{block #beta}
		{$text} <!-- Vypíše "B" --><br>
	{/block}
{/block}

{$text} <!-- Vypíše "A" --><br>
\--

Při **vložení** bloku do něj přecházejí automaticky **pouze globální** proměnné šablony. Lokální proměnné je možné v případě potřeby předat ručně.

/--html
{include #foo, a => 45, b => 'xyz', c => $text}
\--


Vkládání sebe sama (rekurze)
---
Blok může vložit i sám sebe, což lze použít např. pro vykreslení stromového menu.

/--html
{block #menu}
<ul>
    {foreach $menu as $item}
    <li>{if is_array($item)} {include #menu, menu => $item} {else} {$item} {/if}</li>
    {/foreach}
</ul>
{/block}
\--

Místo `{include #menu, ...}` lze psát `{include #this, ...}`, čímž odstraníme duplicitu slova `menu`.

.[note]
K dispozici je také [video | pla:posobota-6-david-grudl-nove-sablony] z Pardubic, kde byla dědičnost šablon představena.



Dědičnost
=========

Základy
------

Začněme od začátku – máme jednoduchou stránku:

**FirstPage.latte**
/--html
<!doctype html>
<html>
	<head>
		<title>První stránka | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content"><p>Mauris consectetur lobortis purus eget...</p></div>
	</body>
</html>
\--

Vlastně – máme i druhou:

**SecondPage.latte**
/--html
<!doctype html>
<html>
	<head>
		<title>Druhá stránka | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content"><p>Proin eu sem purus. Donec bibendum vestibulum...</p></div>
	</body>
</html>
\--

Protože stránky se liší akorát částí `<title>` a obsahem `<div#content>`, tak je výhodné vytvořit layout a stránky FirstPage.latte a SecondPage.latte budou upravovat jen ty části, které se od layoutu liší.

/--comment
Zakomponovat nějaký bližší popis?

Nejprve vytvoříme prázdný soubor `layout.latte`.
V šablonách stránek pak pomocí makra {layout} označíme soubor layout.latte jako layout daných stránek a lišící se fragmenty označíme jako bloky.
Ná závěr vytvoříme naplníme layout html kódem a na místa, která se u jednotlivých stránek liší vložíme blok pomocí makra {include}.
\--

**layout.latte**
/--html
<!doctype html>
<html>
	<head>
		<title>{include #title} | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

Pomocí makra `{layout}` (nebo jeho aliasu - `{extends}`) označíme, která šablona bude sloužit jako layout, a pomocí makra `{block}` označíme jednotlivé části stránky, které budou vloženy (makrem `{include}`) do layoutu.

**FirstPage.latte**
/--html
{layout layout.latte}

{block #title}První stránka{/block}
{block #content}<p>Mauris consectetur lobortis purus eget...</p>{/block}
\--

**SecondPage.latte**
/--html
{layout layout.latte}

{block #title}Druhá stránka{/block}
{block #content}<p>Proin eu sem purus. Donec bibendum vestibulum...</p>{/block}
\--

Každá stránka musí definovat všechny bloky, které layout makrem `{include}` načítá.


Přepisování bloků v layoutu
---------------------------
Někdy může být výhodné, aby layout definoval **výchozí obsah** a potomci ho pak mohli (nikoliv museli) přepsat. Toho dosáhneme nahrazením volání bloku (`{include #foo}`) za jeho definici (`{block #foo}výchozí obsah{/block}`).

**layout.latte**
/--html
<!doctype html>
<html>
	<head>
		<title>{block #title}Výchozí titulek{/block} | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

Blok (zde `#title`) umístěný v šabloně stránky **přepíše** stejně pojmenovaný blok umístěny v layoutu (pakliže existuje).


Načtení přepsaného bloku
------------------------
Uvnitř bloku, který přepisuje blok definovaný v layoutu máme možnost tento přepsaný blok načíst pomocí `{include #parent}`. Toho se obvykle využívá pro připsání kusu textu před nebo za původní obsah bloku.

**layout.latte**
/--html
<!doctype html>
<html>
	<head>
		<title>{block #title}Můj web{/block}</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

**FirstPage.latte**
/--html
{layout layout.latte}

{block #title}První stránka | {include #parent}{/block}
{block #content}<p>Mauris consectetur lobortis purus eget...</p>{/block}
\--


Víceúrovňový layout
-------------------
Layout šablony může sám používat další layout. Toho lze využít pro tvorbu komplikovanějších layoutů.


Shrnutí
=======

Syntaxe
-------
| Definice anonymního bloku                       | `{block}anonymní blok{/block}`
| Definice pojmenovaného bloku                    | `{block #foo}pojmenovaný blok{/block}`
| Definice pojmenovaného bloku okolo HTML tagu    | `<p n:block="foo">...</p>`
| Definice pojmenovaného bloku uvnitř HTML tagu   | `<p n:inner-block="foo">...</p>`
| Načtení bloku                                   | `{include #foo}`
| Načtení bloku s parametry                       | `{include #foo, a => 45, b => 'xyz', c => $text}`
| Načtení sebe sama                               | `{include #this}`
| Načtení stejně pojmenovaného bloku v layoutu    | `{include #parent}`
| Použití layoutu                                 | `{layout layout.latte}` nebo `{extends layout.latte}`

Pravidla
---------
- Pokud je blok definován v souboru, který nepoužívá layout, je automaticky vypsán.
- Blok umístěný v šabloně stránky přepíše stejně pojmenovaný blok umístěny v layoutu (pakliže existuje).
- Každá stránka musí definovat všechny bloky, které layout makrem `{include}` načítá (a sám je nedefinuje).
- Při deklaraci bloku do něj automaticky přecházejí všechny lokální i globální proměnné šablony.
- Při vkládání bloku do něj automaticky přecházejí pouze globální proměnné šablony.
