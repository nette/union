Dědičnost šablon
****************

/--comment
Obecné poznámky a náměty na zlepšení
------------------------------------
 - Přidat příklady na práci s bloky v rámci jednoho souboru.
 - Vysvětlit, co je to vlastně ten "blok".
 - Preferovat deklaraci s hashem nebo bez hashe?
 - 'layout.phtml' vs. '@layout.phtml'
 - Doplnit zmínku o tom, že bloky lze do sebe libovolně zanořovat a dají se volat křížem krážem.
\--

Základním stavením prvkem je jeden **blok**. K jeho definici se používá makro `{block}`. Bloky mohou být buď anonymní nebo pojmenované (ty se používají především).

/--html
{block}Anonymní blok{/block}
{block #foo}Pojmenovaný blok s názvem 'foo'. Hash (#) na začátku jména lze při deklaraci bloku vynechat.{/block}
\--

Pro definici bloku okolo HTML tagu lze použít i atribut `n:block`. Následující dva zápisy jsou ekvivalentní:

/--html
{block #foo}<p>...</p>{/block}
<p n:block="foo">...</p>
\--

Pokud je blok definován v souboru, který nepoužívá layout (o tom se dozvíte více později), je automaticky vypsán. K ručnímu vypsání (zavolání, načtení) bloku slouží makro `{include}`. Název bloku zde musí být uveden s `#` (jinak by se makro pokusilo načíst soubor).

/--html
{include #foo}
\--

.[note]
K dispozici je také [video | wiki:Videa#Nové šablony] z Pardubic, kde byla dědičnost šablon představena.

Základy dědičnosti
------------------

Začněme od začátku – máme jednoduchou stránku:

**FirstPage.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>První stránka | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content"><p>Mauris consectetur lobortis purus eget...</p></div>
	</body>
</html>
\--

Vlastně – máme i druhou:

**SecondPage.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>Druhá stránka | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content"><p>Proin eu sem purus. Donec bibendum vestibulum...</p></div>
	</body>
</html>
\--

Protože stránky se liší akorát částí `<title>` a obsahem `<div#content>`, tak je výhodné vytvořit layout a stránky FirstPage.phtml a SecondPage.phtml budou upravovat jen ty části, které se od layoutu liší.

/--comment
Zakomponovat nějaký bližší popis?

Nejprve vytvoříme prázdný soubor `layout.phtml`.
V šablonách stránek pak pomocí makra {layout} označíme soubor layout.phtml jako layout daných stránek a lišící se fragmenty označíme jako bloky.
Ná závěr vytvoříme naplníme layout html kódem a na místa, která se u jednotlivých stránek liší vložíme blok pomocí makra {include}.
\--

**layout.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>{include #title} | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

Pomocí makra `{layout}` (nebo jeho aliasu - `{extends}`) označíme, která šablona bude sloužit jako layout, a pomocí makra `{block}` označíme jednotlivé části stránky, které budou vloženy (makrem `{include}`) do layoutu.

**FirstPage.phtml**
/--html
{layout layout.phtml}

{block #title}První stránka{/block}
{block #content}<p>Mauris consectetur lobortis purus eget...</p>{/block}
\--

**SecondPage.phtml**
/--html
{layout layout.phtml}

{block #title}Druhá stránka{/block}
{block #content}<p>Proin eu sem purus. Donec bibendum vestibulum...</p>{/block}
\--

Každá stránka musí definovat všechny bloky, které layout makrem `{include}` načítá.


Přepisování nadřazených bloků
-----------------------------
Někdy může být výhodné, aby nadřazená šablona definovala výchozí obsah a potomci ho pak mohli (nikoliv museli) přepsat.

V šablonách se takového chování dosahuje nahrazením "abstraktní definice" (`{include #foo}`) za konkrétní definici bloku (`{block #foo}...{/block}`). Konkrétně v našem případě to bude vypadat takto:

**layout.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>{block #title}Výchozí titulek{/block} | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

Blok (zde `#title`) umístěný v šabloně stránky **přepíše** stejně pojmenovaný blok umístěny v layoutu (pakliže existuje).


Načtení nadřazeného bloku
------------------------
Blok v layoutu ale nemusíme v šabloně stránky jen přepsat, ale je možné k němu i něco připsat pomocí načtení rodičovského bloku – `{include #parent}`.

**layout.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>{block #title}Můj web{/block}</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

**FirstPage.phtml**

/--html
{layout layout.phtml}

{block #title}První stránka | {include #parent}{/block}
{block #content}<p>Mauris consectetur lobortis purus eget...</p>{/block}
\--

**SecondPage.phtml**
/--html
{layout layout.phtml}

{block #title}Druhá stránka | {include #parent}{/block}
{block #content}<p>Proin eu sem purus. Donec bibendum vestibulum...</p>{/block}
\--

Platnost proměnných
-------------------
Při **deklaraci** bloku do něj automaticky přecházejí všechny **lokální i [globální | api:Nette\Templates\BaseTemplate::getParams()]** proměnné. Změna hodnoty lokální proměnné se projeví pouze v daném bloku (a tím pádem i v dceřiných blocích). Nejlépe to bude vidět asi na příkladu:

/--html
{assign text => "A"}

{block #alpha}
	{$text} <!-- Vypíše "A" --><br>
	{assign text => "B"}
	{$text} <!-- Vypíše "B" --><br>

	{block #beta}
		{$text} <!-- Vypíše "B" --><br>
	{/block}
{/block}

{$text} <!-- Vypíše "A" --><br>
\--

Při **vložení** bloku do něj přecházejí automaticky **pouze globální** proměnné šablony. Lokální proměnné je možné v případě potřeby předat ručně.

/--html
{include #foo, a => 45, b => 'xyz', c => $text}
\--


Načtení sebe sama (rekurze)
---------------------------
Blok může načíst i sám sebe, což lze použít např. pro vykreslení stromového menu.

/--html
{block #menu}
<ul>
    {foreach $menu as $item}
    <li>{if is_array($item)} {include #menu, menu => $item} {else} {$item} {/if}</li>
    {/foreach}
</ul>
{/block}
\--

Místo `{include #menu, ...}` lze psát `{include #this, ...}`, čímž odstraníme duplicitu slova `menu`.

Vícenásobná dědičnost
----------------------
Šablona může dědit od šablony, která dědí zase od jiné šablony. Toho lze využít pro tvorbu komplikovanějších layoutů.
