{{Tak nic :)}}

Dědičnost šablon
****************

Základy dědičnosti
------------------

Začněme od začátku – máme jednoduchou stránku:

**FirstPage.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>První stránka | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content"><p>Mauris consectetur lobortis purus eget...</p></div>
	</body>
</html>
\--

Vlastně – máme i druhou:

**SecondPage.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>Druhá stránka | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content"><p>Proin eu sem purus. Donec bibendum vestibulum...</p></div>
	</body>
</html>
\--

V OOP by to vypadalo asi takto:
/--php
class FirstPage
{
	public function render()
	{
		$s  = '<!doctype html>' . "\n";
		$s .= '<html><head>' . "\n";
		$s .= '<title>První stránka | Můj web</title>' . "\n";
		$s .= '</head>' . "\n";
		$s .= '<body>' . "\n";
		$s .= '<div id="leftColumn"><ul>...</ul></div>' . "\n";
		$s .= '<div id="content"><p>Mauris consectetur lobortis purus eget...</p></div>' . "\n";
		$s .= '</body></html>' . "\n";

		echo $s;
	}
}

class SecondPage
{
	public function render()
	{
		$s  = '<!doctype html>' . "\n";
		$s .= '<html><head>' . "\n";
		$s .= '<title>Druhá stránka | Můj web</title>' . "\n";
		$s .= '</head>' . "\n";
		$s .= '<body>' . "\n";
		$s .= '<div id="leftColumn"><ul>...</ul></div>' . "\n";
		$s .= '<div id="content"><p>Proin eu sem purus. Donec bibendum vestibulum...</p></div>' . "\n";
		$s .= '</body></html>' . "\n";

		echo $s;
	}
}
\--

Protože stránky se liší akorát částí `<title>` a obsahem `#content`, tak je výhodné vytvořit nadřazenou třídu, od které budou třídy `FirstPage` a `SecondPage` dědit.

/--php
abstract class ParentPage
{
	public function render()
	{
		$s  =  '<!doctype html>' . "\n";
		$s .=  '<html><head>' . "\n";
		$s .=  '<title>' . $this->renderTitle() . ' | Můj web</title>' . "\n";
		$s .=  '</head>' . "\n";
		$s .=  '<body>' . "\n";
		$s .=  '<div id="leftColumn"><ul>...</ul></div>' . "\n";
		$s .=  '<div id="content">' . $this->renderContent() . '</div>' . "\n";
		$s .=  '</body></html>' . "\n";

		echo $s;
	}

	abstract public function renderTitle();
	abstract public function renderContent();
}

class FirstPage extends ParentPage
{
	public function renderTitle() {return 'První stránka';}
	public function renderContent() {return '<p>Mauris consectetur lobortis purus eget...</p>';}
}

class SecondPage extends ParentPage
{
	public function renderTitle() {return 'Druhá stránka';}
	public function renderContent() {return '<p>Proin eu sem purus. Donec bibendum vestibulum...</p>';}
}
\--


A přesně to samé lze udělat díky dědičnosti i u šablon:

**ParentPage.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>{include #title} | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

**FirstPage.phtml**

/--html
{extends ParentPage.phtml}

{block #title}První stránka{/block}
{block #content}<p>Mauris consectetur lobortis purus eget...</p>{/block}
\--

**SecondPage.phtml**
/--html
{extends ParentPage.phtml}

{block #title}Druhá stránka{/block}
{block #content}<p>Proin eu sem purus. Donec bibendum vestibulum...</p>{/block}
\--


Přepisování nadřazených bloků
-----------------------------

Někdy může být výhodné, aby nadřazená šablona definovala výchozí obsah a potomci ho pak mohli (nikoliv museli) přepsat.

V OOP toho lze dosáhnout zrušením abstrakce dané metody. Např. abstraktní definice metody `renderTitle` se nahradí za:
/--php
public function renderTitle() {return 'Výchozí titulek';}
\--

V šablonách se stejného chování dosahuje nahrazením "abstraktní definice" `{include #jmenoBloku}` za konkrétní definici bloku (`{block #jmenoBloku}...{/block}`). Konkrétně v našem případě to bude vypadat takto:

**ParentPage.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>{block #title}Výchozí titulek{/block} | Můj web</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--


Načtení nadřazeného bloku
------------------------
V OOP nemusíme ale blok jenom přepsat, ale můžeme k němu i něco připsat. Slouží k tomu volání rodičovské metody (`parent::metoda()`).

/--php
abstract class ParentPage
{
	public function render()
	{
		$s  =  '<!doctype html>' . "\n";
		$s .=  '<html><head>' . "\n";
		$s .=  '<title>' . $this->renderTitle() . '</title>' . "\n";
		$s .=  '</head>' . "\n";
		$s .=  '<body>' . "\n";
		$s .=  '<div id="leftColumn"><ul>...</ul></div>' . "\n";
		$s .=  '<div id="content">' . $this->renderContent() . '</div>' . "\n";
		$s .=  '</body></html>' . "\n";

		echo $s;
	}

	public function renderTitle() {return 'Můj web';}
	abstract public function renderContent();
}

class FirstPage extends ParentPage
{
	public function renderTitle() {return 'První stránka | ' . parent::renderTitle();}
	public function renderContent() {return '<p>Mauris consectetur lobortis purus eget...</p>';}
}

class SecondPage extends ParentPage
{
	public function renderTitle() {return 'Druhá stránka | ' . parent::renderTitle();}
	public function renderContent() {return '<p>Proin eu sem purus. Donec bibendum vestibulum...</p>';}
}
\--

V šablonách se používá syntaxe `{include #parent}`.

**ParentPage.phtml**
/--html
<!doctype html>
<html>
	<head>
		<title>{block #title}Můj web{/block}</title>
	</head>
	<body>
		<div id="leftColumn"><ul>...</ul></div>
		<div id="content">{include #content}</div>
	</body>
</html>
\--

**FirstPage.phtml**

/--html
{extends ParentPage.phtml}

{block #title}První stránka | {include #parent}{/block}
{block #content}<p>Mauris consectetur lobortis purus eget...</p>{/block}
\--

**SecondPage.phtml**
/--html
{extends ParentPage.phtml}

{block #title}Druhá stránka | {include #parent}{/block}
{block #content}<p>Proin eu sem purus. Donec bibendum vestibulum...</p>{/block}
\--

Načtení sebe sama (rekurze)
---------------------------
`{include #this}`

Načtení bloku s parametry
-------------------------
`{include #jmenoBloku, a => 45, b => 'xyz'}`

Platnost proměnných
-------------------
/--html
{assign text => 'Lorem ipsum'}

{block #someBlock}
	{$text}

	{assign text => 'Ipsum Lorem'}
{/block}

{$text}
\--

Vícenásobná dědičnost
----------------------

{{tags: draft, draft, draft, draft, draft}}
