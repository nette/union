Běhové prostředí
****************

WORK IN PROGRESS - WAIT FOR CORRECTION .[caution]

Běhové prostředí má v **Nette Frameworku** na starosti třída **[Nette\Environment | api:]**. .[perex]

Konfigurace
===========

Načtení konfigurace prosředí má na starosti třída [Nette\Config\Config | api], která načítá a zpracovává nastavení aplikace, [služeb | doc:cs:Běhové prostředí/Služby], proměnných a konstant. Samotná konfigurace je uložena v nečastěji v `ini` souboru. Pro tento typ souboru PHP disponuje nativním parserem, takže načítání je rychlé a nepotřebuje ani kešovat.

Konfigurační soubor
-------------------
Konfigurace pomocí `ini` souboru podporuje rozšířenou syntaxi. V názvu sekcí a proměnných lze použít tečky pro vytvoření podsekcí. A jednotlivé sekce a podsekce lze pomocí `<` dědit.

/--code ini
[common]
; PHP configuration
php.date.timezone = "Europe/Prague"
php.iconv.internal_encoding = "UTF-8"
php.mbstring.internal_encoding = "UTF-8"
;php.default_charset = "UTF-8"

; variables
variable.lang = en
variable.tempDir = %appDir%/temp
variable.logDir = %appDir%/log

; services
service.Nette-Security-IAuthenticator = UsersModel

[comon.service]
Nette-Loaders-RobotLoader.option.directory[] = %appDir%
Nette-Loaders-RobotLoader.option.directory[] = %libsDir%
Nette-Loaders-RobotLoader.run = TRUE


[production < common]


[development < common]
\--
V rámci sekce pak lze vypnout dělení klíčů pomocí tečky - za název sekce se přidá vykřičník - tečky jsou poté brány jako součást názvu direktivy.

/--code ini
[common.ip!]
127.0.0.1 = localhost
192.168.1.1 = router
\--

Konfigurační soubor často obsahuje údaje k databázi proto si pohlídejte zda tento soubor nemáte přístupný z webu. [Více informací | doc:cs:Adresářová struktura#zabezpečení] .[caution]


Práce s konfigurací v aplikaci
------------------------------
Několik způsobů načtení konfigurace:
/--php
use Nette\Config\Config;

// zpracování konfiguračního souboru
$config = Config::fromFile('config.ini');
// aplikace konfigurace
Config::loadConfig($config);

// nebo můžeme použí kratší a používanější variantu
Nette\Environment::loadConfig(); //načte a aplikuje defaultní 'config.ini'
// nebo
Nette\Environment::loadConfig('another.ini'); //načte a aplikuje 'another.ini'

// konfiguraci můžeme i uložit
$config->save('config_generated.ini', 'production');
\--

V linuxových systémech se používá u `include_path` jiný oddělovač cest než na Windows systémech. [Nette\Config\Config | api:] řeší tento problém použitím univerzálního oddělovače cest v konfiguračním souboru (středník), pak při běhu nahradí tento oddělovač za oddělovač cest konkrétní platformy, tudíž nedochází k žádným nekompatibilitám. .[note]


Název prostředí
===============

Prostředí je zjednodušeně název počítače, na kterém aplikace právě běží. Může to být jeden z počítačů, kde probíhá vývoj, může to být produkční server. Každé prostředí má jiné parametry (cesty k adresářům, připojení k databázi, ...), mohu si je pojmenovat a podle názvu prostředí načíst kupříkladu konfiguraci:

/--php
Nette\Environment::setName('mujpocitac');
//...
Nette\Environment::loadConfig(); // načte z config.ini sekci [mujpocitac]
\--

Název prostředí je libovolný řetězec, na kterém žádná logika v Nette nestojí.

Při definování novéko prostředí v konfiguračním souboru mužete využít dědičnosti sekcí a podsekcí v konfiguračním souboru. `[production < common]` .[tip]


Mód prostředí
=============

Mód nebo taky režim je indikátor, určující nějaký parametr daného prostředí. Módy lze nastavovat buď přes config.ini, nebo přímo voláním metody [Nette\Environment::setMode | api:], zjišťovat stav lze přes [Nette\Environment::getMode | api:].

Je možné požít i speciálních metod [isConsole | api:Nette\Environmetn::isConsole] a [isProduction | api:Nette\Environmetn::isProduction] což jsou alternativy k [Nette\Environment::getMode | api:]
/--php
if (!Nette\Environment::isProduction()) {
	//... můžete zapnout třeba striktní režim laděnky
}
\--


Autodetekce
-----------

Autodetekce pracuje na principu zjištění IP adresy serveru (ze `$_SERVER['SERVER_ADDR']`) a v případě shody s některou z klasických IP adres používaných v intranetu se režim nastaví na `debug`. Manuální nastavení režimu v konfiguračním souboru má vyšší prioritu než autodetekce, a na zkušebním serveru (běžícím například na localhostu tj. na 127.0.0.1) ho lze vyvolat pomocí příkazu

/--code ini
mode.{režim} = TRUE
; aktivace produkčního prostření
mode.production = TRUE
\--

Autodetekce názvu prostředí úzce souvisí s detekcí režimů `production` & `console`, protože právě na základě nich se název zvolí z variant [Nette\Environment::DEVELOPMENT | api:], [Nette\Environment::PRODUCTION | api:] nebo [Nette\Environment::CONSOLE | api:].

Pokud používáte `config.ini` soubor ze [skeletonu | doc:cs:Adresářová struktura#Skeleton] a chcete aplikaci používat v módu [Nette\Environment::CONSOLE | api:] nezapomeňte doplnit sekci `[console]` .[note]

Příklad
-------

Mějme aplikaci, která běží v pěti různých prostředích:

1) 2x na lokálním serveru, kde probíhá vývoj (můj počítač + virtuální testovací stroj)
2) 1x na serveru tojeono.cz (jako texy.info)
3) 2x na serveru hostmonster.com (jako nette.org a dibiphp.com)

Každé prostředí může mít jiný název. Prostředí 2) a 3) budou mít nejspíš vždy aktivní režim `production`. V prostředí 1) budu vyvíjet nejčastěji v "neživém" režimu, ale před nahráním na server si mohu mód `production` ručně aktivovat a ověřit, jestli všechno funguje v pořádku. Mezi názvy prostředí a režimy tedy není žádná přímá souvislost, krom autodetekce.

Proměnné
========

*Nette Framework* nám umožňuje definovat i proměnné prostředí. Jedná se o proměnné, které máme jednoduše přístupně napříč celou aplikací (nazývané globální proměnné).

Ukázka:
/--php
use Nette\Environment;

//definice proměnných
Environment::setVariable('key', "Value"); //nastavíme proměnné 'key' hodnotu 'Value'

//načítání proměnných
Environment::getVariable('key'); //získáme hodnotu proměnné 'key' - vrátí 'Value'
Environment::getVariable('undefined'); //nedefinované proměnné vracejí NULL
Environment::getVariable('undefined', "Test"); //chceme-li místo NULL vrátit jinou hodnotu uvedeme jí jako druhý parametr

//načídání uživatelských konstant
Environment::getVariable('wwwDir'); //vrátí obsah konstanty WWW_DIR
Environment::getVariable('WwwDir'); //vrátí obsah konstanty WWW_DIR
Environment::getVariable('www_dir'); //vrátí obsah konstanty WWW_DIR
Environment::getVariable('WWW_DIR'); //vrátí obsah konstanty WWW_DIR
\--

Načítání konstant pomocí [Nette\Environment::getValue() | api:] je funkční pouze u uživatelsky definovaných konstant. Tj. ty které jste sami definovali v kódu pomocí [define() | php:]. .[note]

.[see]
- [Nette\Config API reference | api:Nette\Config\Config]
- [Nette\Configurator API reference | api:Nette\Configurator]
- [Nette\Environment API reference | api:Nette\Environment]
- [Nette\ServiceLocator API reference | api:Nette\ServiceLocator]

[Vylepšení zápisu phpdoc direktiv (rev. 481) - changelog | http://forum.nette.org/cs/2328-rev-481-config-ini-a-php-direktivy]
