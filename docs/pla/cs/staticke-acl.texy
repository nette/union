Staticke acl v modularnej aplikacii
***********************************

.[perex]
V tomto tutoriáli sa naučíte vytvoriť modulárnu aplikáciu v Nette Framework, rozdelenú na verejnú a admin sekciu. Vstup a pohyb po admin sekcii bude kontrolovaný pomocou statického ACL (access control list). Ukážeme vám ako ACL spolupracuje s tzv. rolami (role), zdrojmi (resources) a oprávneniami (permisions).

Predhovor
===
Užívatelia, ktorí začnú využívať niektorý webový PHP framework čokoro zistia, že zložitejšiu aplikáciu je nutné rozdeliť na viac častí (modulov). Najčastejšie sa aplikácia rozdeľuje na dva moduly - Frontend a Backend (alebo tiež admin). Frontend je časť aplikácie, ktorú vidí bežný návštevník. Je teda verejne prístupná. Backend predstavuje uzavretú časť aplikácie, do ktorej majú mať prístup iba oprávnení užívatelia (admin, redaktor, moderátor). Pre verejnosť je uzavretá. Oba moduly využívajú ten istý Model (DATA) na manipuláciu s biznis logikou aplikácie.

[* appschema.png *]

Frontend DATA zvyčajne iba zobrazuje (preto jednosmerná šípka), Backend poskytuje funkcie aj na ich manipuláciu (pridávanie, editovanie, mazanie). Až zložitejšie (WEB 2.0) aplikácie umožňujú manipuláciu s dátami aj na Frontende. Jedná sa vtedy napr. o pridávanie diskusných príspevkov bežnými návštevníkmi.


Čo budete potrebovať?
===
- Stiahnite si aktuálne stabilné vydanie Nette Framework (tutoriál je určený pre verziu PHP 5.2 ale s malými úpravami samozrejme pobeží aj na PHP 5.3). Z tohto balíka budete potrebovať knižnice *Nette Framework*, knižnice DB layeru *Dibi* a obsah zložky *modules-usage*, ktorý nájdete v zložke **examples**.
- Vytvorte si pracovnú zložku pre projekt, napr. **nette-acl** a príp. sprevádzkujte nový VirtualHost.

Projekt
===
Do zložky **nette-acl** nakopírujte obsah zložky **examples/modules-usage** z distribučného balíka Nette Framework. V zložke ďalej vytvorte adresár **libs** a do neho umiestnite knižnice Nette Framework. V zložke **libs** vytvorte adresár pre knižnice *Dibi* (s názovom **Dibi**) a do neho umiestnite obsah adresára **3rdParty/dibi/dibi/** z distribučného balíka Nette Framework. V adresári **libs** vytvorte ešte jednoduchú štruktúru podadresárov s názvami **Proj/Security**.

.[note]
Názov *Proj* je v tomto prípade všeobecným názvom knižníc nášho projektu. V reálnej situácii svoj projekt zvyčajne pomenujete nejakým zmysluplným menom. Toto meno potompoužite ako názov terajšej zložky *Proj*.

Nakoniec do zložky **nette-acl/app** pridajte adresár pre vaše Modely (**nette-acl/app/models/**). Celú štruktúru projektu demonštruje obrázok:

[* projectstructure.png *]

Aby ste mohli aplikáciu spustiť (odskúšať či beží) , je treba ešte opraviť drobné "nezrovnalosti":
- v súbore **document_root/index.php** je nutné správne nastaviť konštantu **LIBS_DIR**. Korekciu urobte prepísaním riadku 10 týmto kódom

/--
define('LIBS_DIR', WWW_DIR . '/../libs');
\--

- v súbore **app/bootstrap.php** je nutné opraviť volanie Nette Framework loadera. Na riadok 9 zapíšte kód
/--
require LIBS_DIR . '/Nette/loader.php';
\--

Teraz už môžete otestovať **základnú** funkčnosť aplikácie. V tomto momente beží len *skeleton* modulárnej aplikácie v Nette Framework.

[* apprunning0-small.png *]:[* apprunning0.png *]

Ďalej sa už v tutoriáli budeme venovať iba modulu AdminModule (Backend). Modul FronModule (Frontend) nechávame vo vašich rukách, nie je predmetom tutoriálu programovať verejne dostupnú časť aplikácie. Nezabúdajte, že vaše *Modely* sú spoločné pre oba moduly.

Zabezpečený Backend
===
Ako už bolo spomenuté vyššie na riadenie prístupu do Backend modulu (v ďalšom texte bude použité spojenie *AdminModule* alebo *admin sekcia*) bude využívaný statický ACL. Statický znamená, že všetky oprávnenia, zdroje a role budú zapísané do .php súboru. Oprávnených užívateľov a ich roly si však zapíšeme do databázy a následne využijete *Dibi* na získanie týchto údajov z databázi.

DB schéma a demo údaje
---
Vytvorte novú databázu pre projekt (napr. **nette_acl**) a novú tabuľku *users*, ktorá bude udržiavať údaje o oprávnených užívateľoch

/--
CREATE TABLE `users` (
  `id`         int            NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name`       varchar(255)   NOT NULL,
  `email`      varchar(255)   NOT NULL,
  `password`   char(64)       NOT NULL,
  `salt`       char(10)       NOT NULL,
  `role`       enum('admin', 'editor', 'registered')   NOT NULL
) ENGINE = MyISAM DEFAULT CHARACTER SET = utf8;
\--

Všimnite si, že tabuľka obsahuje stĺpec *role*. Pre šetrenie miestom je pole typu **enum**. V tomto poli sú vymenované role, ktoré môžu opravení užívatelia nadobúdať. Keďže ACL je statické, zoznam rolí musíte definovať takto. Ako prihlasovacie meno sa nebude používať *login meno* ale email. V stĺpci *name* teda bude uložené plné meno užívateľa. Je to hlavne preto, aby užívateľ nemusel vymýšľať login meno. Email užívateľov sa aj tak zvyčajne skladuje v databáze z nejakého iného dôvodu, takže je zbytočné plytvať údajmi potrebnými pre prihlásenie.

Pre maximalizáciu bezpečnosti bude heslo užívateľa *saltované* a následne sa preženie PHP funkciou [hash_hmac()|http://php.net/manual/en/function.hash-hmac.php]. Táto funkcia *zahashuje* vstupný string s využitím kľúča, ktorý dodá ďalšiu úroveň zabezpečenia hesla. Vznik hashu hesla ilustruje obrázok

[* hmac.png *]

Tento postup sme zvolili pretože bežný *salt* je viditeľný v databázi. Prípadný útok na heslá užívateľov je sťažený tým, že heslo je saltované ešte jedným kľúčom, ktorý je uložený v *config.ini*.

Naplňte tabuľku nejakými demo údajmi. Ako **hmac key** sme zvolili **zb1g7IHt1I** a heslá jednotlivých užívateľov sú:
- John Doe: admin
- Betty Lee: pokus
- Peter Brown: pokus

Heslo sme zreťazili so *soľou* a výsledný *keyed hash* je vidieť v následujúcom SQL príkaze. Spustite prosím tento príkaz nad vašou databázou, čím naplníte tabuľku *users*.

/--
INSERT INTO `users` (`id`, `name`, `email`, `password`, `salt`, `role`) VALUES
(NULL, 'John Doe',    'admin@example.com',   'c6c0fd72f830bda3cf607ce95ab5eae1a90bbbd1c3fe9806f908cce34823e858', 'X2rSC3POlm', 'admin'),
(NULL, 'Betty Lee',   'betty@example.com',   '1f9447f3bf9712eecdea45352120f80d3eecd59fc73ed11feb122cfacc062e8c', 'fpGUHrni2k', 'editor'),
(NULL, 'Peter Brown', 'brown.p@example.com', 'cccc1e7dabd0838d19b79ff6165cf35e6adcd9a886029ac3f3bf64382a9cb0ef', 'XrhtAnNuxt', 'registered');
\--

.[tip]
Ak chcete vygenerovať vlastný *keyed hash* pomocou funkcie hash_hmac(), môžete využiť nasledujúci príkaz pre príkazový riadok (konzolu)

/--
php -r "echo hash_hmac('sha256', '<HESLO><SALT>' , '<HMAC KEY>');"
\--

Teraz je vhodný moment zapísať konfiguráciu pripojenia k databáze do **app/config.ini**. Do sekcie **common** zapíšte tieto konfiguračné direktívy (patričné hodnoty upravte podľa svojho prostredia DB servera)

/--
; database
database.driver = mysqli
database.charset = utf8
database.host = localhost
database.database = nette_acl
database.username = php
database.password = php
database.lazy = true

; security
security.hmacKey = zb1g7IHt1I
\--

Konfiguráciu je následne potrebné nejako predať *Dibi*. Otvorte súbor **app/bootstrap.php** a za krok 3 (na riadok 25) zapíšte kód

/--php
// Step 3a: Configure database connection
dibi::connect(Environment::getConfig('database'));
\--

Okrem toho do súboru pridajte novú *routu* na admin modul. Pridajte ju **pred existujúce routy**!

/--php
    # AdminModule routes
    $router[] = new Route('admin/<presenter>/<action>/<id>', array(
        'module'    => 'Admin',
        'presenter' => 'Default',
        'action'    => 'default',
        'id'        => null
    ));
\--

Ešte vytvorte predka všetkých Modelov - **app/models/BaseModel.php**

/--php
<?php

class BaseModel extends Object
{

}
\--

a predka všetkých Presenterov v AdminModule - **app/AdminModule/presenters/BasePresenter.php**

/--php
<?php

abstract class Admin_BasePresenter extends BasePresenter
{
    protected function beforeRender()
    {
        $user = Environment::getUser();
        $this->template->user = ($user->isAuthenticated()) ? $user->getIdentity() : NULL;
    }
}
\--

Nakoniec upravte kód dôležitých šablón, nakoľko obsahujú pozostatky kódu z distribučného balíka Nette Framework. Je vhodné doplniť aj nejaké štýlovanie, aby aplikácia mala aspoň základný vzhľad:
- kód layoutu admin modulu (**app/AdminModule/templates/@layout.phtml**) nahraďte [týmto kódom|http://files.nette.org/1262/layout.phtml.phps]
- kód šablóny **app/AdminModule/templates/Default.default.phtml** nahraďte [kódom|http://files.nette.org/1262/default.default.phtml.phps]
- do zložky **document_root/css** pridajte CSS súbor **admin.css** s  [obsahom|http://files.nette.org/1262/admin.css]

.[note]
Všetky súbory majú kódovanie UTF-8. Ak sa vám v prehliadači zobrazujú v kóde zvláštne znaky, prepnite si kódovanie stránky na UTF-8 (zvyčajne v menu "Zobraziť => Kódovanie stránky")

V tomto momente máte pripravené všetky veci aby ste mohli naprogramovať prihlásenie do admin sekcie.

Vytvorenie ACL
---
Ako sme už spomenuli, ACL je v tomto tutoriáli zapísaný staticky v .php súbore. Jeho úlohou je definovanie rolí, zdrojov a oprávanení. Role musia presne odpovedať roliam, ktoré ste definovali vo výčtovom type *enum* pri definícii tabuľky *users*. Vytvorte nový súbor **libs/Proj/Security/Acl.php**

/--php
<?php

class Proj_Security_Acl extends Permission
{
    public function __construct()
    {
        // role
        $this->addRole('guest');
        $this->addRole('registered', 'guest');
        $this->addRole('editor', 'registered');
        $this->addRole('admin', 'editor');

        // zdroje
        $this->addResource('Admin_DefaultPresenter');
        $this->addResource('Admin_PagePresenter');
        $this->addResource('Admin_UserPresenter');

        // opravnenia
        $this->allow('registered', 'Admin_DefaultPresenter', Permission::ALL);
        $this->allow('editor', 'Admin_PagePresenter', Permission::ALL);
        $this->allow('admin', Permission::ALL, Permission::ALL);
    }
}
\--

.[note]
*Všimnite si ako je názov triedy odvodený od cesty, kde je súbor uložený. Preto ak zmeníte ktorúkoľvek časť cesty k súboru, musíte tieto zmeny reflektovať aj vo vašich .php súboroch v zložke **libs** (viď. tip o mene projektu vyššie).*

Trieda *Proj_Security_Acl* dedí od *Nette/Security/Permission*. V jej konštruktre definujeme celý ACL. Jednotlivé role je možné zdediť od inej role. V hore uvedenom kóde napr. rola *admin* dedí od role *editor*, *editor* dedí od *registered* a podobne. V praxi to znamená, že *editor* získa všetky oprávnenia, ktoré priradíte roli *registered*. ACL obsahuje aj rolu *guest*, ktorú sme v tabuľke *users* nedefinovali. To ani nie je potrebné - Nette Framework túto rolu priradí každému užívateľovi, ktorý nemá rolu definovanú explicitne. Rolu *guest* tak automaticky nadobudne každý neprihlásený užívateľ, ktorý sa chce prihlásiť do admin sekcie.

Ďalej ACL obsahuje definíciu zdrojov. Ako *zdroj* si môžete predstaviť nejakú entitu, ktorú chcete pomocou ACL ochrániť. V našom prípade sú chránemými zdrojmi samotné Presentery admin sekcie.

Nakoniec sú jednotlivým roliam nastavené oprávnenia. Tretí parameter metódy **Permission::allow()** určuje akú *operáciu* je možné nad zdrojom vykonať. Zapís *Permission::ALL* je možné chápať ako zástupny znak **\***, čiže rola je oprávnená nad zdrojom robiť všetky operácie. Ak chcete povolené operácie explicitne definovať, zapíšte ich názvy do poľa

/--php
$this->allow('editor', 'Admin_PagePresenter', array('view', 'edit'));
\--

Rola *admin* má nastavenú neobmedzenú moc, keďže má povolenie pristupovať k všetkým operáciám vo všetkých zdrojoch.

Ako vidíte ACL je naozaj silný nástroj ako naozaj jemne nastaviť oprávnenia užívateľov. V ďalšom texte vám ukážeme ako ACL zapojiť do procesu prihlásenia a obmedzenia pohybu po admin sekcii.

Prihlásenie do Admin sekcie
---
Keďže údaje o našich  užívateľoch sú uložené v databáze, musíte si napísať vlastný *Authenticator*. Je to objekt, ktorý obstará overenie údajov zadaných do prihlasovacieho formulára oproti našej DB tabuľke. Vytvorte nový php súbor **libs/Proj/Security/Authenticator.php** a zapíšte do neho tento kód

/--php
<?php

class Proj_Security_Authenticator extends Object implements IAuthenticator
{
    public function authenticate(array $credentials)
    {
        $login = $credentials[self::USERNAME];
        $row = UserModel::getByEmail($login);

        if (!$row) {
            throw new AuthenticationException("Užívateľ s registračným emailom '$login' sa nenašiel!", self::IDENTITY_NOT_FOUND);
        }

        $config = Environment::getConfig('security');
        $password =  hash_hmac('sha256', $credentials[self::PASSWORD] . $row->salt , $config->hmacKey);

        if ($row->password !== $password) {
            throw new AuthenticationException("Zadali ste nesprávne heslo!", self::INVALID_CREDENTIAL);
        }

        return new Identity($row->name, $row->role);
    }
}
\--

Trieda *Proj_Security_Authenticator* implementuje rozhranie *IAuthenticator*, preto musí obsahovať definíciu verejnej metódy *authenticate()*, ktorá obstará samotné overenie prihlasovacích údajov. Na získanie údajov z databázy sa využíva Model *UserModel*. Jeho úlohou je v tomto prípade nájsť v DB tabuľke záznam o užívateľovi s daným emailom. V prípade, že sa užívateľ v tabuľke nájde, je overené heslo, ktoré zadal do formulára. Ak sú všetky údaje v poriadku, metóda vráti *identitu* užívateľa. V prípade neúspechu metóda vyhadzuje výnimky, ktoré obsahujú správu pre prihlasujúceho sa užívateľa.

Všimnite si ako je naprogramované získanie *keyed hash* pomocou hore spomenutej funkcie *hash_hmac()*.

Ako sme už spomenuli, na získanie užívateľských údajov z databázy sa využíva Model **UserModel**. Ten by mal vrátiť objekt, ktorý reprezentuje riadok s údajmi užívateľa. Vytvorte nový súbor **app/models/UserModel.php**

/--php
<?php

class UserModel extends BaseModel
{
    public static function getByEmail($email)
    {
        $row = dibi::select('*')
          ->from('users')
          ->where('email=%s', $email)
          ->fetch();

        return ($row) ? $row : NULL;
    }
}
\--

Kód je dostatočne samovysvetľujúci. Statická metóda *getByEmail()* sa pomocou dibi::select() pokúsi z databázy získať riadok s údajmi o užívateľovi. V prípade úspechu vráti *DibiRow* objekt, inak vráti NULL.

[* 25t7qr9.png *]

Teraz vám predvedieme ako *Authenticator* a *ACL* využiť na prihlásenie do admin sekcie aplikácie. Triedy *Proj_Security_Authenticator* a *Proj_Security_Acl* je potrebné zaregistrovať ako služby, ktoré obstarajú autentifikáciu a autorizáciu užívateľov. Otvorte **app/config.ini** a v sekcii **common**, hneď za konfiguráciu RobotLoadera pridajte tieto konfiguračné direktívy

/--
service.Nette-Security-IAuthenticator = Proj_Security_Authenticator
service.Nette-Security-IAuthorizator = Proj_Security_Acl
\--

Logika aplikácie v AdminModule bude taká, že ak sa užívateľ pokúsi otvoriť View/Action chráneného Presentera, overí sa, či je užívateľ prihlásený. Ak nie je, bude presmerovaný na Presenter:View, ktorý mu zobrazí prihlasovací formulár.

Ak je užívateľ už prihlásený, aplikácia v súčinnosti s ACL overí, či má užívateľ oprávnenie otvoriť žiadaný Presenter:View (Presenter:Action).

Otvorte súbor **app/AdminModule/presenters/DefaultPresenter.php**, zmažte jeho obsah a vložte nasledujúci kód

/--php
<?php

final class Admin_DefaultPresenter extends Admin_BasePresenter
{
    public function startup()
    {
        $user = Environment::getUser();

        if (!$user->isAuthenticated()) {
            if ($user->getSignOutReason() === User::INACTIVITY) {
                $this->flashMessage('Uplynula doba neaktivity! Systém vás z bezpečnostných dôvodov odhlásil.', 'warning');
            }

            $backlink = $this->getApplication()->storeRequest();
            $this->redirect('Auth:login', array('backlink' => $backlink));

        } else {
            if (!$user->isAllowed($this->reflection->name, $this->getAction())) {
                $this->flashMessage('Na vstup do tejto sekcie nemáte dostatočné oprávnenia!', 'warning');
                $this->redirect('Auth:login');
            }

        }

        parent::startup();
    }

    public function actionLogout()
    {
        Environment::getUser()->signOut();
        $this->flashMessage('Práve ste sa odlásili z administrácie.');
        $this->redirect('Auth:login');
    }
}
\--

.[note]
*Všimnite si ako sú názvy tried presenterov v AdminModule prefixované **Admin_**. Vďaka tomu je Možné triedu presentera natiahnuť pomocou niektorého z autoloaderov, ktoré poskytuje Nette Framework*.

V Presenteri sme preťažili metódu *stratup()*. Ak sa pozorne pozriete na [životný cyklus|doc:nette-application-presenter] Presentera, zistíte, že metóda *startup()* je volaná na úplnom začiatku životného cyklu Presentera. Ak teda chcete zabrániť vykonaniu akcie/view Presentera, musíte to urobiť práve tu.

Kód presne implementuje logiku, ktorú sme spomínali o pár odstavcov vyššie - overí sa, či je užívateľ prihlásený
- ak nie, overí sa či už neuplynul *logout interval*, v tomto prípade nastavíme flashMessage s informáciou. Každý neprihlásený užívateľ je potom presmerovaný na taký *Presenter:View*, ktorý zabezpečí vykreslenie prihlasovacieho formulára. Predtým je ešte do Session uložený aktuálny request, vďaka čomu bude užívateľ po prihlásení hneď presmerovaný na požadovanú *destination*.
- ak áno, je s pomocou ACL rozhodnuté či má užívateľ prístup k *zdroju* a *operácii*.

Parametre metódy *$user->isAllowed()* sú práve tým, čo spája chránenú entitu s definíciou v ACL. My sme ako zdroj (resource) sme použili meno aktuálneho Presentera. Prosím narolujte si na definíciu zdrojov v ACL vyššie a všimnite si definície zdrojov. Rovnako, pre operáciu sme použili meno aktuálnej (požadovanej) Action alebo View (obe mená sú rovnaké). Môžeme teda zovšeobecniť, že kód

/--php
$user->isAllowed($this->reflection->name, $this->getAction())
\--

zistí, či je užívateľ oprávnený zobraziť (vykresliť) aktuálny Presenter:View (Presenter:Action).

Presenter okrem toho ešte obsahuje akciu na odhlásenie užívateľa z admin modulu. Nikdy **nezabudnite všetkým užívateľom, ktorí sa prihlasujú do AdminModule dať oprávnenie na túto akciu**, inak sa nebudú môcť odhlásiť! Naše ACL toto splňuje nakoľko rola *registered* má oprávnenia na všetky *operácie* v *Admin_DefaultPresenter*-i.

Ako ste si mohli všimnúť z popisu a kódu, neprihlásení užívatelia sú presmerovaní na *AuthPresenter:login*, kde sa im zobrazí prihlasovací formulár. Vytvorte nový súbor **app/AdminModule/presenters/AuthPresenter.php** a zapíšte do neho tento kód

/--php
<?php

final class Admin_AuthPresenter extends Admin_BasePresenter
{

    /** @persistent */
    public $backlink = '';

    protected function createComponentLoginForm($name)
    {
        $form = new AppForm($this, $name);

        $form->addText('login', 'Email:')
             ->addRule(Form::EMAIL, 'Prosím zadajte registračný email.');

        $form->addPassword('password', 'Password:')
             ->addRule(Form::FILLED, 'Prosím zadajte heslo.');

        $form->addProtection('Prosím odošlite prihlasovacie údaje znova (vypršala platnosť tzv. bezpečnostného tokenu).');
        $form->addSubmit('send', 'Log in!');

        $form->onSubmit[] = array($this, 'loginFormSubmitted');
    }

    public function loginFormSubmitted($form)
    {
        try {
            $user = Environment::getUser();
            $user->authenticate($form['login']->value, $form['password']->value);
            $this->getApplication()->restoreRequest($this->backlink);
            $this->redirect('Default:default');

        } catch (AuthenticationException $e) {
            $form->addError($e->getMessage());
        }
    }

}
\--

Presenter obsahuje jednu továrničku na vytvorenie login formulára. Formulár má polia pre email (s patričným validátorom), pre heslo, odosielacie tlačidlo. Okrem toho sme formulár obohatili o ochranu pred CSRF a nakoniec sme pridali *callback* na metódu, ktorá spracuje údaje z formulára.

Aj tá je súčasťou kódu presentera. Dôležité je upozorniť, že tá sa dostane k slovu iba ak je odoslaný formulár valídny (prejde validačnými pravidlami definovanými v továrničke formulára). Úlohou callback funkcie je predať údaje z formulára do nášho *Authenticatora* a jeho metódy *authenticate()* (viď. vyššie). V prípade, že je autentifikácia úspešná, je z Authenticatora získaná *identita* a užívateľ je presmerovaný späť.

Všimnite, si že volanie **Authenticator::authenticate()** je obalené try/catch blokom. Ak teda metóda *authenticate()* vyhodí nejakú výnimku (a že ich vyhadzuje sa presvedčte vyššie v definícii triedy **Proj_Security_Authenticator**), je message výnimky vložená do formulára a ten je nanovo vykreslený užívateľovi (samozrejme užívateľa neprihlásime), kde je o svojej chybe informovaný.

Ostáva doplniť kód šablóny AuthPresentera, kde sa nachádza vykreslenie prihlasovacieho formulára. Vytvorte súbor **app/AdminModule/templates/Auth.login.phtml**

/--
{assign robots => noindex}

{block #title}Login :: {include #parent}{/block}

{block #content}
  {widget loginForm}
{/block}
\--

Keďže na prihlásenie sa zvyčajne používa iné rozloženie stránky ako v samotnej admin sekcii, budeme pri vykresľovaní *AuthPresenter:login* používať iný layout. Vytvorte súbor **app/AdminModule/templates/Auth.@layout.phtml** a dajte do neho dajte "tento kód":www.srigi.sk/stuff/nette_acl/auth-layout-phtml.phps.

Teraz sa už môžete vyskúšať prihlásiť do admin sekcie
- zadajte do browsra URL **http://nette-acl/admin**
- ak sa chcete prihlásiť ako admin zadajte email **admin@example.com** a heslo **admin**.

[* 729fli.png *]:[* f556oo.png *]
[* 2z86ec3.png *]:[* 2i97bd2.png *]

.[tip]
Ak aplikácia nechce pracovať a neustále vykakuje Laděnka, nezabudnite premazať zložku **app/temp**.

Aby ste mohli vyskúšať funkciu ACL, je treba do AdminModulu pridať ďalšie dva Presentery. Tie dodatočné dva, ktoré sú definované v ACL. Aby sme ich rovnako ochránili pred neoprávneným prístupom pomocou ACL, je treba preťažiť ich metódy **startup()**. Takýto prístup ale nie je veľmi efektívny - písať stále sa opakujúci kód do každého Presentera AdminModulu - to si žiada nejaký refactoring.

Prvé čo vás asi napadne je "ochranný" kód z **DefaultPresenter**a presunúť do **Admin_BasePresenter**. Keď sa však na kód dobre pozriete, zistíte že kód v prvom kroku overí či je užívateľ prihlásený. Ak nie je, bude presmerovaný na **AuthPresenter:login**. Lenže aj on dedí od **Admin_BasePresenter**. Po presmerovaní by sa znova overovala "prihlásenosť" a zase by sa presmerovávalo. Aplikácia sa dostane do slučky a zhavaruje. **AuthPresenter** musíme teda z overovania vylúčiť. Overovací kód je treba umiestniť inam.

Ideálne je vytvoriť nového predka pre všetky Presentery, ktoré budú chránené ACL. Tu vás však upozorníme, že od tohto predka nebude dediť **DefaultPresenter**. Je to z toho dôvodu, prihlásený užívateľ ktorý sa snaží dostať do Presenter:View na ktorý nemá oprávnenia nesmie byť presmerovaný na **AuthPresenter:login** (kde sa vykresľuje prihlasovací formulár). Je už predsa prihlásený. Kód v **DefaultPresenter::startup()** však robí práve to (viď. vyššie). Prihlásených užívateľov po neúspešnom vstupe do sekcií kde nemajú na prístup oprávenia presmerujeme späť na úvodnú stránku admin sekcie **DefaultPresenter:default**.

Takýto rozbor nás dovedie k nasledujúcemu stromu presenterov:

[* kalnqv.png *]:[* 6eonjp.png *]

Všetky chránené Presentery s výnimkou **DefaultPresenter** budú teda dediť od **SecuredPresenter**. Ten preťažuje metódu **startup()** takže všetci jeho potomkovia budú pomocou kódu v nej overovaní cez ACL. Ostáva teda napísať kód zostávajúcich Presenterov

**app/AdminModule/presenters/SecuredPresenter.php**
/--php
<?php

abstract class Admin_SecuredPresenter extends Admin_BasePresenter
{
    public function startup()
    {
        $user = Environment::getUser()->setAuthorizationHandler(new Proj_Security_Acl());

        if (!$user->isAuthenticated()) {
            if ($user->getSignOutReason() === User::INACTIVITY) {
                $this->flashMessage('Uplynula doba neaktivity! Systém vás z bezpečnostných dôvodov odhlásil.', 'warning');
            }

            $this->flashMessage('Na vstup do ADMIN sekcie sa musíte prihlásiť!', 'warning');
            $backlink = $this->getApplication()->storeRequest();
            $this->redirect('Auth:login', array('backlink' => $backlink));

        } else {
            if (!$user->isAllowed($this->reflection->name, $this->getAction())) {
                $this->flashMessage('Pokúsili ste sa vstúpiť do sekcie, na ktorú nemáte dostatočné oprávnenia! Vstup vám bol odopretý.', 'warning');
                $this->redirect('Default:');
            }

        }

        parent::startup();
    }
}
\--

Všimnite si, že metóda presmeruje pri nepovolenom prístupe na **Default:** a nie na **Auth:login** ako v **DefaultPresenter**i.

Pridajte aj dva nové chránené Presentery...

**app/AdminModule/presenters/PagePresenter.php**
/--php
<?php

final class Admin_PagePresenter extends Admin_SecuredPresenter
{

}
\--

**app/AdminModule/presenters/UserPresenter.php**
/--php
<?php

final class Admin_UserPresenter extends Admin_SecuredPresenter
{

}
\--

...a ich šablóny.

**app/AdminModule/templates/Page.default.phtml**
/--
{block #title}Správa stránok :: {include #parent}{/block}


{block #content}

  <h1>Správa stránok</h1>

  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce luctus tellus at odio fringilla in venenatis dolor aliquam. Aenean ante orci, pellentesque facilisis ultricies nec, imperdiet sit amet arcu
. Maecenas eu lacus dapibus sem condimentum blandit. Sed aliquam, leo non vestibulum rutrum</p>

{/block}
\--

**app/AdminModule/templates/User.default.phtml**
/--
{block #title}Správa užívateľov :: {include #parent}{/block}


{block #content}

  <h1>Správa užívateľov</h1>

  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce luctus tellus at odio fringilla in venenatis dolor aliquam. Aenean ante orci, pellentesque facilisis ultricies nec, imperdiet sit amet arcu
. Maecenas eu lacus dapibus sem condimentum blandit. Sed aliquam, leo non vestibulum rutrum</p>

{/block}
\--

Premažte zložku **app/temp** a otestuje prístup na nové Presentery pomocou všetkých užívateľov. Odhláste administratora a prihláste sa napr. ako Betty
- email **betty@example.com**, heslo **pokus**
Bety má podľa ACL povolenie na pohyb po **DefaultPresenter**i a **PagePresenter**i. Nemá oprávnenie na vstup do **UserPresenter**a. Skúste klepnúť na jeho odkaz a uvidíte čo sa stane

[* 24lonxj.png *]:[* 2rnhgzn.png *]

Zapracoval ACL a Presenter ochránil pred nepovoleným vstupom neoprávenej role. Aplikácia je v tomto momente hotová, môžete si ju celú stiahnuť ako "archív .zip":http://s000.tinyupload.com/?file_id=11275403675470737933 (neobsahuje knižnice Nette Framework a Dibi)

{{tags: tutorial}}

{{author: srigi|1860}}
