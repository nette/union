Staticke ACL v modularnej aplikacii
***********************************

.[perex]
V tomto tutoriáli sa naučíme vytvoriť modulárnu aplikáciu v Nette Framework, rozdelenú na verejnú a admin sekciu. Vstup a pohyb po admin sekcii bude kontrolovaný pomocou statického ACL (access control list). Ukážeme vám ako nastaviť ACL v súčinnosti s tzv. rolami (roles), zdrojmi (resources) a privilégiami (privileges).

Predhovor
===
Užívatelia, ktorí začnú využívať niektorý webový PHP framework čoskoro zistia, že zložitejšiu aplikáciu je nutné rozdeliť na viac častí (modulov). Najčastejšie sa aplikácia rozdeľuje na dva moduly - Frontend a Backend (niekedy tiež označovaný ako administrácia). Frontend je verejne prístupná časť aplikácie, ktorú vidí bežný návštevník. Backend predstavuje uzavretú časť aplikácie, do ktorej majú mať prístup iba oprávnení užívatelia (admin, redaktor, moderátor). Pre verejnosť je uzavretá. Oba moduly využívajú ten istý Model (DATA) na manipuláciu s biznis logikou aplikácie.

[* appschema.png *]

Frontend DATA zvyčajne iba zobrazuje (preto jednosmerná šípka), Backend poskytuje funkcie aj na ich manipuláciu (pridávanie, editovanie, mazanie). Až zložitejšie (WEB 2.0) aplikácie umožňujú manipuláciu s dátami aj na Frontende. Jedná sa vtedy napr. o pridávanie diskusných príspevkov bežnými návštevníkmi.

Čo to je a načo potrebujeme ACL
===
Mnoho programátorov webových aplikácií už výraz ACL možno videlo, ale nevedia tento komponent webových frameworkov správne uchopiť a použiť vo webovej MVC/MVP aplikácií. Môže za to väčšinou forma akou je ACL komponenta popísaná v referenčnej príručke frameworku. Len málokedy sa v nej dočítate ako ACL zakomponovať do komplexnej webovej aplikácie. Pritom sa jedná o jednu z najdôležitejších častí webovej aplikácie, pretože ACL je zodpovedné za riadenie bezpečnostnej politiky (user access managment).

ACL je definitívnym riešením oprávnení užívateľov. Prvé pokročilejšie PHP aplikácie programátori väčšinou napíšu tak, že pripravia login stránku pre administrátorov/redaktorov, vytvoria administračné rozhranie kde môžu pridávať články, moderovať komentáre a pod. Riadenie bezpečnostnej politiky potom väčšinou vyzerá ako tento kód
/--php
if ($user->type == ADMIN) {
    $html .= '<a href="/delete.php?page=' . $id . '">delete</a>';
}
\--

Síce to funguje ale takýto kód je veľmi ťažké spravovať (pridať nový typ užívateľa do povoleného zoznamu). Okrem toho tento kód porušuje obecné princípy OOP, predovšetkým zapúzdrenie (logika, ktorá rozhodne o povolení by mala byť pred programátorom skrytá do nejakého API).

Ak použijeme na riešenie úlohy ACL, kód by mohol vypadať napr. takto
/--php
if ($user->isAllowed('page', 'delete')) {
    $html .= '<a href="/delete.php?page=' . $id . '">delete</a>';
}
\--

Kód robí úplne rovnakú vec ale logika je zapúzdrená do objektu. Aj čitateľnosť kódu stúpla - kód tvorí pomerne jasnú anglickú vetu (aj keď so zlým slovosledom): *User is allowed page delete?*. Síce sa rovnaký kód musí vyskytovať na všetkých miestach, kde chceme mať odkaz na zmazanie stránky, ale už sme nastúpili na správnu cestu - *zvonka* nie je vidieť ako funguje logika, ktorá *vypočíta* oprávnenia k odkazu na zmazané stránky.

ACL v praxi
---
ACL je skratkou pre "access control list":http://cs.wikipedia.org/wiki/Access_control_list. Je to systém na spravovanie ľubovoľne komplexnej špecifikácie oprávnení. Systém ACL je postavený na troch základných komponentoch:
- **Role** (roles) - *"admin"*, *"moderator"*, *"guest"*. Podľa architektúry môže mať užívateľ jednu alebo viac rolí.
- **Zdroje** (resources) - *"produkt č. 123"*, *"články"* a pod. Je to entita, ktorú pomocou ACL *chránime*.
- **Privilégia** (privileges) - *"delete"*, *"create"*, *"view"*. Akcia ktorú môže byť rola oprávnená na zdroji vykonať.

Niektoré implementácie ACL (medzi inými aj tá v Nette Framework) umožňujú vytvoriť strom oprávnení, kde jedná rola môže podediť oprávnenia od inej role (editor má rovnaké oprávnenia ako moderator plus ...)

ACL a Nette Framework
---
Najlepšie použitie ACL v Nette Framework je v súčinnosti s MVP konceptom. Ako zdroje použijeme názvy Presenterov a privilégia budú zastupovať názvy akcii/view metód

/--php
class BasePresenter extends Presenter
{
    public function foo()
    {
        $user = $this->getUser();
        if ($user->isAllowed($this->name, $this->view) {
            // chraneny kod
        }
    }
}
\--

Čo budeme potrebovať?
===
- Tento tutoriál je určený pre verziu **2.0 Alpha 2** pre **PHP 5.3**. Zo "stiahnutého archívu":http://files.nette.org/NetteFramework-2.0alpha-PHP5.3.zip budeme potrebovať knižnice *Nette Framework* a obsah zložky *Modules-Usage*, ktorý sa nachádza v zložke **examples**.
- Vytvorte si pracovnú zložku pre projekt, napr. **nette-acl** a príp. sprevádzkujte nový VirtualHost.

Projekt
===
Do zložky **nette-acl** nakopírujte obsah zložky **examples/Modules-Usage** z distribučného balíka Nette Framework. V zložke ďalej vytvorte adresár **libs** a umiestnite do neho knižnice Nette Framework. V zložke **libs** ešte vytvorte jednoduchú štruktúru podadresárov s názvami **AclProj/Security**.

.[note]
Názov *AclProj* predstavuje názov vášho projektu. V tejto zložke budú umiestnené definície vlastných tried projektu. V reálnej situácii svoj projekt zvyčajne pomenujete nejakým zmysluplnejším menom. Toto meno použite ako názov terajšej zložky *AclProj*.

Nakoniec do zložky **app** pridajte adresár pre vaše Modely (**app/models/**). Celú štruktúru projektu demonštruje obrázok:

[* projectstructure.png *]

Aby sme mohli aplikáciu spustiť (odskúšať či beží), je treba ešte opraviť drobné "*nezrovnalosti*":
- v súbore **www/index.php** je nutné správne nastaviť konštantu **LIBS_DIR**. Korekciu urobte prepísaním riadku 10 týmto kódom
/--php
define('LIBS_DIR', WWW_DIR . '/../libs');
\--

- v súbore **app/bootstrap.php** je nutné opraviť volanie Nette Framework loadera. Na riadok 14 zapíšte kód
/--php
require LIBS_DIR . '/Nette/loader.php';
\--

Teraz už môžeme otestovať **základnú** funkčnosť aplikácie. V tomto momente beží len *skeleton* modulárnej aplikácie v Nette Framework.

[* apprunning0-small.png *]:[* apprunning0.png *]

Ďalej sa už v tutoriáli budeme venovať iba modulu AdminModule (Backend). Modul FrontModule (Frontend) nechávame vo vašich rukách, nie je predmetom tutoriálu programovať verejne dostupnú časť aplikácie. Nezabúdajte, že vaše *Modely* sú spoločné pre oba moduly.

Zabezpečený Backend
===
Ako už bolo spomenuté vyššie na riadenie prístupu do Backend modulu (v ďalšom texte bude použité spojenie *AdminModule* alebo *admin sekcia*) bude využívané statické ACL. Statické znamená, že všetky privilégia, zdroje a role budú zapísané do .php súboru. Oprávnených užívateľov a ich roly si však uložíme do databázy a následne využijeme `Nette\Database` na získanie týchto údajov z databáze.

DB schéma a demo údaje
---
Vytvorte novú (MySQL) databázu pre projekt (napr. **nette_acl**) a novú tabuľku *users*, ktorá bude udržiavať údaje o oprávnených užívateľoch
/--
CREATE TABLE `users` (
  `id`         int            NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name`       varchar(255)   NOT NULL,
  `email`      varchar(255)   NOT NULL,
  `password`   char(40)       NOT NULL,
  `role`       varchar(255)   NOT NULL
) DEFAULT CHARACTER SET = utf8;
\--

Všimnite si, že tabuľka obsahuje stĺpec *role*. V tomto poli je uložená rola ktorá bude užívateľovi priradená. Ako prihlasovacie meno použijeme email užívateľa. V stĺpci *name* je uložené plné meno užívateľa.

Heslo je uložené ako `sha1` hash pôvodného hesla + tzv. *soli* (salted hash) definovanej v **app/config.ini**. Heslo je *osolené* obyčajným zreťazením so soľou. Spustite tento SQL príkaz nad vašou databázou, čím naplníte tabuľku *users*.
/--
INSERT INTO `users` (`id`, `name`, `email`, `password`, `role`) VALUES

(NULL, 'John Doe',    'admin@example.com',   SHA1('adminzb1g7IHt1I'), 'admin'),
(NULL, 'Betty Lee',   'betty@example.com',   SHA1('pokuszb1g7IHt1I'), 'editor'),
(NULL, 'Peter Brown', 'brown.p@example.com', SHA1('pokuszb1g7IHt1I'), 'member');
\--

Heslá jednotlivých užívateľov sú:
- John Doe: admin
- Betty Lee: pokus
- Peter Brown: pokus

Teraz je vhodný moment zapísať konfiguráciu pripojenia k databázi do **app/config.ini**. Do sekcie **development** zapíšte tieto konfiguračné direktívy (patričné hodnoty upravte podľa svojho prostredia DB servera)
/--
; database
database.driver   = mysql
database.host     = localhost
database.database = nette_acl
database.username = php
database.password = php

; security
security.salt = zb1g7IHt1I
\--

Následne je treba zabezpečiť pripojenie k databáze pomocou týchto parametrov. Použijeme k tomu tzv. `HOOK` startup na ktorý navesíme callback, ktorý pripojenie zabezpečí. V súbore **app/bootstrap.php** pridajte za krok 3 (na riadok 30) tento kód
/--php
// Connect to database
$application->onStartup[] = 'Model\BaseModel::initialize';
\--

Vytvorte súbor `app/models/BaseModel.php` a zapíšte do neho tento obsah:

/--php
<?php

namespace Model;

use Nette\Object,
    Nette\Environment,
    Nette\Database\Connection;

class BaseModel extends Object
{
    /** @var Nette\Database\Connection */
    protected static $connection = null;

    public static function initialize()
    {
        $dbConfig = Environment::getConfig('database');
        self::$connection = new Connection(
            "{$dbConfig->driver}:host={$dbConfig->host};dbname={$dbConfig->database}",
            $dbConfig->username,
            $dbConfig->password
        );
    }
}
\--

Nakoniec upravte kód dôležitých šablón, nakoľko obsahujú pozostatky kódu z distribučného balíka Nette Framework. Je vhodné doplniť aj nejaké štýlovanie, aby aplikácia mala aspoň základný vzhľad:
- kód layoutu administrácie **app/AdminModule/templates/@layout.latte** nahraďte [týmto kódom|http://files.nette.org/1262/layout.latte]
- kód šablóny **app/AdminModule/templates/Default.default.latte** nahraďte [kódom|http://files.nette.org/1262/default.default.latte]
- do zložky **web/css** pridajte CSS súbor **admin.css** s  [obsahom|http://files.nette.org/1262/admin.css]

.[note]
Všetky súbory majú kódovanie UTF-8. Ak sa vám v prehliadači zobrazujú v kóde zvláštne znaky, prepnite si kódovanie stránky na UTF-8 (zvyčajne v menu "Zobraziť => Kódovanie stránky")

V tomto momente máte pripravené všetky veci aby ste mohli naprogramovať prihlásenie do admin sekcie.

Vytvorenie ACL
---
Ako sme už spomenuli, ACL je v tomto tutoriáli zapísaný staticky v `.php` súbore. Jeho úlohou je definovanie rolí, zdrojov a oprávanení. Použité role sa musia zhodovať s rolami užívateľov uložených v databáze v tabuľke *users*. Vytvorte nový súbor **libs/AclProj/Security/Acl.php**
/--php
<?php

namespace AclProj\Security;

use Nette\Security\Permission;

class Acl extends Permission
{
    public function __construct()
    {
        // roles
        $this->addRole('guest');
        $this->addRole('member', 'guest');
        $this->addRole('editor', 'member');
        $this->addRole('admin');

        // resources
        $this->addResource('Admin:Default');
        $this->addResource('Admin:Page');
        $this->addResource('Admin:User');

        // privileges
        $this->allow('member', 'Admin:Default', Permission::ALL);
        $this->allow('editor', 'Admin:Page', Permission::ALL);
        $this->allow('admin', Permission::ALL, Permission::ALL);
    }
}
\--

.[note]
*Všimnite si ako je názov (a namespace) triedy odvodený od cesty, kde je súbor uložený. Ak zmeníte ktorúkoľvek časť cesty k súboru, je vhodné tieto zmeny reflektovať aj vo vašich `.php` súboroch v zložke **libs** a naopak, ak zmeníte názov triedy (alebo namespace) súbor adekvátne premiestniť (viď. tip o mene projektu vyššie).*

Trieda *AclProj\Security\Acl* dedí od *Nette\Security\Permission*. V jej konštruktore definujeme celý ACL. Oprávnenia role je možné podediť od inej role. V hore uvedenom kóde napr. rola *editor* dedí od role *member*. V praxi to znamená, že *editor* získa všetky oprávnenia, ktoré definujeme nad rolou *member*. ACL obsahuje aj rolu *guest*. Nette Framework túto rolu priradí každému návštevníkovi, ktorý nebol autorizovaný. Rolu *guest* tak automaticky nadobudne každý neprihlásený užívateľ.

Ďalej ACL obsahuje definíciu zdrojov. V našom prípade sú chránemými zdrojmi názvy samotných Presenterov admin sekcie.

Nakoniec sú jednotlivým roliam nastavené privilégia. Zápis *Permission::ALL* je možné chápať ako zástupný znak **\***, čiže rola je oprávnená nad zdrojom robiť všetky operácie. Ak chcete povolené operácie explicitne definovať, zapíšte ich názvy do poľa

/--php
$this->allow('editor', 'Admin:Page', array('view', 'edit'));
\--

Rola *admin* má nastavenú neobmedzenú moc, keďže má povolenie pristupovať k všetkým operáciám vo všetkých zdrojoch. Nemusí teda dediť od žiadnej existujúcej role.

Ako vidíte ACL je naozaj silný nástroj a umožňuje naozaj jemne nastaviť oprávnenia užívateľov. V ďalšom texte vám ukážeme ako ACL zapojiť do procesu prihlásenia a obmedzenia pohybu po admin sekcii.

Prihlásenie do Admin sekcie
---
Keďže údaje o našich  užívateľoch sú uložené v databázi, musíme si napísať vlastný *Authenticator*. Je to objekt, ktorý obstará overenie údajov zadaných do prihlasovacieho formulára oproti našej DB tabuľke. Vytvorte nový php súbor **libs/AclProj/Security/Authenticator.php** a zapíšte do neho tento kód

/--php
<?php

namespace AclProj\Security;

use Nette\Object,
    Nette\Environment,
    Nette\Security\Identity,
    Nette\Security\IAuthenticator,
    Nette\Security\AuthenticationException,
    Model\User;

class Authenticator extends Object implements IAuthenticator
{
    public function authenticate(array $credentials)
    {
        $email = $credentials[self::USERNAME];
        $row = User::findByEmail($email);

        if (!$row) {
            throw new AuthenticationException("Užívateľ s registračným emailom '$email' sa nenašiel!", self::IDENTITY_NOT_FOUND);
        }

        $config = Environment::getConfig('security');
        $password =  sha1($credentials[self::PASSWORD] . $config->salt);

        if ($row->password !== $password) {
            throw new AuthenticationException('Zadali ste nesprávne heslo!', self::INVALID_CREDENTIAL);
        }

        $identity = new Identity($row->id, $row->role);
        $identity->name = $row->name;
        $identity->email = $row->email;

        return $identity;
    }
}
\--

Trieda *AclProj\Security\Authenticator* implementuje rozhranie *Nette\Security\IAuthenticator*, preto musí obsahovať definíciu verejnej metódy *authenticate()*, ktorá obstará samotné overenie prihlasovacích údajov. Na získanie údajov z databázy sa využíva trieda *User* z namespace *Model*. Jeho úlohou je v tomto prípade nájsť v DB tabuľke záznam o užívateľovi s daným emailom. V prípade, že sa užívateľ v tabuľke nájde, je overené heslo, ktoré zadal do formulára. Ak sú všetky údaje v poriadku, metóda vráti *identitu* užívateľa. V prípade neúspechu metóda vyhadzuje výnimky, ktoré obsahujú správu pre prihlasujúceho sa užívateľa. Všimnite si ako do procesu overenia hesla zapracované *solenie* (zreťazenie so soľou).

Ako sme už spomenuli, na získanie užívateľských údajov z databázy sa využíva Model **User**. Ten by mal vrátiť objekt, ktorý reprezentuje riadok s údajmi užívateľa. Vytvorte nový súbor **app/models/User.php**

/--php
<?php

namespace Model;

class User extends BaseModel
{
    public static function findByEmail($email)
    {
        $row = self::$connection->table('users')
            ->where('email', $email)
            ->fetch();

        return ($row) ? $row : NULL;
    }
}
\--

Na komunikáciu s databázou sa využíva objekt *$connection*, ktorý sme inicialozovali v *BaseModel* cez HOOK startup. Takto elegantne (pomocou dedičnosti) je možné tento inicializovaný objekt využívať v samotných modeloch. Statická metóda *findByEmail()* sa pokúsi z databázy získať riadok s údajmi o užívateľovi. V prípade úspechu vráti *Nette\Database\Selector\TableRow* objekt, inak vráti NULL.

Teraz sa už konečne dostávame k samotnému jadru tutoriálu. Triedy *AclProj\Security\Acl* a *AclProj\Security\Authenticator* použijeme k prihláseniu do administrácie. Obe je potrebné zaregistrovať ako služby, ktoré obstarajú autentifikáciu a autorizáciu užívateľov. Otvorte **app/config.ini** a v sekcii **common**, hneď za konfiguráciu RobotLoadera pridajte tieto konfiguračné direktívy

/--
service.Nette-Security-IAuthorizator  = AclProj\Security\Acl
service.Nette-Security-IAuthenticator = AclProj\Security\Authenticator
\--

Logika aplikácie v AdminModule bude taká, že ak sa užívateľ pokúsi spustiť akciu z chráneného Presentera, overí sa, či je užívateľ prihlásený. Ak nie je, bude presmerovaný na *AdminModule\AuthPresenter:login*, ktorý mu zobrazí prihlasovací formulár. Ak je užívateľ už prihlásený, aplikácia v súčinnosti s ACL overí, či má užívateľ oprávnenie spustiť žiadanú `Presenter:action`.

Vytvorte najskôr *AdminModule\BasePresenter*, od ktorého budú dediť všetky Presentre v AdminModule:

**app/AdminModule/presenters/BasePresenter.php**
/--php
<?php

namespace AdminModule;

abstract class BasePresenter extends \BasePresenter
{

}
\--

Ďalej otvorte súbor **app/AdminModule/presenters/DefaultPresenter.php**, zmažte jeho obsah a vložte nasledujúci kód

/--php
<?php

namespace AdminModule;

use Nette\Web\User;

final class DefaultPresenter extends BasePresenter
{
    public function startup()
    {
        parent::startup();

        $user = $this->getUser();

        if (!$user->isLoggedIn()) {
            if ($user->getLogoutReason() === User::INACTIVITY) {
                $this->flashMessage('Uplynula doba neaktivity! Systém vás z bezpečnostných dôvodov odhlásil.', 'warning');
            }

            $backlink = $this->getApplication()->storeRequest();
            $this->redirect('Auth:login', array('backlink' => $backlink));

        } else {
            if (!$user->isAllowed($this->name, $this->action)) {
                $this->flashMessage('Na vstup do tejto sekcie nemáte dostatočné oprávnenia!', 'warning');
                $this->redirect('Auth:login');
            }
        }
    }

    public function actionLogout()
    {
        $this->getUser()->logOut();
        $this->flashMessage('Práve ste sa odlásili z administrácie.');
        $this->redirect('Auth:login');
    }
}
\--

V Presenteri sme prepísali metódu *stratup()*. Ak sa pozorne pozrieme na [životný cyklus|doc:nette-application-presenter] Presentera, zistíme, že metóda *startup()* sa volá na úplnom začiatku behu Presentera. Ak teda chcete zabrániť vykonaniu akcie Presentera, musíme to urobiť práve tu.

Kód presne implementuje logiku, ktorú sme spomínali o pár odstavcov vyššie - overí sa, či je užívateľ prihlásený
- ak nie, overí sa či už neuplynul *logout interval*, v tomto prípade nastavíme flashMessage s informáciou. Každý neprihlásený užívateľ je potom presmerovaný na *AdminModule\AuthPresenter:login*, ktorý zabezpečí vykreslenie prihlasovacieho formulára. Predtým je ešte do Session uložený aktuálny request, vďaka čomu bude užívateľ po prihlásení hneď presmerovaný na *destination*, z ktorej sme ho v tomto kroku *vyhodili*.
- ak áno, je s pomocou ACL rozhodnuté či má užívateľ *privilégium* k *zdroju*.

Presenter okrem toho ešte obsahuje akciu na odhlásenie užívateľa z admin modulu. Nikdy **nezabudnite všetkým užívateľom, ktorí sa prihlasujú do AdminModule dať oprávnenie na túto akciu**, inak sa nebudú môcť odhlásiť! Naše ACL toto splňuje nakoľko rola *registered* má oprávnenia na všetky *privilégia* v *AdminModule\DefaultPresenter*.

Ako ste si mohli všimnúť z popisu a kódu, neprihlásení užívatelia sú presmerovaní na *AdminModule\AuthPresenter:login*, kde sa im zobrazí prihlasovací formulár. Vytvorte nový súbor pre Presenter **app/AdminModule/presenters/AuthPresenter.php** a zapíšte do neho tento kód

/--php
<?php

namespace AdminModule;

use AdminModule\Forms\LoginForm;

final class AuthPresenter extends BasePresenter
{
    /** @persistent */
    public $backlink = '';

    protected function createComponentLoginForm($name)
    {
        $form = new LoginForm($this, $name);
    }
}
\--

Presenter obsahuje iba jednu továrničku na vytvorenie login formulára. Samotný formulár je uložený v samostatnej triede *AdminModule\Forms\LoginForm*. Veľmi vám doporučujeme aby ste si v rámci projektu organizovali Formuláre/Komponenty do samostatných tried do súborov, ktorých umiestnenie kopíruje ich namespace.

Vytvorte nový súbor **app/AdminModule/forms/LoginForm.php** a zapíšte do neho definíciu formulára:

/--php
<?php

namespace AdminModule\Forms;

use Nette\Application\AppForm,
    Nette\Forms\Form,
    Nette\Environment,
    Nette\Security\AuthenticationException;

class LoginForm extends AppForm
{
    public function __construct($parent, $name)
    {
        parent::__construct($parent, $name);

        $this->addProtection('Prosím odošlite prihlasovacie údaje znova (vypršala platnosť bezpečnostného tokenu).');

        $this->addText('login', 'Email:')
            ->addRule(Form::FILLED, 'Prosím zadajte registračný email.')
            ->addRule(Form::EMAIL, 'Zadaný login nie je platná emailová adresa');

        $this->addPassword('password', 'Password:')
            ->addRule(Form::FILLED, 'Prosím zadajte heslo.');

        $this->addSubmit('send', 'Log in!');
        $this->onSubmit[] = array($this, 'formSubmited');
    }

    public function formSubmited($form)
    {
        try {
            $user = $this->getPresenter()->getUser();
            $user->login($form['login']->value, $form['password']->value);

            $this->getPresenter()->getApplication()->restoreRequest($this->getPresenter()->backlink);
            $this->getPresenter()->redirect('Default:default');
        }
        catch (AuthenticationException $e) {
            $form->addError($e->getMessage());
        }
    }
}
\--

Formulár obsahuje polia pre email (s patričným validátorom), pre heslo, odosielacie tlačidlo. Okrem toho sme formulár obohatili o ochranu pred CSRF a nakoniec sme pridali *callback* na metódu, ktorá spracuje údaje z formulára.

Tá sa vykoná iba ak je odoslaný formulár valídny (prejde validačnými pravidlami definovanými v konštruktore formulára). V tele callback funkcie sa pokúsime užívateľa prihlásiť (na pozadí sa zavolá metóda *authenticate()* z nášho *Authenticatora* viď. vyššie). V prípade, že je prihlásenie úspešné, užívateľ je presmerovaný späť.

Všimnite, si že volanie **$user->login()** je obalené try/catch blokom. Ak teda metóda *authenticate()* vyhodí nejakú výnimku (a že ich vyhadzuje sa presvedčte vyššie v definícii triedy **AclProj\Security\Authenticator**), je message výnimky vložená do formulára a ten je nanovo vykreslený užívateľovi (samozrejme užívateľa neprihlásime), kde je o svojej chybe informovaný.

Ostáva doplniť kód šablóny AuthPresentera, kde sa nachádza vykreslenie prihlasovacieho formulára. Vytvorte súbor **app/AdminModule/templates/Auth.login.latte**

/--php
{block #title}Login :: {include #parent}{/block}

{var robots = noindex}

{block #content}
    <div id="loginForm">
        {control loginForm}
    </div>
\--

Keďže na prihlásenie sa zvyčajne používa iné rozloženie stránky ako v samotnej admin sekcii, budeme pri vykresľovaní *AdminModule\AuthPresenter:login* používať iný layout. Vytvorte súbor **app/AdminModule/templates/Auth.@layout.latte** a dajte do neho dajte [tento kód|http://files.nette.org/1262/auth.-layout.latte].

Teraz sa už môžete vyskúšať prihlásiť do admin sekcie
- zadajte do browsra URL **http://nette-acl/admin**
- ak sa chcete prihlásiť ako admin zadajte email **admin@example.com** a heslo **admin**.

[* login-small.png *]:[* login.png *]
[* logged-in-small.png *]:[* logged-in.png *]

.[tip]
Ak aplikácia nechce pracovať a neustále vyskakuje Laděnka, nezabudnite premazať zložku **temp/cache**.

Aby ste mohli vyskúšať funkciu ACL, je treba do AdminModulu pridať ďalšie dva Presentery. Tie dodatočné dva, ktoré sú definované v ACL. Aby sme ich rovnako ochránili pred neoprávneným prístupom pomocou ACL, je treba preťažiť ich metódy **startup()**. Takýto prístup ale nie je veľmi efektívny - písať stále sa opakujúci kód do každého Presentera AdminModulu - to si žiada nejaký refactoring.

Prvé čo vás asi napadne je "ochranný" kód z **DefaultPresenter**a presunúť do **BasePresenter**. Keď sa však na kód dobre pozriete, zistíte že kód v prvom kroku overí či je užívateľ prihlásený. Ak nie je, bude presmerovaný na **AuthPresenter:login**. Lenže aj on dedí od **Admin_BasePresenter**. Po presmerovaní by sa znova overovala "prihlásenosť" a zase by sa presmerovávalo. Aplikácia sa dostane do slučky a zhavaruje. **AuthPresenter** musíme teda z overovania vylúčiť. Overovací kód je treba umiestniť inam.

Ideálne je vytvoriť nového predka pre všetky Presentery, ktoré budú chránené ACL. Tu vás však upozorníme, že od tohto predka nebude dediť **DefaultPresenter**. Je to z toho dôvodu, prihlásený užívateľ ktorý sa snaží spustiť Presenter:action na ktorý nemá oprávnenia by nemal byť presmerovaný na **AuthPresenter:login** (kde sa vykresľuje prihlasovací formulár). **Je už predsa prihlásený!** Kód v **DefaultPresenter::startup()** však robí práve to (viď. vyššie). Prihlásených užívateľov po neúspešnom vstupe do sekcií kde nemajú na prístup oprávenia presmerujeme späť na úvodnú stránku admin sekcie **DefaultPresenter:default**.

Takýto rozbor nás dovedie k nasledujúcemu stromu presenterov:

[* uml-small.png *]:[* uml.png *]

Všetky chránené Presentery s výnimkou **DefaultPresenter** budú teda dediť od **SecuredPresenter**. Ten prepisuje metódu **startup()** takže všetci jeho potomkovia budú pomocou kódu v nej overovaní cez ACL. Ostáva teda napísať kód zostávajúcich Presenterov

**app/AdminModule/presenters/SecuredPresenter.php**
/--php
<?php

namespace AdminModule;

use Nette\Web\User;

abstract class SecuredPresenter extends BasePresenter
{
    public function startup()
    {
        parent::startup();

        $user = $this->getUser();

        if (!$user->isLoggedIn()) {
            if ($user->getLogoutReason() === User::INACTIVITY) {
                $this->flashMessage('Uplynula doba neaktivity! Systém vás z bezpečnostných dôvodov odhlásil.', 'warning');
            }

            $backlink = $this->getApplication()->storeRequest();
            $this->redirect('Auth:login', array('backlink' => $backlink));

        } else {
            if (!$user->isAllowed($this->name, $this->action)) {
                $this->flashMessage('Na vstup do tejto sekcie nemáte dostatočné oprávnenia!', 'warning');
                $this->redirect('Default:');
            }
        }
    }
}
\--

Všimnite si, že metóda presmeruje pri nepovolenom prístupe na **Default:** a nie na **Auth:login** ako v **DefaultPresenter**i.

Pridajte aj dva nové chránené Presentery...

**app/AdminModule/presenters/PagePresenter.php**
/--php
<?php

namespace AdminModule;

final class PagePresenter extends SecuredPresenter
{

}
\--

**app/AdminModule/presenters/UserPresenter.php**
/--php
<?php

namespace AdminModule;

final class UserPresenter extends SecuredPresenter
{

}
\--

...a ich šablóny.

**app/AdminModule/templates/Page.default.latte**
/--
{block #title}Správa stránok :: {include #parent}{/block}


{block #content}
  <h1>Správa stránok</h1>
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce luctus tellus at odio fringilla in venenatis dolor aliquam.</p>
\--

**app/AdminModule/templates/User.default.latte**
/--
{block #title}Správa užívateľov :: {include #parent}{/block}


{block #content}
  <h1>Správa užívateľov</h1>
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce luctus tellus at odio fringilla in venenatis dolor aliquam.</p>
\--

Premažte zložku **temp/cache** a otestuje prístup na nové Presentery pomocou všetkých užívateľov. Odhláste administratora a prihláste sa napr. ako Betty
- email **betty@example.com**, heslo **pokus**
Bety má podľa ACL povolenie na pohyb po **DefaultPresenter**i a **PagePresenter**i. Nemá oprávnenie na vstup do **UserPresenter**a. Skúste klepnúť na jeho odkaz a uvidíte čo sa stane

[* acl-block-small.png *]:[* acl-block.png *]

Zapracoval ACL a Presenter ochránil pred nepovoleným vstupom neoprávenej role. Aplikácia je v tomto momente hotová, môžete si ju celú stiahnuť ako "archív .zip":http://files.nette.org/1262/nette-acl.zip (neobsahuje knižnice Nette Framework).

{{tags: tutorial}}

{{author: srigi|1860}}
