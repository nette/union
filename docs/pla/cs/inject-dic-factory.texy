Inject a DIC továrničky
******************

.[perex]
V článku se budeme zabývat tím, jak vytvářet spoustu stejných objektů (nebo alespoň jeden) s nějakými závislostmi.

.[tip]
Článek je psán pro vývojovou verzi `2.1-dev`

Mějme stránku, která bude obsahovat formulář. Tento formulář uživatel v administraci vyplní a odešle. Když formulář odešle, potřebujeme vytvořit hromadu emailů a rozeslat je všem uživatelům s tím co vyplnil. Takový jednoduchý mailing list.

/--php
class MailingPresenter extends BasePresenter
{
	protected function createComponentForm()
	{
		$form = new Nette\Application\UI\Form;
		$form->addTextarea('text');
		$form->addSubmit('send')
		$form->onSuccess[] = $this->sendEmails;
		return $form;
	}

	public function sendEmails($form)
	{
		$message = $form->values->text; // text zprávy
		// zpracování
	}
}
\--

Nette poskytuje pro práci s emaily třídu `Nette\Mail\Message`, kterou si nastavíme a pro každý email z databáze odešleme jednu zprávu. Zpracování by mohlo vypadat takto

/--php
	public function sendEmails($form)
	{
		$message = $form->values->text; // text zprávy
		foreach ($this->database->table('users') as $user) {
			$mail = new Nette\Mail\Message;
			$mail->setTo($user->email);
			$mail->setBody($message);
			$mail->send();
		}
	}
\--

Všechno funguje, emaily se posílají, vedení firmy je spokojené. Až do momentu, kdy je potřeba začít používat vlastní odesílací server, protože ten výchozí je hloupý a emaily z něj odeslané skončí ve spamu, protože jich posíláme moc.

Vlastní odesílací server nastavíme takto

/--php
$mailer = new Nette\Mail\SmtpMailer(array('host' => 'localhost', 'username' => 'Rimmer'));

$mail = new Nette\Mail\Message;
$mail->setMailer($mailer);
\--

.[note]
Co se týče maileru a zpráv, má nette "daleko chytřejší mechanismus":http://doc.nette.org/cs/configuring/nette-framework#toc-maily, jak tohle konfigurovat. Pro účely článku ho ale nepoužijeme, abychom přesně viděli jak věci fungují.

Jenže jeho přístupové údaje budeme chtít mít v konfigu. Co kdyby se změnily, tak ať nemusíme hledat kde všude je v aplikaci odesílání emailů. Doplníme tedy do odpovídajících sekcí v konfigu `app/config/config.neon` následující

/--neon
parameters:
	mailer:
		host: localhost
		username: Rimmer
		password: "nachystejte uzenáče"

services:
	mailer: Nette\Mail\SmtpMailer(%mailer%)
\--

Nyní máme nastavený a připravený mailer v "Dependency Injection Containeru":http://doc.nette.org/cs/configuring (dále jen DIC). Teď bychom ho ale potřebovali nějak dostat do presenteru.

Tady se nám docela hodí si vytvořit nějakou továrničku, co nám bude zprávy vytvářet, která by rovnou nastavovala mailer. Takže si ji takovou jednoduchou napíšeme

/--php
class MailingMessageFactory extends Nette\Object
{
	private $mailer;

	public function __construct(Nette\Mail\IMailer $mailer)
	{
		$this->mailer = $mailer;
	}

	public function create()
	{
		$message = new Nette\Mail\Message;
		$message->setMailer($this->mailer);
		return $message;
	}
}
\--

Tuhle továrničku si zaregistrujeme do DIC

/--neon
services:
	mailingMessageFactory: MailingMessageFactory(@mailer)
\--

Vyžádáme si ji v presenteru

/--php
class MailingPresenter extends BasePresenter
{
	/** @var MailingMessageFactory */
	private $mailingFactory;

	public function injectMailingFactory(MailingMessageFactory $mailingFactory)
	{
		$this->mailingFactory = $mailingFactory;
	}

	// ...
\--

A upravíme zpracování, aby používalo náši továrničku

/--php
	public function sendEmails($form)
	{
		$message = $form->values->text;
		foreach ($this->database->table('users') as $user) {
			$mail = $this->mailingFactory->create(); // tento řádek se změnil
			$mail->setTo($user->email);
			$mail->setBody($message);
			$mail->send();
		}
	}
\--

Celé to teď funguje tak, že do presenteru už se dostane jen jakási továrna, která nám vytvoří prázdný objekt `Message`. Nám už je ale jedno, jak se odesílá. To nastaví někdo jiný, v konfigu.


Trošku to vylepšíme
=====

Aplikace roste a továrniček máme hromady a hromady - na emaily, na komponenty, na formuláře... A nás už je nebaví psát! Vždyť je to pořád to stejné dokola! Co kdyby to za nás udělal Nette Framework?

Co je absolutní minimum, co potřebujeme, abychom si v presenteru mohli vyžádat nějakou továrničku? - Její interface. Napíšeme si tedy interface.

/--php
interface IMailingMessageFactory
{
	/** @return Nette\Mail\Message */
	function create();
}
\--

.[tip]
Metoda `create()` je konvence. Interface musí obsahovat pouze ji.

Pokud teď vše správně nastavíme, tak Nette dokáže samo vygenerovat třídu, která bude tento interface implementovat a bude vytvářet požadovaný objekt `Nette\Mail\Message` a klidně mu i nastaví mailer!

Slouží na to sekce `factories` v konfigu

/--neon
factories:
	mailingMessage:
		implement: IMailingMessageFactory
		setup:
			- setMailer(@mailer)
\--

Říkáme tady "vytvořit mi továrničku, která bude mít interface `IMailingMessageFactory` (abychom si ji mohli vyžádat v presenteru) a každému objektu, který vytvoří, nastav náš `mailer`."

.[tip]
Všechna nastavení v `setup` platí pro vytvářené objekty, nikoliv pro vygenerovanou továrničku.

V těchto továrničkách nemůže být bohužel žádná logika, pouze vytvoření objektu, nějaké zavolání metody, nebo předání jiné služby či parametru. Což přesně zde děláme - továrnička vytvoří objekt a nastaví mu jinou službu pomocí jeho metody.


Kompletní příklad
======

Po dokončení nyní máme tuto konfiguraci

/--neon
parameters:
	mailer:
		host: localhost
		username: Rimmer
		password: "nachystejte uzenáče"

services:
	mailer: Nette\Mail\SmtpMailer(%mailer%)

factories:
	mailingMessage:
		implement: IMailingMessageFactory
		setup:
			- setMailer(@mailer)
\--

Tento interface

/--php
interface IMailingMessageFactory
{
	/** @return Nette\Mail\Message */
	function create();
}
\--

A zjednodušený presenter

/--php
class MailingPresenter extends BasePresenter
{
	/** @var IMailingMessageFactory */
	private $mailingFactory;

	public function injectMailingFactory(IMailingMessageFactory $mailingFactory)
	{
		$this->mailingFactory = $mailingFactory;
	}

	protected function createComponentForm()
	{
		$form = new Nette\Application\UI\Form;
		$form->addTextarea('text');
		$form->addSubmit('send')
		$form->onSuccess[] = $this->sendEmails;
		return $form;
	}

	public function sendEmails($form)
	{
		$message = $form->values->text;
		foreach ($this->database->table('users') as $user) {
			$mail = $this->mailingFactory->create(); // tento řádek se změnil
			$mail->setTo($user->email);
			$mail->setBody($message);
			$mail->send();
		}
	}
}
\--

Nyní můžeme vesele měnit nastavení maileru a projeví se všude, kde bude využita naše továrnička. A to je vše, přátelé.

{{author: Filip Procházka|2118}}
