Jak helperu předat proměnné?
===

Pokud potřebujete helperu předat již existující proměnné, staticky definované hodnoty nebo data z databáze, můžete tak učinit pomocí anonymní funkce:

Pevný seznam
---

/--php
$genderTypes = array(
	'male' => 'muž',
	'female' => 'žena',
);

$this->template->registerHelper('gender', function($gender) use($genderTypes) {
	if (isset($genderTypes[$gender])) {
		return $genderTypes[$gender];
	}
	return 'pohlaví neznámé';
});
\--

Seznam položek z databáze
---

/--php
$categoryList = $this->models->categories->fetchAll();

$this->template->registerHelper('category', function($categoryId) use($categoryList) {
	if (isset($categoryList[$categoryId])) {
		return $categoryList[$categoryId];
	}
	return 'nezařazeno';
});
\--

Helper Loader
===

Dalším způsobem je napsání vlastního "helper loaderu":http://doc.nette.org/cs/templating#toc-helper-loader. Třídu můžete rozšiřovat a helpery v ní obsažené testovat a snáze přenášet do dalších projektů.

V následující ukázce jsou loaderu v duchu **Dependency Injection** předávány potřebné služby, které lze využít pro **přístup do databáze**, k **definovaným parametrům**, k **cestám do složek `temp`, `app`** apod. Náš loader bude poskytovat helper `profilePicture`, který z názvu souboru vrátí celou cestu k fotce, resp. k výchozímu obrázku "fotka nenalezena".

/--php
namespace App;

class Helpers extends Nette\Object
{
	/** @var string */
	private $wwwDir;

	/** @var Nette\Http\IRequest */
	private $httpRequest;

	public function __construct($wwwDir, Nette\Http\IRequest $httpRequest)
	{
		$this->wwwDir = $wwwDir;
		$this->httpRequest = $httpRequest;
	}

	/**
	 * Metoda, kterou zaregistrujeme jako callback
	 * v metodě $template->registerHelperLoader().
	 */
	public function loader($helper)
	{
		if (method_exists($this, $helper)) {
			return callback($this, $helper);
		}
	}

/* === Následují jednotlivé helpery === */

	/**
	 * Zobrazení profilovky
	 *
	 * <code>
	 * <img src="{'JohnDoe.jpg'|profilePicture}">
	 * </code>
	 *
	 * @param  string název souboru s fotkou
	 * @return string cesta k profilovce nebo defaultnímu obrázku
	 */
	public function profilePicture($fileName)
	{
		$basePath = $this->httpRequest->url->scriptPath;
		if (is_file($this->wwwDir . '/photos/' . $fileName)) { // má profilovku
			return $basePath . '/photos/' . $fileName;
		} else { // nemá profilovku
			return $basePath . '/photos/noPhoto.jpg';
		}
	}
}
\--

.[tip]
Pokud potřebujete v helperu funkcionalitu poskytovanou presenterem (např. **přesměrování**, **tvorbu odkazů** (`$presenter->link(...)`) a další), přidejte si do loaderu službu `@application`. Presenter bude v době renderování šablony dostupný přes `$application->getPresenter()`.

Jak jej registrovat?
---

Nejprve si loader zaregistrujeme jako službu v konfiguraci aplikace:

/--neon
common:
	services:
		myTemplateHelpers:
			factory: App\Helpers( %wwwDir%, @httpRequest )
\--

Následně jej musíme zaregistrovat v samotné instanci šablony, např. v `BasePresenter.php`. Provedeme to tak, že metodě `Template::registerHelperLoader()` předáme callback na naši metodu `loader()`.

/--php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	public function createTemplate($class = NULL)
	{
		$template = parent::createTemplate($class);
		$template->registerHelperLoader(callback(
			$this->context->myTemplateHelpers,
			'loader'
		));
		return $template;
	}
}
\--

{{tags: cookbook}}

{{author: Schmutzka|3194}}
