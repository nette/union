Načítání modelu a Dependency Injection
**************************************

.[perex]
Dynamické načítání modelů (modelLoader) nahrazuje v Nette 2.0 **Dependency Injection container** (v [konfiguračním souboru | doc:cs:configuring#toc-definice-sluzeb]), který nám vše usnadňuje. Výhodou řešení přes DI container je přehlednost a možnost [autowiringu | doc:cs:configuring#toc-auto-wiring].

.[note]
Návod využítá **Nette 2.0** a **NotORM**. Jak napojit databázi s *dibi* či *Nette Database* si můžete přečíst v [tomto návodu |nette-database-vs-dibi].


Konfigurujeme prostředí
===

Nejprve si v konfiguračním souboru config.neon nastavíme potřebné parametry a registrujeme službu database:
- parametry připojení k databázi (podsekce `database`)
- službu `database`

config.neon
---

/--neon
common:
	parameters:
		# parametry pro připojení k databázi
		database:
			driver: mysql
			hostn: local
			username: root
			password:
			dbname: database

	includes:
		- models.neon

	nette:
		database:
			default:
				dsn: "%database.driver%:host=%database.host%;dbname=%database.dbname%"
				user: %database.username%
				password: %database.password%
	services:
		cache:
			class: Nette\Caching\Cache
			arguments: [@cacheStorage, "myCache"]

		dbcache:
			class: NotORM_Cache_Include
			arguments: ["%tempDir%/notorm.cache"]

		database:
			class: NotORM(@\PDO, NULL, @dbcache)


production < common:

development < common:
\--

models.neon
---

Pro přehlednost a velké množství modelů je lepší vytvořit si samostatný soubor. O předávané parametry se starat nemusíme, to za nás udělá autowiring.

/--neon
services:
	models: Nette\DI\NestedAccessor(@container, "models")
	models.user: Models\User
	models.article: Models\Article
\--


Modely
===


Abychom nemuseli v každém našem modelu opakovat stejný kód, vytvoříme si abstraktního předka. Ten nám definuje obecené metody a přístup k databázi.


BaseModel.php
---

/--php

namespace Models;

class Base extends \Nette\Object
{
	/** @var \Notorm */
	protected $db;


	/** @var \Nette\Caching\Cache */
	protected $cache;


	/** @var string */
	private $tableName;


	// autowiring "nasaje" potřebné služby
	public function __construct(\NotORM $notorm, \Nette\Caching\Cache $cache)
	{
		$this->db = $notorm;
		$this->cache = $cache;

		// dle názvu modelu automaticky přistupujeme k tabulce (User => user)
		$classNameParts = explode('\\', get_class($this));
		$this->tableName =  lcfirst(array_pop($classNameParts));

	 	// někdy chceme přistupovat k víceslovným názvům tabulek (UserTag => user_tag)
		$alphabetRow = "";
		foreach(range("A", "Z") as $key) {
			$alphabetRow .= $key;
		}

		if(strpbrk($this->tableName, $alphabetRow)) {
			$replace = array();
			foreach(range("A", "Z") as $key) {
				$replace[$key] = "_".strtolower($key);
			}
			$this->tableName = strtr($this->tableName, $replace);
		}
	}

	// dále je vhodné definovat obecné metody, např. update, insert etc.
	// ty budou mít automaticky všechny následující modely
	// viz http://pla.nette.org/cs/jednoduchy-model-s-notorm-nette-2-0#toc-pohodlny-basemodel-php
}
\--

A konečně vytvoříme i vlastní model:

/--php
namespace Models;

class User extends Base
{
	/**
	 * Return user by name
	 * @param string
	 */
	public function getByName($name)
	{
		return $this->db->user("name", $name)->fetch();
	}
}
\--


Používáme
===

Nyní máme modely registrované jako služby a můžeme je vesele používat.


BasePresenter.php
---

Do `BasePresenteru` si přidáme zkratku, která nám **ušetří trochu psaní**: tedy místo `$this->context->models->pozadovanyModel` bude stačit `$this->models->pozadovanyModel`. Při neustálém používání modelů tuto zkratku oceníme.

/--php
/**
 * Models shortcut
 * @return SystemContainer_models
 */
public function getModels()
{
	return $this->context->models;
}
\--

.[note]
Nezpomeňte k funkci *getModels* doplnit anotaci **@return**, nebo se připravíte o možnost automatického napovídání ze SystemContaineru.

MyPresenter.php
---

/--php
$results = $this->models->user->getByName("Jan Novák");
\--

Jednoduché, že?

{{tags: nette 2.0, notorm, di}}

{{author: Schmutzka|3194}}
