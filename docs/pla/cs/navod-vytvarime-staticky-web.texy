Můj první web v Nette
***
Co budete potřebovat?
===
- loader.php z aktuální distribuce [Nette Frameworku|http://nette.org/cs/download]

Adresářová struktura
===
Je dobré si předem připravit adresářovou strukturu, kde bude Vaše aplikace sídlit a tu je vhodné logicky rozčlenit podle modelu Model-View-Controller (MVC). Takže pojďme se podívat, jak by to mohlo vypadat:
- Název aplikace (např.: neco.cz)
	- `/doc_root` (sídlo souboru `index.php`)
	- `/libs` (sdílené knihovny pro aplikaci - např.: Nette, dibi)
	- `/apps` (strom aplikace)

.[note]
Abychom mohli v naši první aplikaci využívat vymoženosti Nette Frameworku, budeme potřebovat soubor `loader.php`, který najdete v *.zip souboru distribučního balíčku Nette, který jsem si stáhli hned v úvodu. Po rozbalení vyhledejte adresář `Nette.minified` a soubor `loader.php` zkopírujte do adresáře `/libs`

Nyní dokončíme konfiguraci adresářové struktury. Do adresáře `/apps` přidáme složky:
- `presenters` (bude sloužit k ukládání aplikačních layerů)
- `templates` (bude sloužit k ukládání aplikačních šablon)
- `temp` (bude sloužit k ukládání dočasných souborů)

.[caution]
Adresář `/apps/temp` musí mít nastavena práva pro zápis z internetu

index.php
===
Nyní se podíváme na `index.php`, kde definujeme pouze cesty k aplikačním adresářům a to formou konstant. Po definici si na závěr vyžádáme "starter" aplikace - [#bootstrap.php]

/--php
<?php

//cesta k aplikace
define('WWW_DIR',dirname(__FILE__));

//cesta k aplikačním souborům
define('APP_DIR',WWW_DIR.'/../app');

//cesta k aplikačním knihovnam - typicky loader.php, dibi.min.php
define('LIB_DIR',WWW_DIR.'/../libs');

//starter aplikaci
require APP_DIR.'/bootstrap.php';

\--

.[note]
Při používání Nette Frameworku se doporučuje používat pouze úvodní tag pro php script. Uzavírací tag "?>" může působit problémy

bootstrap.php
===
Starter aplikace nám zavolá Nette Framework a rovněž si spustíme důležitého pomocníka - [Laděnku|http://guides.nette.org/cs/nette-debug]. Ta nám bude neustále nablízku a pomáhat nám řešit případné chyby při psaní kódu.

/--php
<?php
//Zavoláme si framework
require(LIB_DIR.'/loader.php');

//a pustíme si debuggovací službu - známou jako Laděnka
Debug::enable();

//spustíme aplikaci
$application = Environment::getApplication();
$application -> run();
\--

Takto vytvořený kód uložíme do adresáře `/apps`. Nyní si můžete zkusit spustit aplikaci [#index.php].

Ano, nastala chyba, kterou Vám už nyní obsluhuje a zachytává právě laděnka. Problém je samozřejmě v tom, že aplikace zatím nemá ani aplikační layer a ani šablonu, kterou by měl layer zavolat. Pojďme tedy dál.

Vytvoření základního Presenteru
===
`DefaultPresenter` je vlastně třída, která nám bude obsluhovat šablony a budou v ní umístěny metody šablon. Nyní ji ponecháme prázdnou. Nette ji v takovém případě zpracuje jako požadavek na zobrazení základní šablony - `/apps/templates/Default/default.phtml`. Všimněte si, že náš `DefaultPresenter` dědí vlastnosti z již přednastavené Nette třídy [Presenter|http://guides.nette.org/cs/nette-application-presenter]. Nemusí být nutně pojmenována `DefaultPresenter`, je to opět na Vás.

.[caution]
Při tvorbě názvu je třeba dodržovat tzv. velbloudí anotace, tzn. název třídy musí začínat velkým písmenem

/--php
<?php
class DefaultPresenter extends Presenter {

}
\--

Je ještě potřeba vytvořit adresář `presenters` pod složkou `/apps` a nyní uložíme do adresáře `/apps/presenters` tento script pod názvem `DefaultPresenter.php`.

Vytvoření základní šablony
===
Nyní musíme ještě presenteru vytvořit šablonu, se kterou bude komunikovat. Nette standardně očekává šablonu pro presenter `Default` a view `default` buď v adresáři `/apps/templates` pod názvem `Default.default.phtml`, nebo v adresáři `apps/templates/Default` pod názvem `default.phtml`.

/--html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Můj první web v Nette Frameworku</title>
</head>

<body>
<h1>Hello World,</h1>
<h2>I'm Nette Framework, your new friend.</h2>

</body>
</html>
\--

Teď už jen šablonu správně uložit. Máme tedy 2 možnosti:
- buď vytvoříme adresář `Default` v adresáři `/apps/templates` a do něj uložíme pod názvem `default.phtml`
- nebo můžeme všechny šablony ukládat pouze v adresáři `apps/templates`, ale pak je nutné dodržovat dvojité jméno pro soubor, v našem případě `Default.default.phtml`.

To je důležité, protože buď adresář `Default` nebo předpona souboru `Default` nám vlastně páruje tuto šablonu s `DefaultPresenter`em, který jsme si právě před malou chvílí vytvořili. V případě jiného pojmenování a nedodržení párování by došlo k chybě.

.[note]
V Nette se pro názvy šablon používá přípona *.phtml

Vytvoření menu
===
K vytvoření menu potřebujeme upravit náš `DefaultPresenter`, který servíruje data šabloně a tu naučit, jak má data z `DefaultPresenter`u vykreslit. Vytvoříme tedy novou metodu ve třídě `DefaultPreseneter` s názvem `renderDefault()`. Umístění do `DefaultPresenter`u je vhodné, protože předpokládáme, že stejné menu bude na každé stránce:

/--php
<?php
class DefaultPresenter extends Presenter{

	public function renderDefault(){
		$menuItems = array(
		'Home',
		'Data',
		'Contact'
		);

		//přiřazení dat pro šablonu
		$this->template->menuItems = $menuItems;
	}
}
?>
\--

a upravíme šablonu:
/--html
...

<title>Můj první web v Nette Frameworku</title>
</head>

<body>
<h1>Hello World,</h1>
<h2>I'm Nette Framework, your new friend.</h2>

Menu
<ul>
<?php foreach ($menuItems as $item){?>
<li><?php echo $item?></li>
<? }?>
</ul>

...
\--

Menu a namapování odkazů na šablony
===
Teď budeme potřebovat nastavit jednotlivé akce k položkám menu. To provedeme v šabloně `default.phtml`. Nejprve se podíváme, jak vypadá klasický odkaz a jak ho zapsat v Nette:

/--html
//takto by to vypadalo za starých časů
<a href="<?php echo $item?>"><?php echo $item?></a>

//a zápis v Nette
<a href="<?php echo $presenter->link('Default:menu')?>"><?php echo $item</a>
\--

.[note]
Nette Framework vnímá linky/odkazy jako pokyny k nějaké akci, přesněji řečeno kliknutím na odkaz spustíte nějakou funkci/metodu.
V praxi to znamená, že se vůbec nestaráte o URL odkazu, link totiž volá metodu a je tak na URL nezávislý

Náš nový kód v šabloně bude tedy následující:
/--html
...
<ul>
<?php foreach ($menuItems as $item){?>
<li><a href="<?php echo $presenter->link('Default:menu')?>"><?php echo $item?></a></li>
<? }?>
</ul>
...
\--
Co z tohoto zápisu můžeme vyčíst? Objevil se nám objekt `$presenter`, který je předáván frameworkem automaticky z presenteru, který je však třeba doplnit o metodu `renderMenu()` starající se o správné vyrenderování/spárování odkazů:

/--php
<?php
class DefaultPresenter extends Presenter{

	public function renderDefault(){
		$menuItems = array(
		'Home',
		'Data',
		'Contact'
		);

		//přiřazení dat pro šablonu
		$this->template->menuItems = $menuItems;
	}

	public function renderMenu($menu){

	}
}
?>
\--

.[caution]
Konstrukce Default:menu nám říká "zavolej DefaultPresenter a pouzij metodu renderMenu()"

Připojení CSS stylu k šabloně
===
Na chvilku si oddechneme a budeme se trochu věnovat grafice. Tzn. nastylujeme si již vytvořené položky v šabloně pomocí CSS. To by mohlo vypadat nějak takto:
/--css
h1 ,h2{
	font-family: "Palatino Linotype", "Book Antiqua", Palatino, serif;
	color: #06C;
}
li {
	list-style-type: none;
}
.menu a {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-style: italic;
	color: #060;
}
.menu a {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-style: italic;
	color: #060;
}
.menu a:hover {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-style: italic;
	color: #F00;
}

\--

... a uložíme tento styl do naší adresářové struktury. Umístění bude `/doc_root/css` a nazveme jej třeba `some.css`.

Nyní připojíme tento styl k naší šabloně. Využijeme k tomu další zabudované Nette proměnné `$baseUri`. Provedeme následující zápis, který netřeba komentovat.

/--html
<head>
...
<link href="<?php echo $baseUri?>css/some.css" rel="stylesheet" type="text/css" />
...
</head>

\--

Vytvoření cílových šablon pro menu
===
Nejprve se vrátíme k naší původní šabloně a tady bych zmínil, že v šablonách lze využívat tzv. [filtry|http://guides.nette.org/cs/template-filters], které nám usnandní a zpřehlední psaní kódu.
Pojďme se podívat na praktickou ukázku jak zapsat naše odkazy:
/--html
//původní zápis
<a href="<?php echo $presenter->link('Default:menu')?>"><?php echo $item?></a>

//nový zápis s "code beautiferem" neboli LatteFilterem
<a href="{plink Default:menu}">{$item}</a>
\--

Jak se Vám to líbí? ...mně poměrně dost :-) A navíc můžeme zápis ještě zjednodušit, pokud odkazujeme na rodičovský presenter, což je v tuto chvíli splněno, můžeme zapsat:
/--html
<a href="{plink $item}">{$item}</a>
\--

a pokud se odkazujeme i na stejnou šablonu, použijeme klíčové slovo this, takže náš výsledný kód by pak vypadal takto:
/--html
{foreach $menuItems as $item}
<li><a href="{plink this}">{$item}</a></li>
{/foreach}
\--

Dále se podíváme na položky layout, které by se nám mohly v budoucnu dynamicky měnit, to bude zcela jistě Nadpis stránky, čili upravíme:
/--html
//původní fragment
<h1>Hello World</h1>

//upravený zapís pro vložení dynamické hodnoty
<h1>{include $title}</h1>
\--
Takto upravený soubor si uložíme do `/apps/templates` pod názvem `@layout.phtml` a to bude zároveň praotec pro další pohledy tzv. views a nic nám nebrání vytvořit šablony pro další pohledy.

{{tags: tutorial}}

{{author: 22|2651}}
