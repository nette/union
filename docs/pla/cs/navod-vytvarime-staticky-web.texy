Statický web v Nette
***
.[perex]
Tento tutorial vám předvede, jak v Nette udělat jednoduchý web o 3 stránkách s jednoduchým menu pro jeho ovládání.

Co budete potřebovat?
===
- `loader.php` z aktuální distribuce [Nette Frameworku|http://nette.org/cs/download]

Co se naučíte?
===
- pracovat se skeletonem (adresářovou strukturou aplikace)
- seznámíte se s obsahem životně důležitých souborů [#index.php] a [#bootstrap.php]
- vytvořit Presentery a šablony aplikace
- vytvořit jednoduché menu a přiřadit k němu odkazy
- připojit CSS styly k aplikaci
- vytvořit jednoduchý statický web, který lze pak jednoduše změnit na [dynamický|neexistuje-zatim]

Adresářová struktura
===
Je dobré si předem připravit adresářovou strukturu, kde bude Vaše aplikace sídlit a tu je vhodné logicky rozčlenit podle modelu [Model-View-Controller (MVC)|http://guides.nette.org/cs/model-view-presenter]. S tím si nemusíte ale lámat hlavu, protože v distribučním balíčku najdete adresář `tools`, kde je již připravený [skeleton|http://guides.nette.org/cs/quickstart/adresarova-struktura] pro naši budoucí aplikaci.

.[tip]
Více o doporučené adresářové struktuře najdete v [2. kapitole QuickStartu|http://guides.nette.org/cs/quickstart/adresarova-struktura]. Doporučuji si ji prostudovat, protože my tento skeleton použijeme jako výchozí bod našeho tutorialu

Překopírujte tedy připravený obsah adresáře `skeleton` do připravené složky nebo zkopírujte celou složku `skeleton` do vašeho webového prostoru a pak přejmenujte, jak uznáte za vhodné. My si adresář pojmenujeme třeba `netteweb`.

Pojďme se podívat blíže do struktury skeletonu, nyní `netteweb` (ke stažení na konci stránky), na adresáře, které nás budou zajímat:
/--
+--documnet_root/ (kořen aplikaci, např.: index.php)
+--libs/ (knihovny aplikace jako např.: loader.php, dibi.min.php)
    +--Nette/
        +--loader.php (minimalizovaný Nette Framework)
+--`app/ (výkonné soubory aplikace, např.: bootstrap.php, config.ini)
    +-- log/ (errorlogy)
    +-- presenters/ (definice aplikačního layeru)
    +-- templates/ (aplikační šablony)
    +-- temp/ (bude sloužit k ukládání dočasných souborů)
\--

.[caution]
Abychom mohli v naši první aplikaci využívat vymoženosti Nette Frameworku, budeme potřebovat soubor `loader.php`, který najdete v *.zip souboru distribučního balíčku Nette, který jsem si stáhli hned v úvodu. Po rozbalení vyhledejte adresář `Nette.minified` a soubor `loader.php` zkopírujte do adresáře `Nette` v adresáři `libs`. Celá cesta bude `libs/Nette/loader.php`

.[caution]
Adresář `app/temp` a `app/log` musí mít správně nastavena práva pro zápis (777)

index.php
===
Nyní se podíváme na `index.php`, kde definujeme pouze cesty k aplikačním adresářům a to formou konstant. Po definici si na závěr vyžádáme "starter" aplikace - [#bootstrap.php]

cesta k souboru: `document_root/index.php`
/--php
<?php

//cesta k aplikace
define('WWW_DIR', dirname(__FILE__));

//cesta k aplikačním souborům
define('APP_DIR', WWW_DIR . '/../app');

//cesta k aplikačním knihovnam - typicky loader.php, dibi.min.php
define('LIBS_DIR', WWW_DIR . '/../libs');

//starter aplikaci
require APP_DIR . '/bootstrap.php';

\--
Soubor uložte, respektive přepište stávající předinstalovaný ve skeletonu.

.[note]
Při používání Nette Frameworku se doporučuje používat pouze úvodní tag pro php script. Uzavírací tag "?>" může působit problémy

bootstrap.php
===
Starter aplikace nám zavolá Nette Framework a rovněž si spustíme důležitého pomocníka - [Laděnku|http://guides.nette.org/cs/nette-debug]. Ta nám bude neustále nablízku a pomáhat nám řešit případné chyby při psaní kódu.

cesta k souboru: `app/bootstrap.php`
/--php
<?php
//Zavoláme si framework
require LIBS_DIR . '/Nette/loader.php';

//a pustíme si debuggovací službu - známou jako Laděnka
Debug::enable();

//Náhrání konfigurace
Environment::loadConfig();

//Nastavení
$application = Environment::getApplication();
$application->errorPresenter = 'Error';

//Nastavení routeru
$router = $application->getRouter();

//router pro mod rewrite
$router[] = new Route('index.php', array(
	'presenter' => 'HomePage',
	'action' => 'default',
), Route::ONE_WAY);

$router[] = new Route('<presenter>/<action>/<id>', array(
	'presenter' => 'HomePage',
	'action' => 'default',
	'id' => NULL,
));

//router BEZ mod rewrite
/*
$router[] = new SimpleRouter(array(
	'presenter' => 'HomePage',
	'action' => 'default',
), Route::ONE_WAY);
*/

//Start aplikace
$application->run();
\--
Pro zajímavost si také prohlédněte soubor `config.ini` umístěný v adresáři `app` a [mrkněte|http://guides.nette.org/cs/nette-environment], k čemu je dobrý. Rovněž bude pro budoucnost dobré se seznámit s [routováním|http://guides.nette.org/cs/routovani], které jsme rovněž tímto scriptem nastavili.
Takto vytvořený kód uložíme do adresáře `app`. Nyní si můžete zkusit spustit aplikaci [#index.php].

[* scr2.png *] *** Pokud vás prohlížeč zobrazil uvedenou obrazovku, je vše v pořádku a můžeme se pustit do našeho webu.
V opačném případě zkuste [FAQ|http://wiki.nette.org/cs/faq] nebo [forum|http://forum.nette.org/cs/]

Vytvoření základního Presenteru (Controlleru)
===
V první řade je potřeba se seznámit s procesem návrhu [Presenter/View(Action)|http://phpfashion.com/navrh-struktury-presenters-views] a životním cyklem [Presenteru|http://guides.nette.org/cs/nette-application-presenter] v Nette aplikaci.
My se tedy budeme držet modelu, kdy si pro každou stránku vytvoříme vlastní Presenter, protože tušíme, že naše webová prezentace se bude v budoucnu rozšiřovat. Tomu však předchází vytvoření abstraktního Presenteru. Pokud je vše jasné, vytvoříme ho - `BasePresenter.php`. Je to základní stavební kámen pro ostatní Presentery. Normálně se v něm nachází metody `startup()`, `beforeRender()` atd. My pro náš jednoduchý web nebudeme nic z toho potřebovat, takže bude vypadat takto:

cesta k souboru: `app/preseneters/BasePresenter.php`
/--php
<?php
abstract class BasePresenter extends Presenter
{
	//prepínac zoabrazení šablon
	public $oldLayoutMode = FALSE;
}
\--

Náš web bude mít 3 stránky s menu: `Domů | Nabídka | Kontakt` a budeme tedy potřebovat 3 Presentery a to: `HomePagePresenter.php`, `ProductPresenter.php`, `ContactPresenter.php`. My si ukážeme, jak udělat HomePagePresenter.php a další 2 už zvládnete sami.

HomePagePresenter bude vypadat takto:

cesta k souboru: `app/preseneters/HomePagePresenter.php`
/--php
<?php
class HomePagePresenter extends BasePresenter
{

}
\--

Co je zde důležité? Třida HomePagePresenter, tím, že je definována, automaticky hledá šablony `@layout.phtml` a `/HomePage/default.phtml`

.[caution]
Při tvorbě názvu je třeba dodržovat tzv. velbloudí notaci, tzn. název třídy musí začínat velkým písmenem

Vytvoření základní šablony (@layout.phtml)
===
Nette Framework hledá vždy základní šablonu v umístění `app/templates/` pod názvem `@layout.phtml`. Je to výchozí šablona, do které se pak nahrávají další podšablony/bloky.
Takže pokud máme vytvořenou nějakou obecnou/grafickou šablonu, stačí je přejmenovat, správně umístit a Nette se postará o její zobrazení.

Aby tato šablona měla praktický význam a mohla spolupracovat s ostatními, musíme jí vyznačit místa, kde se bude vykreslovat a kam se vloží obsah jiné šablony, případně šablon.
V šablonách lze používat i různé filtry a teď právě nastala vhodná chvíle pro využití  [filtru Latte|http://guides.nette.org/cs/template-filters], díky němuž se nám zjednoduší a zpřehlední zápis PHP kódu. Následující script Vám ukáže, jak označit místa, kam se bude vkládat obsah jiných šablon a jak vypadá zápis s využitím filtru Latte:

cesta k souboru: `app/templates/@layout.phtml`
/--html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

	<meta name="description" content="Nette Framework web application skeleton">
	<meta name="robots" content="{$robots}" n:ifset="$robots">
	<!--vložení bloku title-->
	{include #title}

<body>
<div id="header">
	<h1>Nette Fabrika, s.r.o.</h1>

	<h2>Otevřeli jsme továrnu na sny...</h2>
</div>
	<!--vložení bloku content-->
	{include #content}

</body>
</html>
\--

Nyní musíme ještě vytvořit šablonu pro HomePagePresenter a další 2 presentery, které jste vytvořili již samostatně. Pro tento Presenter Nette očekává šablonu v adresáři `app/templates/HomePage` pod názvem `default.phtml`. Tady je její podoba:

cesta k souboru: `app/templates/HomePage/default.phtml`
/--html
{block title}
<title>Nette Fabrika, s.r.o. - Úvod</title>
{/block}
{block content}
<div>
<p>Vítejte v Nette Fabrice!</p>
</div>
{/block}
\--

To je důležité, protože název adresáře `HomePage` nám vlastně páruje tuto šablonu s `HomePagePresenterem`, který jsme si právě před malou chvílí vytvořili. V případě jiného pojmenování a nedodržení párování by došlo k chybě. Stejný problém vznikne, pokud pojmenujeme šablonu jinak, než `default.phtml`.

.[note]
V Nette se pro názvy šablon používá přípona *.phtml

Vytvoření menu
===
K vytvoření menu upravíme šablonu `@layout.phtml` v místě, kde menu chceme mít zobrazené:

cesta k souboru: `app/templates/@layout.phtml`
/--html
<ul>
{foreach $menuItems as $id => $item}
	<li>{$item}</li>
{/foreach}
</ul>
\--
Tím je to hotové a teď musíme v BasePresenteru nachystat data pro proměnnou `$menuItems`.

cesta k souboru: `app/presenters/BasePresenter.php`
/--php
<?php
abstract class BasePresenter extends Presenter
{
	// přepínač zobrazení šablon
	public $oldLayoutMode = FALSE;

	public function beforeRender()
	{
		$this->template->menuItems = array(
			'HomePage:' => 'Domů',
		 	'Products:' => 'Produkty',
			'Contact:' => 'Kontakty',
		);
	}
}
\--
Definici proměnné je třeba umístit do metody beforeRender(), aby byla dostupná pro všechny view.

Doplnění odkazů z menu
===
.[note]
Nette Framework vnímá linky/odkazy jako pokyny k nějaké akci, přesněji řečeno kliknutím na odkaz spustíte nějakou funkci/metodu.
V praxi to znamená, že se vůbec nestaráte o URL odkazu, link totiž volá metodu a je tak na URL nezávislý

My jednoduše upravíme šablonu `@layout.phtml` s použitím filtru Latte a zjednodušeným zápisem `{plink ...}`:

cesta k souboru: `app/presenters/@layout.phtml.phtml`
/--html
{foreach $menuItems as $id => $item}
	<li><a href="{plink $id}">{$item}</a></li>
{/foreach}
\--

Připojení CSS stylu k šabloně
===
Na chvilku si oddechneme a budeme se trochu věnovat grafice. Tzn. nastylujeme si již vytvořené položky v šabloně pomocí CSS. Můžete použít připravený styl v zazipované aplikaci (dole na stránce) a umístit je do `document_root/css/screen.css`
Nyní připojíme tento styl k naší šabloně. Využijeme k tomu zabudované Nette proměnné `$basePath`. Provedeme následující zápis v základní šabloně, který netřeba komentovat.

cesta k souboru: `document_root/templates/@layout.phtml`
/--html
<head>
...
<link href="{$basePath}/css/screen.css" rel="stylesheet" type="text/css" />
...
</head>
\--

Dokončení webu
===
Tímto je web téměř hotový... Na závěr ještě zvyrazníme menu pro stránku, na které se nacházíme:

cesta k souboru: `document_root/templates/@layout.phtml`
/--html
<li {ifCurrent $id}class="current"{/if}><a href="{plink $id}">{$item}</a></li>
\--

.[download]
{{attachment: netteweb.zip}}

{{tags: tutorial}}

{{author: 22|2651}}
