Můj první web v Nette
***
Co budete potřebovat?
===
- loader.php z aktuální distribuce [Nette Frameworku|http://nette.org/cs/download]

Adresářová struktura
===
Je dobré si předem připravit adresářovou strukturu, kde bude Vaše aplikace sídlit a tu je vhodné logicky rozčlenit podle modelu Model-View-Controller (MVC). Takže pojďme se podívat, jak by to mohlo vypdat:
- Název aplikace (např.: neco.cz)
	- /doc_root (sídlo souboru index.php)
	- /libs (sdílené knihovny pro aplikaci - např.: Nette, dibi)
	- /apps (strom aplikace)

.[note]
Abychom mohli v naši první aplikaci využívat vymoženosti Nette frameworku, budeme potřebovat soubor loader.php, který najdete v *.zip souboru distribučního balíčku Nette, který jsem si stáhli hned v úvodu. Po rozbalení vyhledejte adresář Nette.miniffied a soubor loader.php zkopírujte do adresáře /libs

Nyní dokončíme konfiguraci adresářové struktury. Do adresáře /apps přídáme položky:
- presenters (bude sloužit k ukládání aplikačních layerů)
- templates (bude sloužit k ukládání aplikačních šablon)
- temp (bude sloužit k ukládání dočasných souborů)

.[caution]
Adresář /TEMP musí mít nastavena práva pro zápis z internetu

index.php
===
Nyní se podíváme na index.php, kde definujeme pouze cesty k aplikačním adresářům a to formou konstant. Po definici si na závěr vyžádame "starter" aplikace - [#bootstrap.php]
/--php
<?php

//cesta k aplikace
define('WWW_DIR',dirname(__FILE__));

//cesta k aplikačním souborům
define('APP_DIR',WWW_DIR.'/../app');

//cesta k aplikačním knihovnam - typicky loader.php, dibi.min.php
define('LIB_DIR',WWW_DIR.'/../libs');

//starter aplikaci
require APP_DIR.'/bootstrap.php';

\--

.[note]
Při používání Nette frameworku se doporučuje používat pouze uvodní tag pro php script. Uzavírací tag "?>" může působit problémy

bootstrap.php
===
Starter aplikace nám zavolá Nette framework a rovněž si spustíme důležitého pomocníka - [Laděnku|http://guides.nette.org/cs/nette-debug]. Ta nám bude neustále nablízku a pomáhat nám řešit případné chyby při psaní kódu.

/--php
<?php
//Zavoláme si framework
require(LIB_DIR.'/loader.php');

//a pustíme si debugovací službu - známou jako Laděnka
Debug::enable();

//spustíme aplikaci
$application = Environment::getApplication();
$application -> run();
\--

Takto vytvořený kód uložíme do adresáře /apps. Nyní si můžete zkusit spustit aplikaci [#index.php].

Ano, nastala chyba, kterou Vám už nyní obsluhuje a zachytává právě laděnka. Problém je samozřejmě v tom, že aplikace zatím nemá ani aplikační layer a ani šablonu, kterou by měl layer zavolat. Pojďme tedy dál.

Vytvoření základního Presenteru
===
DefaultPresenter je vlastně třída, která nám bude obsluhovat šablony a budou vní umístěny metody šablon. Nyní ji ponecháme prázdnou. Nette ji v takovém případě zpracuje jako požadavek na zobrazení základní šablony - Default.phtml. Všimněte si, že náš DefaultPresenter dědí vlastnosti z již přednastavené Nette třídy [Presenter|http://guides.nette.org/cs/nette-application-presenter]. Nemusí být nutně pojmenována DefaultPresenter, je to opět na Vás.

.[caution]
Při tvorbě názvu je třeba dodržovat tzv. velbloudí anotace, tzn. název třídy musí začínat velkým písmenem

/--php
<?php
class DefaultPresenter extends Presenter {

}
\--
Je ještě potřeba vytvořit adresář /presenters pod ložkou /apps a nyní uložíme do adresáře /apps/presenters tento script pod názvem DefaultPresenter.php.

Vytvoření základní šablony
===
Nyní musíme ještě presenteru vytvořit šablonu, se kterou bude komunikovat. Nette standardně očekává šablonu Default.phtml, kterou očekává buď v adresáři /templates nebo /templates/default.
/--html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Můj první web v Nette Frameworku</title>
</head>

<body>
<h1>Hello World,</h1>
<h2>I'm Nette Framework, your new friend.</h2>

</body>
</html>
\--

Teď už jen šablonu správně uložit. Máme tedy 2 možnosti:
- buď vytvoříme adresář /default v adresáři /templates a sem uložíme pod názvem default.phtml
- nebo můžeme všechny šabloby ukládat pouze v adresáři /templates, ale pak je nutné dodržovat dvojité jméno pro soubor, v našem případě default.deafault.phtml.

To je důležité, protože buď adresář /default nebo předpona souboru default nám vlastně páruje tuto šablonu s DeafaultPresenterem, kde jsme si právě před malou chvílí vytvořili třídu DefaulPresenter. V případě jiného pojmenování a nedodržení párování by došlo k chybě.

.[note]
V architektuře MVC se pro názvy šablon používá přípona *.phtml

Vytvoření menu
===
K vytvoření menu potřebujeme upravit náš DefaultPresenter, ktery servíruje data šabloně a tu naučit, ja má data z DefaultPresenteru vykreslit. Vyrvoříme tedy novou metodu DefaultPreseneteru s názvem renderDefault(). Umístění do DefaultPresenteru je vhodné, protože předpokládáme, že stejné menu bude na každé sránce:
/--php
<?php
class DefaultPresenter extends Presenter{

	public function renderDefault(){
		$menuItems = array(
		'Home',
		'Data',
		'Contact'
		);

		//přiřazení dat pro šablonu
		$this->template->menuItems = $menuItems;
	}
}
?>
\--
a upavíme šablonu:
/--html
...

<title>Můj první web v Nette Frameworku</title>
</head>

<body>
<h1>Hello World,</h1>
<h2>I'm Nette Framework, your new friend.</h2>

Menu
<ul>
<?php foreach ($menuItems as $item){?>
<li><?php echo $item?></li>
<? }?>
</ul>

...
\--

Menu a namapování odkazů na šablony
===
Teď budeme potřebovat nastavit jednotlivé akce k položkám menu. To provedeme v šabloně Default.phtml. Nejprve se podíváme, jak vypadá klasický odkaz a jak ho zapsat v Nette:

/--html
//takto by to vypadalo za starých časů
<a href="<?php echo $item?>"><?php echo $item?></a>

//a zápis v Nette
<a href="<?php echo $presenter->link('Default:menu')?>"><?php echo $item</a>
\--

.[note]
Nette Framweork vnímá linky/odkazy jako pokyny k nějaké akci, přesněji řečeno kliknutím na odkaz spustíte nějakou funkci/metodu.
V praxi to znamená, že se vůbec nestaráte o URL odkazu, link totiž volá metodu a je tak na URL nezávislý

Náš nový kód v šabloně bude tedy následující:
/--html
...
<ul>
<?php foreach ($menuItems as $item){?>
<li><a href="<?php echo $presenter->link('Default:menu')?>"><?php echo $item?></a></li>
<? }?>
</ul>
...
\--
Co z tohoto zápisu můžeme vyčíst? Objevila se nám objekt $presenter, který je předávána frameworkem automaticky z presenteru, který je však třeba doplnit o metodu renderMenu() starající se o správné vyrendrování/spárování odkazů:

/--php
<?php
class DefaultPresenter extends Presenter{

	public function renderDefault(){
		$menuItems = array(
		'Home',
		'Data',
		'Contact'
		);

		//přiřazení dat pro šablonu
		$this->template->menuItems = $menuItems;
	}

	public function renderMenu($menu){

	}
}
?>
\--

.[caution]
Konstrukce Default:menu nám říká "zavolej DefaultPresenter a pouzij metodu renderMenu()"
Připojení CSS stylu k šabloně
===
Na chvliku si oddechneme a budeme se trochu věnovat grafice. Tzn. nastylujeme si již vytvořené položky v šabloně pomocí CSS. To by mohlo vypadat nějak takto:
/--css
h1 ,h2{
	font-family: "Palatino Linotype", "Book Antiqua", Palatino, serif;
	color: #06C;
}
li {
	list-style-type: none;
}
.menu a {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-style: italic;
	color: #060;
}
.menu a {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-style: italic;
	color: #060;
}
.menu a:hover {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-style: italic;
	color: #F00;
}

\--

... a uložíme tento styl do naší adresářové struktury. Umístění bude /doc_root/css/ a nazveme jej třeba some.css

Nyní připojíme tento styl k naší šabloně. Využijeme k tomu další zabudované Nette proměnné $baseUri. Provedeme následující zápis, který netřeba komentovat.

/--html
<head>
...
<link href="<?php echo $baseUri?>css/fepo.css" rel="stylesheet" type="text/css" />
...
</head>

\--

Vytvoření cílových šablon pro menu
===
Nejprve se vrátíme k naší původní šabloně a tady bych zmínil, že v šablonách lze využívat tzv. [filtry|http://guides.nette.org/cs/template-filters], které nám usnandní a zpřehlední psaní kódu.
Pojďme se podívat na praktickou ukázku jak zapsat naše odkazy:
/--html
//původní zápis
<a href="<?php echo $presenter->link('Default:menu')?>"><?php echo $item?></a>

//nový zápis s "code beautiferem" neboli CurlyBracketsFilterem
<a href="{plink Default:menu}">{$item}</a>
\--

Jak se Vám to líbí? ...mně poměrně dost :-) A navíc můžeme zápis ješte zjednodušit, pokud odkazujeme na rodičovský presenter, což je v tuto chvíli splněno, můžeme zapsat:
/--html
<a href="{plink $item}">{$item}</a>
\--

a pokud se odkazujeme i na stejnou šablonu, použijeme klíčové slovo this, takže náš vysledný kód by pak vypdal takto:
/--html
{foreach $menuItems as $item}
<li><a href="{plink this}">{$item}</a></li>
{/foreach}
\--

Dále se podíváme na položky layout, které by se nám mohly v budoucnu dynmicky měnit, to bude zcela jistě Nadpis stránky, čili upravíme:
/--html
//původní fragment
<h1>Hello World</h1>

//upravený zapís pro vložení dynamické hodnoty
<h1>{include $title}</h1>
\--
Takto upravený soubor si uložíme do /templates pod názvem @layout.phtml a to bude zároveň praotec pro další pohledy tzv. views a nic nám nebrání vytvořit šablony pro další pohledy.

{{tags: tutorial}}

{{author: 22|2651}}
