Jednodnuchý model pro NotORM v Nette 2.0
********

- "Návod pro starší verzi":http://wiki.nette.org/cs/cookbook/jednoduchy-model-s-notorm

Instalace
===

config.neon
---

/--
parameters:
	database:
		driver: mysql
		host: mysql
		dbname: // ...
		username: // ...
		password: // ...


services:
	database:
		factory: NotormLoader::createNotorm(@pdo, %tempDir%)

	pdo: # pro úkony, které NotORM nezvládne
		factory: NotormLoader::createPDO(%database%)

	modelLoader:
		class: ModelLoader
		arguments: [@database, @pdo, @cache] # cache opět volitelná
\--


Models/ModelLoader.php
---

/--php
use Nette\DI\Container;

/**
 * Service for Model loading & database connection
 */
final class ModelLoader
{

	/** @var Models pool */
	private $models = array();

	/** @var Notorm*/
	private $connection;

	/** @var PDO */
	private $pdo;

	/** @var Cache */
	private $cache;


	public function __construct($connection, $pdo, $cache)
	{
		$this->connection = $connection;
		$this->pdo = $pdo;
		$this->cache = $cache;
	}


	/**
	 * getModel shortcut
	 * @param string
	 * @return mixed
	 */
	public function __get($name)
	{
		if($name != "connection") {
			return $this->getModel($name);
		}
	}


	/**
	 * Return required Model. Instantiate if not in pool.
	 * @param string
	 * @return mixed
	 */
	public function getModel($name)
	{
		$lname = strtolower($name);

		if(!isset($this->models[$lname])) {
			$class = 'Models\\' . ucfirst($name);

			if(!class_exists($class)) {
				throw new \InvalidArgumentException("Model '$class' not found");
			}

			$this->models[$lname] = new $class($this->connection, $this->pdo, $this->cache);
		}

		return $this->models[$lname];
	}

}
\--

Models/NotormLoader.php
---

/--php
use Nette\DI\Container,
    Nette\Diagnostics\Debugger,
    PDO,
    NotORM,
    NotORM_Structure_Convention,
	NotORM_Cache_Include,
	Models\Panel;

/**
 * Service for Database connection
 */
final class NotormLoader
{

	/**
	 * Connects to DB
	 * @param \PDO
	 * @param string tempDir
	 * @return NotORM
	 */
	public static function createNotorm($pdo, $tempDir) // tady by bohatě stačily parametry database
	{
		$dbCache = new NotORM_Cache_Include($tempDir."/notorm.cache");
		$notorm = new NotORM($pdo, new NotORM_Structure_Convention("id"), $dbCache);

		$panel = Panel::getInstance();
		Debugger::addPanel($panel);

		$notorm->debug = function($query, $parameters) {
			Panel::getInstance()->logQuery($query, $parameters);
		};

		return $notorm;
	}


	/**
	 * Activates PDO
	 * @param array connection info
	 * @return PDO
	 */
	public static function createPDO($db) // tady by bohatě stačily parametry database
	{
		$dsn = (isset($db['port']))
			? "$db[driver]:host=$db[host];dbname=$db[dbname];port=$db[port]"
			: "$db[driver]:host=$db[host];dbname=$db[dbname]";

		$pdo = new PDO($dsn, $db['username'], $db['password']);
		$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		$pdo->query('SET NAMES utf8');

		return $pdo;
	}

}
\--

Použití
===

V BasePresenter.php:
/--php
/**
 * Model loader
 */
final public function getModels() {
	return $this->context->modelLoader;
}
\--

Pak už můžeme rovnou aplikovat:
/--php
$this->models->user->insert($data);
// třída Models\User, metoda insert
\--

Pohodlný BaseModel.php
===

Jelikož všechny modely dědí od *BaseModel*, je vhodné v něm definovat všechny základní funkce. Tuto část berte spíše jako inspirační. Každý sám má chuť/potřebu napsat vlastní *BaseModel.php*

/--php
namespace Models;

class Base extends \Nette\Object
{
	/** @var \Notorm */
	private $notorm;

	/** @var \Cache */
	private $cache;

	/** @var \Pdo */
	private $pdo;

	/** @var string */
	protected $tableName;


	public function __construct($notorm, $pdo, $cache)
	{
		$this->notorm = $notorm;
		$this->cache = $cache;
		$this->pdo = $pdo;

		$classNameParts = explode('\\', get_class($this));
		$this->tableName = strtolower((array_pop($classNameParts)));
	}


	/**
	 * Database connection
  	 * @return NotORM
    	 */
	final public function db()
	{
		return $this->notorm;
	}


	/**
	 * PDO for other queries
	 * @return PDO
	 */
	final public function getPdo($query)
	{
		return $this->pdo->query($query);
	}


	/**
	 * Retun records by condition
	 * @param string
	 * @param string
	 */
	public function all($column = NULL, $value = NULL)
	{
		if(is_array($column)) { // array where
			return $this->notorm->{$this->tableName}($column);
		}
		elseif($column AND $value) { // 1 column condition
			return $this->notorm->{$this->tableName}($column,$value);
		}
		else { // no condition
			return $this->notorm->{$this->tableName};
		}
	}


	/**
	 * Insert record
	 * @param array/object ArrayHash
	 * @param string
	 */
	public function insert($array, $returnColumn = "id")
	{
		$array = (array) $array; // NotORM array strict
		$row = $this->notorm->{$this->tableName}()->insert($array);
		if($returnColumn) {
			return $row[$returnColumn];
		}
		else {
			return $row;
		}
	}

	// ...

	/**
	 * Fetch single
	 * @param array
	 * @param string
	 * @return mixed
	 */
	public function fetchSingle($where, $column)
	{
		return $this->notorm->{$this->tableName}->where($where)->fetchSingle($column);
	}

}
\--




2D0
===
- Notorm_Row
- Notorm_Cache
- ...

{{tags: cookbook}}

{{author: Schmutzka|3194}}
