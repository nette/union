Dynamické načítání modelů
*************************

Poslední dobou se často objevují dotazy jak v Nette pracovat s modely - jak je vytvářet a načítat. Pojďme si *uvařit* jednoduché řešení využívající tzv. model loader, který dynamicky načítá modely až při prvním  použití. Využijeme při tom "Dependency Injection"((Nette\DI)) a "Dibi"((lze snadno vyměnit za Nette\Database)).
.[perex]

Je vyžadováno Nette od commitu "d97e7d47":https://github.com/nette/nette/commit/d97e7d47 z 1. července 2011 a novější. .[note]

V Nette 2.0.x a novějším je preferovaná cesta načítání modelů přímo přes [Dependency Injection container | doc:cs:dependency-injection] (v [konfiguračním souboru | doc:cs:configuring#toc-definice-sluzeb]) bez použití model loaderu. Výhodou řešení přes DI container je přehlednost a možnost [autowiringu | doc:cs:configuring#toc-auto-wiring].  .[warning]


Tento článek úmyslně nebyl aktualizován pro stable verzi Nette 2.0.x. V blízké době bude nahrazen verzí využívající preferované cesty pomocí DI containeru. .[warning]


Konfigurujeme prostředí
=======================

Nejprve si v konfiguračním souboru config.neon nastavíme potřebné parametry, jedná se o:
- parametry připojení k databázi (podsekce `database`)
- parametry pro modely, které mohou použít, např. salt pro hashování apod. (podsekce models)
- službu `database`
- službu `modelLoader`

Náš konfigurační soubor bude tedy vypadat takto:
/--
common:
	php:
		date.timezone: Europe/Prague

	#parametry pro připojení k databázi
	database:
		hostname: local
		username: root
		password:
		database: foo
		charset: utf8

	#parametry pro modely
	models:
		foo: bar

	services:
		robotLoader:
			run: true
		database:
			class: DibiConnection
			arguments: [%database%]
		modelLoader:
			class: ModelLoader
			arguments: [@container]

production < common:

development < common:
\--



Vytváříme model loader
======================

Nyní vytvoříme naši klíčovou třídu - model loader. Ten nám bude zajišťovat veškeré potřebné operace pro vytváření a načítání modelů.

Model loader dostává při vytvoření globální kontejner. Našim modelům ale budeme chtít předávat pouze některé služby a pouze parametry, které je zajímají, tj. ty, které máme v konfiguračním souboru v podsekci `models`.
Modelům umožníme přístup ke třem užitečným službám: database, cacheStorage a session. Přidat další zjevně není problém.

Přístup k modelům zprostředkujeme metodou `getModel`, která se zároveň postará o "lazy"((až při prvním zavolání)) inicializaci jednotlivých modelů. Pro naše pohodlí využijeme přetěžování a k modelům budeme moci přistupovat i jako k "vlastnostem objektu"((metoda __get)), což bude jen zkratka pro volání metody `getModel`.

/--php
<?php

use Nette\DI\Container;

/**
 * Model loader
 * @link http://wiki.nette.org/cs/cookbook/dynamicke-nacitani-modelu
 * @author Majkl578
 */
final class ModelLoader
{
	/** @var Nette\DI\Container */
	private $modelContainer;

	/** @var array */
	private $models = array();

	public function __construct(Container $container)
	{
		$modelContainer = new Container;
		$modelContainer->addService('database', $container->database);
		$modelContainer->addService('cacheStorage', $container->cacheStorage);
		$modelContainer->addService('session', $container->session);
		$modelContainer->params = $container->params['models'];
		$modelContainer->freeze();
		$this->modelContainer = $modelContainer;
	}

	public function getModel($name)
	{
		$lname = strtolower($name);

		if (!isset($this->models[$lname])) {
			$class = 'Models\\' . ucfirst($name);

			if (!class_exists($class)) {
				throw new \InvalidArgumentException("Model '$class' not found");
			}

			$this->models[$lname] = new $class($this->modelContainer);
		}

		return $this->models[$lname];
	}

	public function __get($name)
	{
		return $this->getModel($name);
	}
}
\--



Připravujeme základ pro modely
==============================

Abychom nemuseli v každém našem modelu opakovat stejný kód, vytvoříme si abstraktního předka. Ten nám definuje dvě základní metody:
- getDatabase - využijeme pro přístup k databázovému objektu
- getContext - kontext modelu (služby + parametry)

/--php
<?php

namespace Models;

/**
 * Base model
 * @link http://wiki.nette.org/cs/cookbook/dynamicke-nacitani-modelu
 * @author Majkl578
 */
abstract class Base extends \Nette\Object
{
	/** @var \Nette\DI\Container */
	private $context;

	public function __construct(\Nette\DI\Container $container)
	{
		$this->context = $container;
	}

	/**
	 * @return \Nette\DI\Container
	 */
	final public function getContext()
	{
		return $this->context;
	}

	/**
	 * @return \DibiConnection
	 */
	final public function getDatabase()
	{
		return $this->context->database;
	}
}
\--

A konečně vytvoříme i vlastní model:
/--php
<?php

namespace Models;

class Foo extends Base
{
	public function bar()
	{
		//return $this->getDatabase()->...;
	}
}
\--


Používáme modely v presenteru
=============================

Nakonec si ještě vytvoříme předka pro naše presentery. Vytvoříme si metodu `getModels`, jejímž prostřednictvím budeme později k modelům přistupovat.

/--php
<?php

/**
 * Base presenter
 * @link http://wiki.nette.org/cs/cookbook/dynamicke-nacitani-modelu
 * @author Majkl578
 */
abstract class BasePresenter extends \Nette\Application\UI\Presenter
{
	public function actionFoo()
	{
		$this->models->foo; //instanceof Models\Foo
	}

	/**
	 * @return \ModelLoader
	 */
	final public function getModels()
	{
		return $this->context->modelLoader;
	}
}
\--


A co Nette\Database?
====================

Někteří si možná kladete otázku proč Dibi a ne Nette\Database. Odpověď sice nedostanete, nicméně vyměnit Dibi za Nette\Database je víc než primitivní. Stačí totiž upravit [konfigurační soubor | #Konfigurujeme prostředí]. Smažeme podsekci `database` a pouze upravíme definici služby `database`.

/--
common:
	php:
		date.timezone: Europe/Prague

	#parametry pro modely
	models:
		foo: bar

	services:
		robotLoader:
			run: true
		database:
			class: Nette\Database\Connection
			arguments: ['mysql:host=localhost;dbname=test', 'user', 'password']
		modelLoader:
			class: ModelLoader
			arguments: [@container]

production < common:

development < common:
\--


Použití modelu jako služby
==========================

Někdy může být potřeba použít některý z modelů jako samostatnou službu (například `authenticator`). Nejsnáze toho docílíme přidáním služby až v bootstrapu, ne v konfiguračním souboru.

Pokud bychom měli model `Models\User`, který implementuje rozhraní [Nette\Security\IAuthenticator | api:] a chtěli ho použít jako výše zmíněnou službu `authenticator`, přidáme do bootstrapu:
/--php
$container->addService('authenticator', function ($container) {
	return $container->modelLoader->user;
});
\--
Odteď máme registrovanou službu `authenticator`.


Závěrem
=======

V tuto chvíli máme aplikaci připravenou k využití dynamického načítání modelů využívajících Dibi popř. Nette\Database. A ani to nebolelo. :)

Scripty si můžete:
- "stáhnout":http://files.nette.org/2588/dnm.tar.bz2,
- "upravit na Githubu":https://gist.github.com/1076590 (fork gistu).
Nebo si "stáhněte":http://files.nette.org/2588/dnm-app.tar.bz2 ukázkovou *aplikaci*.

Případné dotazy/připomínky zanechte v komentářích nebo se zastavte "na Jabberu v Nette místnosti":http://forum.nette.org/cs/1705-irc-kanal-nette#p10685.

{{tags: cookbook, model, model loader, dibi, nette\database}}

{{author: Majkl578|2060}}
