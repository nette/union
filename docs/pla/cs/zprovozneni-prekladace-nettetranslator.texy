Zprovoznění NetteTranslator
**************************************

.[perex]
Návod pro jednoduché a rychlé přidání do *Nette 2.0.6 (2012-10-01)*.

- Vynechá jakoukoliv manipulaci s .po/.mo soubory.
- **Množné číslo přidává automaticky** (žádné *Undefined offset: 1*).
- Umožňuje **měnit jazyk**.
- [Zdrojové soubory|https://github.com/Schmutzka/NetteTranslator] (git)
- [Vlákno na fóru k původní verzi  |http://forum.nette.org/cs/4758-nettetranslator-gettexttranslator-nette-translation-panel] - podrobnější použití a řešení problémů


Instalace
===

Pomocí [Composeru | doc:composer]

/-- code js
{
    "require":{
        "schmutzka/nettetranslator": "dev-master"
    }
}
\--

Nebo si stáhněte zdrojové soubory ("stáhnout v .zip":https://github.com/Schmutzka/NetteTranslator/zipball/master) a umístěte je například do `libs\NetteTranslator`.

config.neon
---

- nastavíme defaultní jazyk
- přidáme službu `translator` a jeho továrničku
- přidáme soubor (či více), se kterými budem pracovat
- registrujeme panel

/--
common:
	parameters:
		lang: cs

	services:
		translator:
			factory: NetteTranslator\Gettext::getTranslator
			setup:
				- addFile(%appDir%/lang, front)
				- NetteTranslator\Panel::register
\--



BasePresenter.php
---

Aneb jak změnit jazyk:
/--php
/** @persistent */
public $lang;

/** @var NetteTranslator\Gettext */
protected $translator;


/**
 * Inject translator
 * @param NetteTranslator\Gettext
 */
public function injectTranslator(NetteTranslator\Gettext $translator)
{
	$this->translator = $translator;
}


public function createTemplate($class = NULL)
{
	$template = parent::createTemplate($class);

	// pokud není nastaven, použijeme defaultní z configu
	if (!isset($this->lang)) {
		$this->lang = $this->context->parameters["lang"];
	}

	$this->translator->setLang($this->lang); // nastavíme jazyk
	$template->setTranslator($this->translator);

	return $template;
}
\--

@layout.latte
---

Do šablony přidáme možnost změnit jazyk, způsobem běžným pro persistentní parametry.

/--html
Vyberte jazyk:
<a n:href="this, lang => en">English</a>
<a n:href="this, lang => cs">Česky</a>
\--

Volbou jazyka můžeme dostat adresy:
/--html
site.com/?lang=en
site.com/?lang=cs
\--

Pokud v `BasePresenter.php` nastavíme jazyku defaultní hodnotu, nebude se nám v url zobazovat. Tedy např. pro `$lang = en` získáme adresy.

/--html
site.com/
site.com/?lang=cs
\--

Dalším krokem může být "routování":http://doc.nette.org/cs/routing#toc-volitelne-sekvence, které umožní pohlednější zobrazení jazyka.

/--html
site.com/en/
site.com/cs/
\--


Použití
===

V šablonách
---

Defaultně je nastavené určení množného čísla pro české tvary (1 kus, 2-4 kusy, 5+/0 kusů), proto nemusíte sahat do .po/.mo souborů či využívat Poedit (viz [git |https://github.com/Schmutzka/NetteTranslator/blob/master/Gettext.php#L472]).
Lze ho tedy rovnou používat.

/--html
{_"Login"}

{_"piece", $number} <!-- množné číslo, následující formy nastavíme sami -->
1 kus <!-- $number = 1; -->
2 kusy <!-- $number = 2; -->
5 kusů <!-- $number = 5; -->
\--

U formuláře
---

/--php
protected function createComponentMyForm()
{
    $form = new Form;
    // ...

    $form->setTranslator($this->translator);
}
\--

V komponentách
---

Pro použití v komponentách je potřeba rozšířit metodu `createTemplate` (ideálně u vašeho BaseControlu) obdobně u presenteru.

/--php
public function createTemplate($class = NULL)
{
	$template = parent::createTemplate($class);
	$template->setTranslator($this->parent->translator);
	// případně $this->translator přes konstrukt/inject

	return $template;
}
\--

Pokud nebudete předávat `$translator` komponentě, je potřeba nastavit v BasePresenter `$translator` jako `public`.

Placeholder
---
Ten zatím překládat nelze, jelikož pro něj není podpora ve formuláři zajištěna. Nicméně lze to snadno napravit, stačí použít stejný text jako v placeholderu v běžném textu, nechat jej načíst panelem, přeložit a poté odstranit.

/--html
{_"Sem napiš jméno"} <!-- 1. načíst do panelu, 2. přeložit, 3. odstranit -->
{input text, placeholder => "Sem napiš jméno"}

<!-- případně -->
{input text, placeholder => $template->translate("Sem napiš jméno")}
\--

FlashMessage
---

/--php
// BasePresenter

public function flashMessage($message, $type = "info")
{
	$message = $this->translator->translate($message);
	return parent::flashMessage($message, $type);
}
\--


{{lang: en/nettetranslator-installation}}

{{tags: cookbook}}

{{author: Schmutzka|3194}}
