Jednoduchý Model s NotORM
*************************

.[perex]
Mnoho vývojárov pracujúcich s Nette Framework preferuje pre prácu s databázou knižnicu "NotORM":http://www.notorm.com/. Na rozdiel od "Nette\Database":http://doc10.nette.org/cs/database je vývoj NotORM vedený samostatne, novinky sú väčšinou portované smerom NotORM => Nette\Database. NotORM takisto podporuje pokročilé nastavenie menných konvencií, ktoré umožňuje používať názvy tabuliek vo forme "plurálu":http://cs.wikipedia.org/wiki/Mno%C5%BEn%C3%A9_%C4%8D%C3%ADslo.

.[note]
Článok (tutoriál) je určený pre Nette&nbsp;2.0&nbsp;beta pre PHP-5.3. Stavia nad štandardným **sandboxom**.

Tutoriál si kladie za cieľ naznačiť riešenie Modelovej vrstvy v Nette aplikáciach s využitím knižnice NotORM so zameraním na tieto požiadavky:

[* schema.png >]

- vylúčenie (alebo minimalizovanie) akýchkoľvek statických volaní pri práci s Modelom
- využitie Nette\DI
- zachovanie *lazy* pripojenia k databáze (vylúčenie volania pripojenia v `bootstrap.php`)
- veľmi tenká Modelová vrstva s jednoduchou možnosťou rozširovania
- možnosť používať v názvoch tabuliek *plurál*

V článku sa okrem toho dozviete ako v Nette Framework využívať Dependency&nbsp;Injecion&nbsp;(Nette\DI), pattern, ktorý bol nedávno do frameworku implementovaný.

ModelLoader
===========

Uveďme príklad práce s Modelom v Presenteri, ktoré nevnáša povinnosť statického volania, ani nenúti explicitne inštancovať triedu s Modelom.

/--code php
final class FooPresenter extends BasePresenter
{
    public function renderDefault()
    {
        $this->template->applications = $this->getModel('application')->findByName('Nette');
    }
}
\---

Zavolanie `Presenter::getModel()` iniciuje pripojenie k databáze. Nejedná sa o skutočne lazy pripojenie iniciované prvým DB požiadavkom, ale takáto funkcionalita zväčša postačuje. Aby takéto volanie bolo dostupné vo všetkých Presenteroch, treba logicky umiestniť do `BasePresenter` definíciu metódy **`getModel()`**.

/--php
abstract class BasePresenter extends Nette\Application\Presenter
{
    protected function getModel($model)
    {
        return $this->context->modelLoader->getModel($model);
    }
}
\--

Zavolanie `$context->modelLoader` v Presenteri predstavuje volanie (a získanie) tzv. služby. Služby (services) sú objekty, ktoré pre vás Nette vytvára na požiadanie. Keď je získaná inštancia služby (spôsob jej získania je definovaný napr. v konfiguračnom súbore), je uložená do kontajnera (`Nette\DI\Container`) a pri ďalšom požiadavku na službu, je už vrátená z kontainera. Jedná sa o efektívny a jednoduchý lazy *autoloading* vašich custom tried.

Získanie **`modelLoader`** je v **`app/config.neon`** nastavené na inštancovanie. Trieda `ModelLoader` pre svoju prácu potrebuje databázové pripojenie. To jej predáme do konštruktora (pole `arguments`) ako ďalšiu službu. Získanie tejto služby (`dbConnection`) zabezpečí továrnička v tej istej triede.

/--
common:

  services:

    modelLoader:
      class: Diggriola\ModelLoader
      arguments: ['@dbConnection']

    dbConnection:
      factory: Diggriola\ModelLoader::dbConnect


development < common:

  database:
    driver:   mysql
    host:     localhost
    database: notorm_demo
    username: php
    password: php
    profiler: true
\--

Prečo nepredať parametre databázového pripojenia priamo do konštruktora `ModelLoader`? Toto bohužiaľ nejde - v konfiguračnom súbore nie je možné toto zapísať. Pole `arguments` akceptuje iba:
- skalárne typy: **`"string"`**, **`int`**
- placeholdery: **`%database.host%`** (bodková syntax zatiaľ nebola backportovaná do bety!)
- odkazy na iné služby: **`@dbConnection`**

Do konštruktora nie je možné predať  pole alebo Container, ktorý konfiguráciu obsahuje. Okrem toho pre databázové spojenie ako službu hovorí aj možnosť mať v aplikácii pripojenie dostupné všade, z hlavného kontajnera. Pri prvom požiadaní o `dbConnection`, automaticky dôjde k pripojeniu k databáze.

.[note]
Obmedzenie NEONu, ktoré neumožňuje predávať v `arguments` konfiguráciu je možné obísť - vytvorte službu (pomocou `factory`, továrnička vždy obdrží jediný parameter - Container), ktorá vracia Container a takúto službu už môžete predávať do konštruktorov vašich služieb :)

ModelLoader::dbConnect()
------------------------

Máme teda pripravenú konfiguráciu. Najskôr sa pozrime na továrničku pre databázové pripojenie. Triedu `ModelLoader` doporučujeme umiestniť do **`libs\Diggriola\ModelLoader.php`**.:

/--php
<?php

namespace Diggriola;

use Nette\DI\IContainer,
    Nette\Diagnostics\Debugger,
    PDO,
    NotORM,
    NotORM_Cache_Session,
    NotORM_Structure_Convention;

class ModelLoader extends \Nette\Object
{
    private $connection = null;
    private $models = array();

    public static function dbConnect(IContainer $container)
    {
        $db = $container->params['database'];
        $dsn = (isset($db->port))
            ? "{$db->driver}:host={$db->host};dbname={$db->database};port={$db->port}"
            : "{$db->driver}:host={$db->host};dbname={$db->database}";

        $pdo = new PDO($dsn, $db->username, $db->password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $pdo->query('SET NAMES utf8');

        $conn = new NotORM($pdo, new NotORM_Structure_Convention('id', '%s_id', '%ss'), new NotORM_Cache_Session);

        if ($db->profiler) {
            $panel = Panel::getInstance();
            $panel->setPlatform($db->driver);
            Debugger::addPanel($panel);

            $conn->debug = function($query, $parameters) {
                Panel::getInstance()->logQuery($query, $parameters);
            };
        }

        return $conn;
    }

    public function __construct($connection)
    {
        $this->connection = $connection;
    }
}
\--

Ako sme už vyššie v poznámke sme spomenuli, továrničky vždy od frameworku automaticky obdržia kontajner s konfiguráciou. Ten obsahuje konfiguráciu databázového spojenia. Tieto údaje predáme do Konštruktora `PDO`. Pri vytváraní objektu NotORM nastavujeme vlastnú konvenciu, ktorá zabezpečí podporu pluralizovaných názvov DB tabuliek. Jednotlivé parametre konštruktora **`NotORM_Structure_Convention`** znamenajú:

- konvencia pre nazývanie PK
- konvencia pre nazývanie FK
- konvencia pre nazývanie tabuliek

Modifikátor **`%s`** zastupuje názov tabuľky.

ModelLoader::getModel()
-----------------------

Metóda **`getModel()`**, bude vracať inštancie konkrétnych Modelov"

/--php
public function getModel($model)
{
    if (!isset($this->models[$model])) {
        $class = 'Model\\' . ucfirst($model);
        $this->models[$model] = new $class($this->connection);
    }

    return $this->models[$model];
}
\--

Po zavolaní `getModel()` hľadáme vo veľmi jednoduchom *zásobníku* (pole) inštanciu žiadaného Modelu. Ak sa Model nenájde, inštanciu vytvoríme, uložíme ju do zásobníku a z neho ju potom vrátime. Ide o veľmi jednoduché kešovanie, pri mnohých požiadavkách na ten istý Model (počas jedného requestu samozrejme) sa nová inštancia nevytvára stále dookola. Všimnite si, že sme zaviedli konvenciu, že všetky Modely *sídlia* v namespace **Model**. Za zmienku ešte stojí, že do konštruktora Modelu predávame databázové pripojenie.

Modely
======

V úvode uvedený Model (alebo jeho rodič) by zjavne mal obsahovať definíciu metódy **`findByName`**. Jeho kód však prezrádza niečo iné.

/--php
<?php

namespace Model;

class Application extends \Diggriola\BaseModel
{

}
\--

Metódy typu **`findBy*`** sa veľmi často opakujú, mení sa len *stĺpec*, podľa ktorého chceme vyhľadávať. Zapojme preto trocha "mágie":http://php.net/manual/en/language.oop5.magic.php.

/--php
<?php

namespace Diggriola;

class BaseModel extends \Nette\Object
{
    protected $connection = null;
    protected $tableName = '';

    public function __construct($connection)
    {
        $this->connection = $connection;
        $classNameParts = explode('\\', get_class($this));
        $this->tableName = strtolower(array_pop($classNameParts)) . 's';
    }

    public function findAll()
    {
        return $this->connection->{$this->tableName}();
    }

    public function __call($name, $args)
    {
        if (false !== strpos($name, 'findBy')) {
            $cammelCaseSplit = preg_split('~(?<=\\w)(?=[A-Z])~', str_replace('findBy', '', $name));
            $loweredCammels = array_map(function($in) {
                return strtolower($in);
            }, $cammelCaseSplit);
            $findCondition = implode('.', $loweredCammels);

            if (isset($args[1]) && true === $args[1]) {
                // M:N relation
                $relationTableName = $loweredCammels[0] . 's_' . $this->tableName;
                $mn = $this->connection->{$relationTableName}($findCondition, $args[0])
                    ->select(substr($this->tableName, 0, -1) . '_id');

                try {
                    $result = $this->connection->{$this->tableName}('id', $mn);
                } catch (\PDOException $e) {
                    if (false !== strpos($e->getMessage(), 'Table') && false !== strpos($e->getMessage(), 'doesn\'t exist')) {
                        // switch table name elements
                        $relationTableName = $this->tableName . '_' . $loweredCammels[0] . 's';
                        $mn = $this->connection->{$relationTableName}($findCondition, $args[0])
                            ->select(substr($this->tableName, 0, -1) . '_id');

                        $result = $this->connection->{$this->tableName}('id', $mn);
                    } else {
                        throw $e;
                    }
                }

                return $result;
            } else {
                // no or 1:N relation
                return $this->connection->{$this->tableName}()
                    ->where($findCondition, $args[0]);
            }
        }
    }

    public function insert(array $data)
    {
        return $this->connection->{$this->tableName}()->insert($data);
    }

    public function update($rowset, $data)
    {
        return $rowset->update($data);
    }

    public function delete($rowset)
    {
        return $rowset->delete();
    }
}
\--

Toto už vypadá trocha krypticky, poďme sa na kód metódy **`__call()`** pozrieť bližšie. Po zavolaní **`$model->findByName('Nette')`** metóda obdrží v parametroch tieto údaje

/--
findByName

Array
(
    [0] => Nette
)
\--

V prvom kroku hľadáme v názve volanej metódy reťazec **findBy**. Ak sa nájde, rozsekáme si názov metódy podľa veľkých písmen pomocou regulárneho reťazca (predtým ešte odstránime už nepotrebný reťazec **findBy**).

.[note]
Prečo je názov rozsekaný na jednotlivé slová aj pri odstránenom **findBy** si vysvetlíme o chvíľu. Magická metóda **`__call()`** umožňuje vyhľadávať aj podľa stĺpcov v pridružených tabuľkách.

/--
Array
(
    [0] => Name
)
\--

Každé získane slovo je následne prehnané cez funkciu **`strtolower()`**. Slová sú potom *zlepené* znakom **.** (bodka). Pri jednoduchom volaní **`findByName('Nette')`** dostaneme (v premennej **`$findCondition`**) obyčajný string '`name`'.

V nasledujúcom kroku overujeme počet argumentov ktoré sme do **`findByName()`** predali. V našom príklade prvok **`$args[1]`** nebude nastavený a pokračuje sa vetvou `else`. Dynamicky dôjde k zostaveniu kódu, ktorého výsledok vrátime do zdroja volania

/--php
$this->connection->application()->where('name', 'Nette');
\--

relácie 1:N
-----------

Ako sme už spomenuli v poznamke vyššie, táto Modelová vrstva umožňuje *WHERE* aj podľa stĺpca v pridruženej tabuľke

/--php
$this->template->applications = $this->getModel('application')->findByAuthorName('David Grudl');
\--

Výsledkom bude, že vo **`$findCondition`** sa objaví 'author.name', čo NotORM (aj vďaka nastavenej mennej konvencii) donúti hľadať všetky záznamy v tabuľke **aplications**, ktoré majú reláciu do tabuľky **authors** a stĺpec **name** obsahuje žiadanú hodnotu.

relácie M:N
-----------

Magická metóda **`__call()`** nakoniec umožňuje špecifikovať podmienku WHERE aj v tabuľkách spojených reláciou M:N.

/--php
$this->template->applications = $this->getModel('applications')->findByTagName('dabases', $mnRelation = true);
\--

Do metódy si však vtedy posielame ďalší parameter, pretože takéto vyhľadávanie vyžaduje dva SELECTy a metóda musí tento prípad *rozvetviť* (viď vyššie **`$args[1]`**). Väzobná tabuľka môže byť pomenovaná dvojako:

- `applications_tags`
- `tags_applications`

V metóde pomocou konštrukcie *try/chatch* zachytávame prípadný hazard, ak metóda najskôr skúša reláciu podľa nesprávnej možnosti.

Download
========

Samotná abstrakčná vrstva Diggriola je umiestnená na "github":https://github.com/srigi/Diggriola pod licenciou MIT. Jej súčasťou je aj Debugbar panel.

Kompletnú Nette aplikaciu si stiahnite z "archívu":http://files.nette.org/1474/nette-notorm.zip (neobsahuje knižnice Nette a NotORM).

"Dump databázy":http://files.nette.org/1474/nette-notorm.sql.zip pre otestovanie.

Known issues
============

Pluralizovanie tabuliek funguje iba pri konvenčnom anglickom tvorení množného čísla. Bohužial momentálne neexistuje riešenie pre tieto príklady

- Category => Categories
- Octopus => Octopi
- Matrix => Matrixes

Jedinou možnosťou bude nastavenie nejakého prekladového slovníka v mennej konvencii.

{{tags: cookbook}}

{{author: srigi|1860}}
