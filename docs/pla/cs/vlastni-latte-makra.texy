Vlastní makra
*************

.[perex]
Krátký návod, jak vytvořit vlastní makro a správně ho zaregistrovat.

.[note]
Funkční pro verzi **Nette 2.0.8** PHP 5.3+.


Vytvoření
===

Pro vytvoření jednoduchého makra nám stačí vytvořit set a přidat makro. Jak připojit makra k šabloně si ukážeme později.

/--php
$set = Nette\Latte\Macros\MacroSet::install($latte->compiler);
$set->addMacro('id', NULL, NULL, 'if ($_l->tmp = array_filter(%node.array)) echo \' id="\' . %escape(implode(" ", array_unique($_l->tmp))) . \'"\'');
\--

V šabloně pak můžete vyzkoušet:

/--html
<div n:id="TRUE ? success : error">Id success</div>
<div n:id="FALSE ? success : error">Id error</div>
\--


Syntaxe makra
---

Makro má několik "základních parametrů":http://api.nette.org/2.0/Nette.Latte.Macros.MacroSet.html#_addMacro

/--php
addMacro($name, $begin, $end = NULL, $attr = NULL);
\--

Co konkrétně znamenají?

`$name` - název, `$begin` - otevírací kód, `$end` - zavírací kód, `$attr` - nahrazuje atribut

Pro podrobnější rozbor můžete kouknout do sekce "klasické makro vs n:makro":#toc-klasicke-makro-vs-n-makro, kde jsou vysvětleny jejich rozdíly.

Teď už snad je zápis o něco jasnější:
/--php
$set->addMacro('id', NULL, NULL,
  'if ($_l->tmp = array_filter(%node.array))
     echo \' id="\' . %escape(implode(" ", array_unique($_l->tmp))) . \'"\'
');
\--

Při psaní maker se kromě php kódu používají i speciální aliasy, mezi které patří `%node.word`, `%node.array`, `%node.args`, `%escape()`, `%modify()`, `%var` a `%raw`. Např. v šabloně napsané `{$var}` v makru zapíšeme jako `%escape($_template->var)`.

Pro lepší pochopení můžete nahlédnout do nativních Nette maker jako jsou "CacheMacro":http://api.nette.org/2.0/source-Latte.Macros.CacheMacro.php.html#19, "CoreMacros":http://api.nette.org/2.0/source-Latte.Macros.CoreMacros.php.html#22 a "FormMacros":http://api.nette.org/2.0/source-Latte.Macros.FormMacros.php.html#24


`$attr` jako callback
---

V případě delších funkcí lze přidat callback na samostatnou funkci.

/--php

$set->addMacro('id', NULL, NULL, array($this, 'macroId'));

// ...


/**
 * n:id="..."
 */
public function macroId(MacroNode $node, PhpWriter $writer)
{
	return $writer->write('if ($_l->tmp = array_filter(%node.array)) echo \' id="\' . %escape(implode(" ", array_unique($_l->tmp))) . \'"\'');
}

\--



Registrace
===

Makra máme vytvořena, ještě je musíme zaregistrovat, aby byly dostupná v šabloně. Existují 2 možnosti - buď pomocí **vlastní třídy, kterou přidáme do configu** (což je přehlednější a lépe rozšiřitelné), nebo **při vytváření šablony v BasePresenteru** (vhodné pro malý počtu maker).

A. Vlastní třída
---

Třídu umístíme kamkoliv v rámci složky `libs`.

**CustomMacros.php**

/--php
use Nette\Latte\MacroNode;
use Nette\Latte\PhpWriter;

class CustomMacros extends Nette\Latte\Macros\MacroSet
{

    public static function install(Nette\Latte\Compiler $compiler)
    {
        $set = new static($compiler);
		$set->addMacro('id', NULL, NULL, array($set, 'macroId'));
    }


	/**
	 * n:id="..."
	 */
	public function macroId(MacroNode $node, PhpWriter $writer)
	{
		return $writer->write('if ($_l->tmp = array_filter(%node.array)) echo \' id="\' . %escape(implode(" ", array_unique($_l->tmp))) . \'"\'');
	}

}


\--

**config.neon**

/--neon
factories:
    nette.latte:
        class:  Nette\Latte\Engine
        setup:
            - CustomMacros::install(::$service->getCompiler())
\--neon

.[tip]
Výhodou tohoto řešení je automatická registrace maker i v rámci komponent.


Od **Nette 2.1-dev** je pro makra samostatná sekce:

/--neon
nette:
	latte:
		macros:
			- CustomMacros::install
\--


B. V BasePresenteru
---

/--php
public function templatePrepareFilters($template)
{
	$latte = $this->getPresenter()->getContext()->nette->createLatte();
	$template->registerFilter($latte);

	$set = Nette\Latte\Macros\MacroSet::install($latte->compiler);
	$set->addMacro('id', NULL, NULL, 'if ($_l->tmp = array_filter(%node.array)) echo \' id="\' . %escape(implode(" ", array_unique($_l->tmp))) . \'"\'');

}
\--

.[warning]
Pro **funkčnost maker v šablonách komponent** je potřeba vložit stejný kód i do nich, resp. nějaké `BaseControl`.

Klasické makro vs. n:makro
===

/--php
addMacro($name, $begin, $end = NULL, $attr = NULL);
\--

Parametry *$begin* a *$end* slouží pro obsluhu klasického makra. *$attr* potom slouží pro obsluhu n:makra.

Klasické makro se vytvoří použitím pouze *$begin* a *$end* parametru.

N:makro se vytvoří použitím pouze *$attr* parametru.

Pokud chceme vytvořit univerzální makro, musíme při vytváření předat annonymní funkci nebo definovat všechny parametry.

Příklad použití
---

**Presenter**

/--php
# obě makra (všechny parametry)
$set->addMacro("test1", "start", "konec", "atributy");

# obě makra (anonymní funkce, callbacks)
$set->addMacro("test1", function($node, $writer) { ... });
$set->addMacro("test1", callback($this, 'myMacro');
$set->addMacro("test1", array('Macros', 'myMacro'));

# pouze n:makro
$set->addMacro("test2", NULL, NULL, "atributy");

# pouze klasické makro
$set->addMacro("test3", "start", "konec");

\--

**Šablona**

/--html
{test1 "parameter1"}Lorem lipsum..{/test1}

<div n:test1="parameter1">Lorem lipsum..</div>

<span n:test2="parameter1">Lorem lipsum..</span>

{test3 "parameter1"}Lorem lipsum..{/test3}
\--

**Html**

/--html
<?php start ?>Lorem lipsum..<?php konec ?>

<div <?php atributy ?>>Lorem lipsum..</div>

<span <?php atributy?>>Lorem lipsum..</span>

<?php start ?>Lorem lipsum..<?php konec ?>

\--

{{tags: cookbook}}

{{author: bojovyletoun|3363}}
