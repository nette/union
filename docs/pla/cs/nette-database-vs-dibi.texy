Nette\Database vs dibi
######################

Mezi uživateli Nette Frameworku v poslední době vznikají zmatky a myslí si, že tyto dvě knihovny spolu nějak souvisí. Takže si nejprve připomeneme elementární rozdíl mezi těmito dvěmi **rozdílnými** knihovnami.


dibi
****

Každý nějak začínal. Ti největší punkeři ještě pamatují "mysql_*":http://cz.php.net/manual/en/ref.mysql.php funkce, které jsou neohrabané a samy o sobě pouze nabízí PHPku přístup k databázi. Cokoliv co se přibližuje bezpečnosti si uživatel musí zařídit sám.

Proto vznikla knihovna "dibi":http://dibiphp.com/, která obaluje tyto hloupé funkce, do chytré knihovny. Řeší SQL injekci a lahodí oku programátora. "Porovnejte sami":http://sql-cross-queries.freexit.eu/php/dibi/, kolik práce vám ušetří.

Dibi dosáhla svého vrcholu, a jak sám autor říká, už není nic dalšího, co by měla umět. Je to stabilní "konzervativní"((bez magie)) knihovna, perfektní pokud máte alespoň základy SQL a učíte se programovat, nebo vyvíjíte masivní aplikaci. Prostě vám kryje záda.



Nette\Database
**************

"Nette Database":http://doc.nette.org/cs/database je velice inovativní ale i magická knihovna. Vychází z "NotORM":http://www.notorm.com/ od Jakuba Vrány a pozměnuje (příliš) magické API, aby se lépe používala.

Knihovna sama o sobě je zaměřená primárně na získávání dat z databáze a dělá to výborně. Snaží se ušetřit nás od psaní opakujících se SQL dotazů a pokládá minimální množství maximálně efektivních SQL dotazů. Opět můžete porovnat "zápis dotazů":http://sql-cross-queries.freexit.eu/dibi/nettedb/. Může se tvářit příliš magicky, ale to je právě její výhoda.



Použití dibi
************

Pokud začínáte nový projekt, je nejlepší zaregistrovat `DibiConnection` jako službu.

/--neon
common:
        parameters:
                database:
                        host: localhost
                        username: root
                        password: ***
                        lazy: TRUE

        services:
                connection:
                        class: DibiConnection(%database%)
\--


V Presenteru
============

V presenteru k připojení přistoupíme přes DI Container.

/--php
class ArticlePresenter extends Nette\Object
{
	/** @var DibiConnection */
	private $db;

	protected function startup()
	{
		parent::startup();

		// vytvoří instanci služby a uloží do vlastnosti presenteru
		$this->db = $this->context->connection;
	}

	public function actionDefault($id)
	{
		$row = $this->db->query('SELECT * FROM articles WHERE id = %i', $id);
		// ...
	}

	// ...
}
\--


V Modelu
========

Pokud pracujete s modely (cože je velice dobře), tak by váš model mohl vypadat cca takto

/--php
namespace MyApp;

class Articles extends \Nette\Object
{
	/** @var \DibiConnection */
	private $db;

	public function __construct(\DibiConnection $connection)
	{
		$this->db = $connection;
	}

	// zde následují vlastní metody na práci s články

	public function find($id)
	{
		// dibi dovoluje i fluent zápis (místo klíčových slov SQLka jsou metody)
		return $this->db->select('*')->from('articles')
			->where('id = %i', $id)
			->fetch();
	}

	public function delete($id)
	{
		$this->db->delete("articles")->where("id = %i", $id)->execute();
	}

	// další metody ...
}
\--

Takový model se správně zaregistruje do DI Containeru a nastavíme DI Container, aby mu při vytvoření předal službu `connection`, kterou jsme si definovali [na začátku | #pouziti-dibi].

/--neon
common:
	services:
		articles:
			class: MyApp\Articles(@connection)
\--

Nyní máme model zaregistrovaný v DI Containeru a můžeme ho použít v presenteru stejně, jako jsme použili samotné připojení

/--php
class ArticlePresenter extends Nette\Object
{
	/** @var Articles */
	private $articles;

	protected function startup()
	{
		parent::startup();
		$this->articles = $this->context->articles;
	}

	public function actionDefault($id)
	{
		$row = $this->articles->find($id);
		// ...
	}

	// ...
}
\--

.[tip]
O modelech s dibi si můžete přečíst i můj "starší článek":http://wiki.nette.org/cs/cookbook/model-entity-repository-mapper z praxe.


Stará aplikace, se statickými modely
====================================

Nový "DI Container":http://doc.nette.org/cs/configuring je stále ještě velice čerstvá záležitost a je možné, že vaše aplikace má modely statické a došli jste do bodu, kdy vám takovéto řešení nestačí. Není nic jednoduššího, než si zaregistrovat dibi tak, aby fungovaly staré statické modely, ale zároveň bylo dibi jako služba. Díky tomu můžete bezbolestně přepisovat statické modely a psát nové modely lépe.

/--neon
common:
        parameters:
                database:
                        driver: mysql
                        host: localhost
                        username: root
                        password: ***
                        lazy: TRUE

        services:
                database:
                        class: DibiConnection
                        factory: dibi::connect(%database%)
                        run: TRUE
\--

DI Container umožňuje pověřit vytvořením služby i jinou službu, nebo třídu a klidně i statickou. Takže toho využijeme a nadefinujeme si, aby dibi bylo vytvářeno staticky, jeho instance se uložila jako služba a automaticky se spouštěla při startu aplikace.

Tento zápis je identicky se zastaralým zápisem z `app/boostrap.php`

/--php
dibi::connect($container->parameters['database']);
\--



Použití Nette\Database
**********************

Zde nejsem ten nejoprávněnější něco obsáhlého psát, takže jen stručně. Platí v podstatě vše, co bylo napsáno o dibi, jen modely a použití bude malinko jiné, kvůli povaze knihovny.

Snad vás moc nezmatu, když vás odkážu na "návod, jak pracovat s NotORM v Nette":http://wiki.nette.org/cs/cookbook/jednoduchy-model-s-notorm, protože jak jsme si řekli, Nette\Database je odvozené od NotORM, jenom má trošku jiné metody, které si můžete "prohlédnout v dokumentaci":http://doc.nette.org/cs/database nebo si je můžete sami "srovnat":http://sql-cross-queries.freexit.eu/nettedb/notorm/.

Ukáži tedy pouze základ


v Presenteru
============

Protože Nette\Database je součástí Nette Frameworku, ten toho využívá naplno a usnadňuje nám vytváření služby s Nette\Database pro připojení. Nastavení konfiguračního souboru si můžete prohlédnout [zde | doc:/cs/configuring/nette-framework#toc-databaze].

Použití bude podobné, jako u dibi

/--php
class ArticlePresenter extends Nette\Object
{
	/** @var Nette\Database\Table\Selection */
	private $articles;

	protected function startup()
	{
		parent::startup();

		// vytvoří instanci služby a uloží do vlastnosti presenteru
		// rovnou si ale získáme selector pro tabulku
		$this->articles = $this->context->database->table('articles');
	}

	public function actionDefault($id)
	{
		$row = $this->articles->get($id);
		// ...
	}

	// ...
}
\--

Jak vidíte, Nette\Database nám ze začátku vývoje aplikace může plně suplovat vlastní třídy s modely, dokud nebude potřebné oddělit složitější logiku. Toto prosím neznamená, že modelové třídy nemáte psát. To znamená, že může nějakou dobu trvat, než zjistíte, že je potřebujete.

{{tags: dibi, database}}

{{author: Filip Procházka|2118}}
