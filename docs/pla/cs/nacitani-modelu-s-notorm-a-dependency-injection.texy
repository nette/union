Načítání modelu s NotORM a Dependency Injection
**************************************

.[warning]
Dynamické načítání modelů (modelLoader) nahrazuje v Nette 2.0.0 a novějším **Dependency Injection container** (v [konfiguračním souboru | doc:cs:configuring#toc-definice-sluzeb]), který nám vše usnadňuje. Výhodou řešení přes DI container je přehlednost a možnost [autowiringu |doc:cs:configuring#toc-auto-wiring].

.[note]
Návod využítá **Nette 2.0** a **NotORM**. Jak napojit databázi s *dibi* či *Nette Database* si můžete přečíst v [tomto návodu |nette-database-vs-dibi].

Text vychází strukturou i obsahem z návodu [Dynamické načítání modelů |dynamicke-nacitani-modelu] (by *Majkl578*), kam doporučuji pro případné doplnění teorie nahlédnout.


Konfigurujeme prostředí
===

config.neon
---

Nejprve si v konfiguračním souboru config.neon nastavíme potřebné parametry a registrujeme službu database.

/--neon
common:
	parameters:
		# parametry pro připojení k databázi
		database:
			driver: mysql
			hostn: local
			username: root
			password:
			dbname: database

	includes:
		- models.neon

	nette:
		database:
			default:
				dsn: "%database.driver%:host=%database.host%;dbname=%database.dbname%"
				user: %database.username%
				password: %database.password%

	services:
		dbcache: NotORM_Cache_Include("%tempDir%/notorm.cache")
		database: NotORM(@\PDO, NULL, @dbcache)


production < common:

development < common:
\--

models.neon
---

Pro přehlednost a velké množství modelů je lepší vytvořit si samostatný soubor. O předávané parametry se starat nemusíme, to za nás udělá [autowiring |doc:cs:configuring#toc-auto-wiring].

/--neon
services:
	models: Nette\DI\NestedAccessor(@container, "models")
	models.user: Models\User
	models.article: Models\Article
\--


Modely
===

Abychom nemuseli v každém našem modelu opakovat stejný kód, vytvoříme si abstraktního předka. Ten nám definuje obecené metody a přístup k databázi.

BaseModel.php
---

/--php

namespace Models;

class Base extends \Nette\Object
{
	/** @var \Notorm */
	protected $db;

	/** @var string */
	private $tableName;


	public function __construct(\NotORM $notorm) // autowiring napojí NotORM sám
	{
		$this->db = $notorm;
		$this->tableName = $this->tableNameByClass(get_class($this));
	}


	/**
	 * Určí tabulku dle názvu třídy [Pages => pages, ArticleTag => article_tag]
	 * @param string
	 * @return string
	 */
	private function tableNameByClass($className)
	{
		$tableName = explode("\\", $className);
		$tableName = lcfirst(array_pop($tableName));

		$replace = array(); // A => _a
		foreach(range("A", "Z") as $letter) {
			$replace[$letter] = "_".strtolower($letter);
		}

		return strtr($tableName, $replace);
	}

	// vlastní metody: insert, update, delete etc.

}
\--

Vlastní model
---

Obsahuje všechny metody vytvořené v `Models\Base`, které můžeme ihned používat.

/--php
namespace Models;

class User extends Base
{
	/**
	 * Return user by name
	 * @param string
	 */
	public function getByName($name)
	{
		return $this->db->user("name", $name)->fetch();
	}
}
\--


Používáme
===

Nyní máme modely registrované jako služby a můžeme je vesele používat.


BasePresenter.php
---

Do `BasePresenteru` si přidáme zkratku, která nám **ušetří trochu psaní**: tedy místo `$this->context->models->pozadovanyModel` bude stačit `$this->models->pozadovanyModel`. Při neustálém používání modelů tuto zkratku oceníme.

/--php
/**
 * Models shortcut
 * @return SystemContainer_models
 */
public function getModels()
{
	return $this->context->models;
}
\--

.[note]
Nezpomeňte k funkci *getModels* doplnit anotaci **@return**, nebo se připravíte o možnost automatického napovídání ze SystemContaineru.

MyPresenter.php
---

/--php
$results = $this->models->user->getByName("Jan Novák");
\--

Jednoduché, že?

{{author: Schmutzka|3194}}
