Loading models with NotORM and Dependency Injection
***************************************************

.[warning]
Dynamic model loader is in Nette 2.0+ replaced by **Dependency Injection container** (in [configuration file | doc:en:configuring#toc-services-definitions]). Pros of DI container approach is transparency and availability of [autowiring |doc:en:configuring#toc-auto-wiring].

.[note]
This tutorial uses **Nette 2.0** and **NotORM**. How to connect to database using *dibi* or *Nette Database* can be found in [this tutorial |pla:cs:nette-database-vs-dibi].

Text is based on [Dynamic model loader |pla:cs:dynamicke-nacitani-modelu] (by *Majkl578*), where you can go to check theoretic connections.

Configuring environment
===

config.neon
---

First we set up required parameters and register database service.

/--neon
common:
	parameters:
		# parameters to connected to database
		database:
			driver: mysql
			hostn: local
			username: root
			password:
			dbname: database

	includes:
		- models.neon

	nette:
		database:
			default:
				dsn: "%database.driver%:host=%database.host%;dbname=%database.dbname%"
				user: %database.username%
				password: %database.password%

	services:
		dbcache: NotORM_Cache_Include("%tempDir%/notorm.cache")
		database: NotORM(@\PDO, NULL, @dbcache)


production < common:

development < common:
\--

models.neon
---

For quick and simple overview of all models it's better to create separate file for models. All required parameters are handled by [autowiring |doc:en:configuring#toc-auto-wiring].

/--neon
services:
	models: Nette\DI\NestedAccessor(@container, "models")
	models.user: Models\User
	models.article: Models\Article
\--


Models
===

To preserve KISS approach and not to repeat same code in all models, we have to create abstract parent class. We define basic methods and database connection in it.


BaseModel.php
---

/--php

namespace Models;

class Base extends \Nette\Object
{
	/** @var \Notorm */
	protected $db;

	/** @var string */
	private $tableName;


	public function __construct(\NotORM $notorm) // autowiring
	{
		$this->db = $notorm;
		$this->tableName = $this->tableNameByClass(get_class($this));
	}


	/**
	 * Determine table by class name [Pages => pages, ArticleTag => article_tag]
	 * @param string
	 * @return string
	 */
	private function tableNameByClass($className)
	{
		$tableName = explode("\\", $className);
		$tableName = lcfirst(array_pop($tableName));

		$replace = array(); // A => _a
		foreach(range("A", "Z") as $letter) {
			$replace[$letter] = "_".strtolower($letter);
		}

		return strtr($tableName, $replace);
	}

	// own methods: insert, update, delete etc.

}
\--

Particular model
---

Every model extending `Models\Base` contains all it's methods.

/--php
namespace Models;

class User extends Base
{
	/**
	 * Return user by name
	 * @param string
	 */
	public function getByName($name)
	{
		return $this->db->user("name", $name)->fetch();
	}
}
\--


Using model
===

Now we have all models registered as services and we can immediately use them.


BasePresenter.php
---

To save some writing, we can add a shortcut into `BasePresenter`, so instead of `$this->context->models->requestedModel` only `$this->models->requestedModel`.

/--php
/**
 * Models shortcut
 * @return SystemContainer_models
 */
public function getModels()
{
	return $this->context->models;
}
\--

.[note]
Don't forget to complete **@return** to *getModels* method, automatic prompts from SystemContainer won't work instead.


MyPresenter.php
---

/--php
$results = $this->models->user->getByName("John Doe");
\--

Simple, right?


{{lang: cs/nacitani-modelu-s-notorm-a-dependency-injection}}

{{author: Schmutzka|3194}}
