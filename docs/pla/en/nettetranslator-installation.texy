NetteTranslator installation
****************************

.[perex]
Tutorial to quick and simple integration in *Nette 2.0.10*.

- Excludes any manipuliation with .po/.mo files.
- **Plural is automaticly added**
- Enabled **language change**.
- [Thread on forum to former version |http://forum.nette.org/cs/4758-nettetranslator-gettexttranslator-nette-translation-panel]


Installation
===

Via [Composer | doc:composer]

/-- code js
{
    "require":{
	"schmutzka/nettetranslator": "2.0.0"
    }
}
\--

or from "github":https://github.com/Schmutzka/NetteTranslator/


config.neon
---
- set default language
- add language file for specific modules

/---neon
netteTranslator:
	lang: cs
	files:
		front: %appDir%/lang # for module Front and other non-specified modules
		admin: %appDir/lang-admin # for module Admin
	# optional with defaults
	layout: horizontal # or: vertical
	height: 450
\---


Bootstrap.php
---

Place before `$container = $configurator->createContainer()`;

/---php
$configurator->onCompile[] = function ($configurator, $compiler) {
	$compiler->addExtension('netteTranslator', new NetteTranslator\DI\Extension);
};
\---

Or you can use *extensions* part in *config.neon* since **Nette 2.1-dev** instead.

**config.neon**
/---neon
extensions:
	netteTranslator: NetteTranslator\DI\Extension
\---


How to change language
===

**BasePresenter.php**

/--php

class BasePresenter extends Nette\Appliaction\UI\Presenter
{
    /** @persistent */
    public $lang;

    /** @var NetteTranslator\Gettext */
    protected $translator;


    /**
     * @param NetteTranslator\Gettext
     */
    public function injectTranslator(NetteTranslator\Gettext $translator)
    {
        $this->translator = $translator;
    }


    public function createTemplate($class = NULL)
    {
    	$template = parent::createTemplate($class);

    	// if not set, the default language will be used
    	if (!isset($this->lang)) {
    		$this->lang = $this->translator->getLang();

    	} else {
	    	$this->translator->setLang($this->lang);
	}

    	$template->setTranslator($this->translator);

    	return $template;
    }
}
\---


@layout.latte
---

Now we add links that enabled language change into template.

/--html
Choose language:
<a n:href="this, lang => en">English</a>
<a n:href="this, lang => cs">ÄŒesky</a>
\--

We get following urls:
/--html
site.com/?lang=en
site.com/?lang=cs
\--

If we setup lang default value in `BasePresenter.php`, its value will not be displayed in the url, e.g. for `$lang = en` urls will look like this:

/--html
site.com/
site.com/?lang=cs
\--

Nice routes
---

Next step might be nicer lang "routing":http://doc.nette.org/en/routing#toc-optional-sequences.

/--html
site.com/en/
site.com/cs/
\--


Use cases
===

In templates
---

Plural version is set as default for Czech forms (1 piece, 2-4 pieces, 5+/0 pieces), so you don't have to manipulate .po/.mo files.


/--html
{_"Login"}

{_"piece", $number}
1 piece <!-- $number = 1; -->
2 pieces <!-- $number = 2; -->
5 pieces <!-- $number = 5; -->
\--

In forms
---

/--php
protected function createComponentMyForm()
{
	$form = new Form;
	$form->setTranslator($this->translator);

	// ...

	return $form;
}
\--


In components
---

Extend `createTemplate()` method in your BaseControl, as in Presenter.

/--php
public function createTemplate($class = NULL)
{
	$template = parent::createTemplate($class);
	$template->setTranslator($this->parent->translator); // $template in presenter has to be public
	// or $this->translator via construct/inject

	return $template;
}
\--


Placeholder
---
Placeholder is not directly supported, so we have to use this workaround in template.

/---html
{input text, placeholder => $template->translate("Text to be translated")}
\---


FlashMessage
---

/--php
// BasePresenter

public function flashMessage($message, $type = "info")
{
	$message = $this->translator->translate($message);
	return parent::flashMessage($message, $type);
}
\--

{{author: Schmutzka|3194}}
