NetteTranslator installation
****************************

.[perex]
Tutorial to quick and simple integration in *Nette 2.0 (2012-04-02)*.


- Excludes any manipuliation with .po/.mo files.
- **Plural is automaticly added** (no *Undefined offset: 1*).
- Enabled **language change**.
- [Source files|https://github.com/Schmutzka/NetteTranslator] (git)
- [Thread on forum to former version |http://forum.nette.org/cs/4758-nettetranslator-gettexttranslator-nette-translation-panel]


Installation
===

Place sources files ("download in .zip":https://github.com/Schmutzka/NetteTranslator/zipball/master) e.g. into `libs\NetteTranslator`.

config.neon
---

- set default languagek
- add service `translator` and it's factory
- add one or more files we will work with
- register into debug panel

/--
common:
	parameters:
		lang: cs

	services:
		translator:
			factory: NetteTranslator\Gettext::getTranslator
			setup:
				- addFile(%appDir%/lang, front)
				- NetteTranslator\Panel::register
\--



BasePresenter.php
---

How to change language:

/--php
/** @persistent */
public $lang = "en"; // enables change through the url


public function createTemplate($class = NULL)
{
	$template = parent::createTemplate($class);

	// if not set, use the one from config (default)
	if (!isset($this->lang)) {
		$this->lang = $this->context->parameters["lang"];
	}

	$this->context->translator->setLang($this->lang); // set language
	$template->setTranslator($this->context->translator);

	return $template;
}
\--

Use
===

In templates
---

Plural version is set as default for Czech forms (1 piece, 2-4 pieces, 5+/0 pieces), so you don't have to manipulate .po/.mo files or use Poedit (viz [git |https://github.com/Schmutzka/NetteTranslator/blob/master/Gettext.php#L469]).


/--html
{_"Login"}

{_"piece", $number}
1 piece <!-- $number = 1; -->
2 pieces <!-- $number = 2; -->
5 pieces <!-- $number = 5; -->
\--

In forms
---

/--php
protected function createComponentMyForm()
{
    $form = new Form;
    // ...

    $form->setTranslator($this->context->translator);
}
\--

FlashMessage
---

/--php
// BasePresenter

public function flashMessage($message, $type = "info")
{
	if($this->context->hasService("translator")) {
		$message = $this->getContext()->translator->translate($message);
	}
	return parent::flashMessage($message, $type);
}
\--

{{author: Schmutzka|3194}}
