<?php
%A%

final class Template%a% extends Latte\Runtime\Template
{
	public $blocks = [
		'static' => 'blockStatic',
	];

	public $blockTypes = [
		'static' => 'html',
	];


	public function main(): array
	{
		extract($this->params);
		$var = 10;
?>

<?php
		if ($this->getParentName()) {
			return get_defined_vars();
		}
		$this->renderBlock('static', get_defined_vars());
?>


<?php
		$iterations = 0;
		foreach ($iterator = $this->global->its[] = new LR\CachingIterator(['dynamic', 'static']) as $name) {
			$this->checkBlockContentType('html', $name);
			$this->blockQueue[$name][] = [$this, 'blockName'];
			$this->renderBlock($name, get_defined_vars());
?>

<?php
			$iterations++;
		}
		array_pop($this->global->its);
		$iterator = end($this->global->its);
?>

<?php
		$this->renderBlock('dynamic', ['var' => 20] + $this->params, 'html');
?>

<?php
		$this->renderBlock('static', ['var' => 30] + get_defined_vars(), 'html');
?>

<?php
		$this->renderBlock($name . '', ['var' => 40] + $this->params, 'html');
?>

<?php
		$this->checkBlockContentType('html', "word$name");
		$this->blockQueue["word$name"][] = [$this, 'blockWord_name'];
		$this->renderBlock("word$name", get_defined_vars());
?>


<?php
		$this->checkBlockContentType('html', "strip$name");
		$this->blockQueue["strip$name"][] = [$this, 'blockStrip_name'];
		$this->renderBlock("strip$name", get_defined_vars(), function ($s, $type) {
			$_fi = new LR\FilterInfo($type);
			return LR\Filters::convertTo($_fi, 'html', $this->filters->filterContent('striptags', $_fi, $s));
		});
?>

<?php
		return get_defined_vars();
	}


	public function prepare(): void
	{
		extract($this->params);
		if (!$this->getReferringTemplate() || $this->getReferenceType() === "extends") {
			foreach (array_intersect_key(['name' => '8'], $this->params) as $_v => $_l) {
				trigger_error("Variable \$$_v overwritten in foreach on line $_l");
			}
		}

	}


	public function blockName(array $_args): void
	{
		extract($_args);
		?>		Dynamic block #<?php echo LR\Filters::escapeHtmlText($var) /* line 10 */ ?>

<?php
	}


	public function blockWord_name(array $_args): void
	{
		extract($_args);
		if (false) {
			?><div></div><?php
		}

	}


	public function blockStrip_name(array $_args): void
	{
		extract($_args);
		?><span>hello</span><?php
	}


	public function blockStatic(array $_args): void
	{
		extract($_args);
		?>	Static block #<?php echo LR\Filters::escapeHtmlText($var) /* line 4 */ ?>

<?php
	}

}
