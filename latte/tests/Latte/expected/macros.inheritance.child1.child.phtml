<?php
// source: %A%

class Template%a% extends Latte\Template
{
	public $blocks = [
		'title' => ['blockTitle', 'html'],
		'content' => ['blockContent', 'html'],
	];


	function render()
	{
%A%
// prolog Latte\Macros\BlockMacros
// template extending

$this->local->extends = "inheritance.parent.latte"; $this->global->extended = TRUE;

if ($this->local->extends) { ob_start(function () {});}

// main template ?>

<?php ob_start(function () {}); $this->global->includingBlock = isset($this->global->includingBlock) ? ++$this->global->includingBlock : 1; $this->renderChildTemplate('includeblock.inc.latte', get_defined_vars()); $this->global->includingBlock--; echo rtrim(ob_get_clean()) ?>


<?php if ($this->local->extends) { ob_end_clean(); return $this->renderChildTemplate($this->local->extends, get_defined_vars()); }
call_user_func(reset($_b->blocks['title']), $_b, get_defined_vars())  ?>

<?php call_user_func(reset($_b->blocks['content']), $_b, get_defined_vars()) ;
	}


	function blockTitle($_b, $_args)
	{
		extract($_args)
?>Homepage | <?php if ('html' !== $_b->types['title']) { trigger_error('Incompatible context for including block title.', E_USER_WARNING); }
Latte\Macros\BlockMacrosRuntime::callBlockParent($_b, 'title', get_defined_vars()) ;if ('html' !== $_b->types['title']) { trigger_error('Incompatible context for including block title.', E_USER_WARNING); }
Latte\Macros\BlockMacrosRuntime::callBlockParent($_b, 'title', get_defined_vars()) ;
	}


	function blockContent($_b, $_args)
	{
		extract($_args)
?>	<ul>
<?php $iterations = 0; if (isset($this->params['person'])) trigger_error('Variable $person overwritten in foreach.'); foreach ($people as $person) { ?>
		<li><?php echo LFilters::escapeHtmlText($person) ?></li>
<?php $iterations++; } ?>
	</ul>
<?php
	}

}
